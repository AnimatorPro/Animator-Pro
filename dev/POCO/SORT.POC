
int str_to_lower(char *s)
{
char c;

while ((c = *s) != 0)
	{
	if (c >= 'A' && c <= 'Z')
		*s = c + 'a' - 'A';
	s += 1;
	}
}

lower_names(char **names, int count)
{
while (--count >= 0)
	str_to_lower(*names++);
}


reverse_name(char *s)
{
char *first, *last;
char swap;
int count;

count = strlen(s);
first = last = s;
last += count;
count >>= 1;
while (--count >= 0)
	{
	swap = *first;
	*first++ = *(--last);
	*last = swap;
	}
}

reverse_all_names(char **names, int count)
{
while (--count >= 0)
	reverse_name(*names++);
}

int is_in_names(char *me, char **names, int name_count)
{
while (--name_count >= 0)
	{
	if (strcmp(me, *names++) == 0)
		return(1);
	}
return(0);
}

print_names(char **names, int count)
{
while (--count >= 0)
	puts(*names++);
}

int scmp(char *a, char *b)
{
return(strcmp(a,b));
}

int rcmp(char *a, char *b, ...)
{
return(-strcmp(a,b));
}

/* a little shell sort on an array of strings */
sort_names(char **array, int count, int (*cmp)(char *s, char *d))
{
register char **pt1, **pt2;
register char *swap;
register short swaps;
register int space, ct;

if (count < 2)  /*very short arrays are already sorted*/
	return;
space = count/2;
--count; /* since look at two elements at once...*/
for (;;)
	{
	swaps = 1;
	while (swaps)
		{
		pt2 = pt1 = array;
		pt2 += space;
		ct = count - space + 1;
		swaps = 0;
		while (--ct >= 0)
			{
			if (cmp(*pt1, *pt2) > 0)
				{
				swaps = 1;
				swap = *pt1;
				*pt1 = *pt2;
				*pt2 = swap;
				}
			pt1++;
			pt2++;
			}
		}
	if ( (space = space/2) == 0)
		break;
	}
}


reverse_names(char **names, int count)
{
char *swapper;
char **first, **last;

first = last = names;
last += count-1;
count >>= 1;
while (--count >= 0)
	{
	swapper = *first;
	*first = *last;
	*last = swapper;
	first += 1;
	last -= 1;
	}
}

char *names[] = {
	"Jim",
	"Heidi",
	"Chris",
	"Ann",
	"Peter",
	"Eric",
	"Cindy",
	"Jack",
	"Gary",
	"Lewis",
	"Jo",
	"Heidi",
	"Margeret",
	"Alice",
	"Billy",
	"Juanita",
	"Sally",
	"James",
	"Jacob",
	"Kevin",
	"Charlotte",
	"Alvin",
	"Fred",
};

print_separator()
{
puts("----------------------");
}

to_upper(char c)
{
if (c >= 'a' && c <= 'z')
	{
	return(c + 'A' - 'a');
	}
else
	return(c);
}

cap_first(char **names, int count)
{
char *s;

while (--count >= 0)
	{
	s = *names++;
	s[0] = to_upper(s[0]);
	}
}

main()
{
char *test = "Jimbo";
int name_size;

name_size = sizeof(names)/sizeof(names[0]);
if (is_in_names(test, names, name_size ))
	{
	printf("%s is a name\n", test);
	}
else
	{
	printf("I don't know about %s\n", test);
	}
print_separator();
print_names(names, name_size);
sort_names(names, name_size, rcmp);
print_separator();
print_names(names, name_size);
reverse_names(names, name_size);
print_separator();
print_names(names, name_size);
reverse_all_names(names, name_size);
lower_names(names, name_size);
cap_first(names, name_size);
sort_names(names, name_size, scmp);
print_separator();
print_names(names, name_size);
print_separator();
reverse_all_names(names, name_size);
cap_first(names, name_size);
sort_names(names, name_size, strcmp);
print_names(names, name_size);
}
