October 10, 1990.

              --- A way of having Poco call C code directly ---

    From looking at the poco loadable library format it would be desirable 
to have poco call C library functions in their native stack frame format.

    The main thing that Is needed to do this is to have a stack descriptor 
item available at run time in poco that describes the number and (poco 
internal) types on the poco stack.
    ie:     byte, short, long, pointer, Popot, and structure (with pointer 
            to it's descriptor) if implemented.

These desriptors would have to be built at compile time, when the actual 
arguments to the calls are resolved.  For non (...) functions only, one 
would be needed for each call since they are constant, possibly checking the 
extant ones to see if it is already there.  An additional field for the size 
of the "C" stack needed for the converted result would speed up the run time 
operation. A structure something like:

struct stack_descriptor {
    USHORT c_size;
    UBYTE types[?] /* 0 terminated list of types on poco stack */
}

A structure type could be the byte followed by a structure template id or 
pointer if the type is a user defined structure.

    A structure like this with additional types for C stack types might be
used to do a similar process the other way for calling poco functions from C 
code.  The descriptor could be the same but having added a poco stack size 
and extra types for the C stack types.

    This table is food for a function:
 postack_to_cstack(stack_descriptor *sd, void *poco_stack, void *cstack);

which is called from a function:
 poco_call_func(stack_descriptor *sd, void *poco_stack, int c_stack_size,
                Ret_type (*cvector)());

That uses postack_to_cstack to prepare a c stack frame and call the vector. 
The stack converter function also puts the pointer to the raw poco stack on 
the stack so the c function also has access to the poco stack for typing 
information, array bounds checking etc.

    I have written a test module to handle callling code that uses the C 
stack format from poco.  The basis of this is an assembler module that will 
call a vector function to convert the stack to an allocated stack frame and 
then call the C code vector set up for that stack frame, returning to the 
caller's stack frame with return values in their proper registers.


    In watcom's -3s mode all is passed on the stack so passing stuff on a 
simple stack frame works well.  If other than -3s mode is used the C vectors 
passed into the call should be pragmatized to compile this way, or the glue 
would have to be re-written to handle registers.

    I have tested it with the basic C data types and all is well. doubles 
are returned in the eax,edi register pair. The rest in eax which are un 
modified on return to the caller of poco_call_Xfunc().

    It would be possible to have a variation of this which will call 
functions that return full fledged structures larger than 4 bytes on the 
stack since the compiler passes the address of the structure into the called 
function in the esi register.  a version could be made that is passed in the 
pointer to the callers return area and then the glue would stuff that into 
esi before calling the C code module.  For a specific case (the Popot) only 
another symbol is needed so the caller can have the compiled in loading of 
the esi. and the transfer areas.  It would actually be more efficient to 
make C library calls that have to return a fully loaded Popot be passed in 
the address of the Popot because watcom seems to copy the returned structure 
into a stack structure in the caller before copying it into the callers 
result area.  I guess this is to implement  strucfunc().field and have it 
easy to handle.  I am not sure whether highc uses the same structure 
returning protocall as watcom.  This would have to be checked.

                            Peter Kennard 
