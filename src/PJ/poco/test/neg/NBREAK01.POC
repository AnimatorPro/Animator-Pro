/* breakout - the classic computer game where you try to knock out all the
 * bricks with a ball that bounce off the walls and your paddle
 */
#pragma poco echo "expect>g undefined"

#define TRUE 1
#define FALSE 0

/*** A disk object
 ***/
typedef struct disk
	{
	int color;
	int x,y;
	int radius;
	} Disk;
void disk_init(Disk *this, int color, int x, int y, int radius);
void disk_draw(Disk *this);

/*** A rectangle object
 ***/
typedef struct rect
	{
	int color;
	int x,y;
	int width, height;
	} Rect;
void rect_init(Rect *this, int color, int x, int y, int width, int height);
void rect_draw(Rect *this);
Boolean rect_hit(Rect *this, Disk *d);

/*** Object to define the bouncing
 *** ball.
 ***/
typedef struct ball
	{
	Disk draw;
	int dx,dy;
	} Ball;
void ball_init(Ball *this, int color, int x, int y, int radius, int dx, int dy);
void ball_draw(Ball *this);

/*** Object to define a single
 *** brick.
 ***/
typedef struct brick
	{
	Rect draw;
	} Brick;
void brick_init(Brick *this, int color, int x, int y, int width, int height);
void brick_draw(Brick *this);
Boolean brick_hit(Brick *this, Ball *ba);

/*** Object to define the player's
 *** paddle.
 ***/
typedef struct paddle
	{
	Rect draw;
	} Paddle;
void paddle_init(Paddle *this, int color, int x, int y, int width, int height);
void paddle_draw(Paddle *this);
Boolean paddle_hit(Paddle *this, Ball *ba);

/*** Object to define a wall of the
 *** playing area.
 ***/
typedef struct wall
	{
	Rect draw;
	int facex, facey;		/* Which way the ball bounces off it. */
	} Wall;
void wall_init(Wall *this, int color, int x, int y, int width, int height,
	int facex, int facey);
void wall_draw(Wall *this);
void wall_hit(Wall *this, Ball *ba);

/*** Object to define a player's
 *** score.
 ***/
typedef struct score
	{
	int color;
	int x, y;
	int count;
	} Score;
void score_init(Score *this, int color, int x, int y, int count);
void score_add(Score *this, int amount);

/*** Object to save the PJ program
 *** state.
 ***/
typedef struct pjstate
	{
	int ccolor;
	Boolean filled;
	Boolean two_color;
	char ink[20];
	} Pjstate;
void pjstate_save(Pjstate *this);
void pjstate_restore(Pjstate *this);



/*** Disk methods.
 ***/
void disk_init(Disk *this, int color, int x, int y, int radius)
{
this->color = color;
this->x = x;
this->y = y;
this->radius = radius;
}

void disk_draw(Disk *this)
{
SetColor(this->color);
Circle(this->x, this->y, this->radius);
}

/*** Rect methods
 ***/
void rect_init(Rect *this, int color, int x, int y, int width, int height)
{
this->color = color;
this->x = x;
this->y = y;
this->width = width;
this->height = height;
}

void rect_draw(Rect *this)
{
SetColor(this->color);
Box(this->x, this->y, this->width, this->height);
}

Boolean rect_hit(Rect *this, Disk *d)
/* Determine if disk is in collision with rect */
{
int rad = d->radius;

return		d->x - rad <= this->x + this->width &&
			d->x + rad >= this->x			&&
			d->y - rad <= this->y + this->height &&
			d->y + rad >= this->y			;
}

/*** Ball methods.
 ***/
void ball_init(Ball *this, int color, int x, int y, int radius, int dx, int dy)
{
disk_init(&this->draw, color, x, y, radius);
this->dx = dx;
this->dy = dy;
}

void ball_draw(Ball *this)
{
disk_draw(&this->draw);
}


/*** Brick methods
 ***/
void brick_init(Brick *this, int color, int x, int y, int width, int height)
{
rect_init(&this->draw, color, x, y, width, height);
}

void brick_draw(Brick *this)
{
rect_draw(&this->draw);
}

Boolean brick_hit(Brick *this, Ball *ba)
{
return(rect_hit(&this->draw, &ba->draw));
}

/*** Paddle methods.
 ***/
void paddle_init(Paddle *this, int color, int x, int y, int width, int height)
{
rect_init(&this->draw, color, x, y, width, height);
}

void paddle_draw(Paddle *this)
{
rect_draw(&this->draw);
}

Boolean paddle_hit(Paddle *this, Ball *ba)
{
return(rect_hit(&this->draw, &ba->draw));
}

/*** Wall methods.
 ***/
void wall_init(Wall *this, int color, int x, int y, int width, int height,
	int facex, int facey)
{
rect_init(&this->draw, color, x, y, width, height);
this->facex = facex;
this->facey = facey;
}

void wall_draw(Wall *this)
{
rect_draw(&this->draw);
}

void wall_hit(Wall *this, Ball *ba)
{
rect_hit(&this->draw, &ba->draw);
}

/*** Score methods
 ***/
void score_init(Score *this, int color, int x, int y, int count)
{
this->color = color;
this->x = x;
this->y = y;
this->count = count;
}

void score_add(Score *this, int amount)
{
this->count += amount;
}

/*** pjstate methods
 ***/
void pjstate_save(Pjstate *this)
{
this->ccolor = GetColor();
this->filled = GetFilled();
this->two_color = GetTwoColor();
GetInk(this->ink);
}

void pjstate_restore(Pjstate *this)
{
SetColor(this->ccolor);
SetFilled(this->filled);
SetTwoColor(this->two_color);
SetInk(this->ink);
}

/*** Game methods
 ***/
typedef struct game
	{
	int back_color;
	int screenw, screenh;
	int wall_thick;
	int arenaw, arenah;
	int brick_spacing;
	int brick_thick;
	int brick_width;
	Wall walls[4];
	Score score;
	Paddle paddle;
	Brick *bricks;
	int brick_count;
	int xbricks;
	int ybricks;
	} Game g;
Boolean game_init(int xbricks, int ybricks,
	int back_color, int wall_color,
	int paddle_color, int ball_color, int score_color)
{
#define DW 320		/* unscaled dimensions */
#define DH 200
int i,j, x,y;

g.xbricks = xbricks;
g.ybricks = ybricks;
g.back_color = back_color;
GetSize(&g.screenw, &g.screenh);
g.wall_thick = 4*g.screenh/DH;
g.brick_thick = 4*g.screenh/DH;
g.brick_width = 15*g.screenw/DW;
g.brick_spacing = g.screenh/DH;
g.arenaw = 2*wall_thick + (xbricks+1)*g.brick_spacing + xbricks*g.brick_width;
g.arenah = g.screenh;
wall_init(&g.walls[0], wall_color,
		  0, 0,
		  g.arenaw, g.wall_thick, 0, 1);
wall_init(&g.walls[1], wall_color,
		  0, g.arenah - g.wall_thick - 1,
		  g.arenaw, g.wall_thick, 0, -1);
wall_init(&g.walls[2], wall_color,
		  0, 0,
		  g.wall_thick, g.arenah, 1, 0);
wall_init(&g.walls[3], wall_color,
		  g.arenaw - g.wall_thick - 1, 0,
		  g.wall_thick, g.arenah, -1, 0);
score_init(&g.score, score_color, g.arenaw + g.wall_thick, 0, 0);
g.brick_count = xbricks*ybricks;
if ((g.bricks = calloc(sizeof Brick, brick_count)) == NULL)
	{
	Qerror(-1, "Not enough memory for bricks");
	return(FALSE);
	}
#undef DW
#undef DH
}


void game_play()
{
}


void main()
{
Pjstate old_state;

pjstate_save(&old_state);
if (game_init(10, 5,
	))
	{
	game_play();
	}
pjstate_restore(&old_state);
}
