#pragma poco library "lookup.poe"       // this library is required!

#define MAXNAMES	500  // limit displayed functions,	300 < MAXNAMES < 5000
#define MAXNAMELEN	50	 // limit function name length, 20	< MAXLEN   < 80
#define Success 	0

void main(void)
{
	ErrCode err;
	err = __lookup__poemain(MAXNAMES, MAXNAMELEN); // entry point to lookup.poe
	if (err != Success) // if a non-successfull error code was returned,
		exit(err);		// exit with that value to force a host error dialog.
}

#pragma poco eof	// stop compiling here, no need to 'compile' comments...

/*****************************************************************************
 * LOOKUP.POC - Lookup the syntax of a Poco library function.
 *
 *	This program will display a scrolling list of all the functions in the
 *	Poco builtin and specified POE libraries.  A double-click on a function
 *	name in the scrolling list will display the complete function prototype.
 *	The scrolling list also contains a type-in field.  You may type a string
 *	into this field and hit ENTER, and a list of function names containing
 *	your string (in any position within the name) will be displayed.  The
 *	type-in string filtering is case-insensitive; typing "bli" will list
 *	"Blit()", "IconBlit()", and "RubLine()".
 *
 *	This Poco program is associated with module LOOKUP.POE, which provides
 *	the actual lookup processing.  This small Poco program is a stub which
 *	transfers control (and a couple parameters) to the entry point of
 *	the POE module.  The routines within the POE module build and display
 *	the library function list, interact with the user, and return the status
 *	to this program, which then simply exits.
 *
 *	The list will contain the name of each routine in each of the Poco
 *	builtin libraries, and the name of each routine in all loaded POE modules.
 *	If you have favorite libraries of POE functions which you would like to
 *	have included in the lookup lists, simply code a "#pragma poco library"
 *	statement for each of them.  Any number of libraries can be
 *	specified, provided that there are no conflicts in the names of the
 *	functions in the different libraries.  (The need to avoid naming conflicts
 *	is the reason the entry point in lookup.poe has the rather unlikely name
 *	of "__lookup__poemain()".)
 *
 *	If many libraries are included with #pragma statements, it may be
 *	necessary to tweak the MAXNAMES and/or MAXNAMELEN constants.  The
 *	builtin libraries currently contain around 275 functions, so there is
 *	plenty of room for growth in the default values coded.	(Setting
 *	these values too high might result in a failure to obtain the memory
 *	needed to build the function lists.)
 ****************************************************************************/
