/*****************************************************************************
 * RGBTOOL - Access the RGB processing options of the TIFF and TARGA drivers.
 ****************************************************************************/

#pragma poco library "pdracces.poe"
#include "errcodes.h"

/*----------------------------------------------------------------------------
 * dialog strings...
 *--------------------------------------------------------------------------*/

char	askoverwrite[]	=		"Okay to replace existing %s%s file?";
char	picpdr_unknown[]=		"Sorry, I don't know which picture driver "
								"module to use for a '%s' file."
								;
char	save_was_good[] =		"Picture saved";
char	*psuffi[]		=		{".TIF",".TGA"};
long	lastsuffix;
char	loadbutton[]	=		"Load";
char	savebutton[]	=		"Save";
char	loadprompt[]	=		"Select Picture File to Load:";
char	saveprompt[]	=		"Select Picture File to Save:";


/*----------------------------------------------------------------------------
 * the main menu...
 *--------------------------------------------------------------------------*/

char	mainprompt[]	=		" RGB Picture Tool... ";
char	*mainchoices[]	=	 {	" Load Picture",
								" Save Picture",
								" Advance Flic Frame",
								" Set Options",
								" Help",
								" Exit",
							 };
enum {
	MAIN_EXIT,
	MAIN_PICLOAD,
	MAIN_PICSAVE,
	MAIN_ADVANCE,
	MAIN_SETOPTN,
	MAIN_HELP,
	};

/*----------------------------------------------------------------------------
 * the nextframe dialog...
 *--------------------------------------------------------------------------*/

char	frameprompt[]	=		"You are currently on the last flic frame.\n"
								"Which of the following would you prefer?\n"
								;
char	*framechoices[] =	 {	"Add a frame",
								"Go to 1st frame",
								"Stay put",
							 };
enum {
	  FRAME_ADD = 1,
	  FRAME_TOFIRST,
	  FRAME_STAY,
	 };


/*----------------------------------------------------------------------------
 * the options menu...
 *--------------------------------------------------------------------------*/

char	optprompt[]   = 		" Preset Which Options? ";
char	*optchoices[] = 	 {	" RGB Input Options",
								" TIFF Output Options",
								" TARGA Output Options",
								" Exit",
							 };

enum {
	  OPT_EXIT,
	  OPT_RGB,
	  OPT_TIFF,
	  OPT_TARGA,
	 };

/*----------------------------------------------------------------------------
 * help text...
 *--------------------------------------------------------------------------*/

char	mainhelptext[]	=
							  "The TIFF and TARGA file formats "
							  "support TrueColor (RGB) data formats which "
							  "require extensive conversion during Load "
							  "processing.  These file formats also support "
							  "a variety of output options (data "
							  "compression, pixel depth, etc) for Save "
							  "processing.  Normally, the CONVERT program "
							  "must be used to access these features."
							  "\n\n"
							  "This Poco program provides a way to access "
							  "most of these features directly from within "
							  "Animator.  Please note that this program does "
							  "not support several important CONVERT options, "
							  "notably, Scaling, Dithering, and Tiling. "
							  "\n\n"
							  "More information is available on the "
							  "following topics: "
							  ;
char	*mainhelpchoices[] = {"Load Picture",
							  "Save Picture",
							  "Preset Options",
							  "DONE",
							 };

enum {
	HELP_LOAD = 1,
	HELP_SAVE,
	HELP_OPTN,
	HELP_DONE,
	};

char	loadhelptext[]	=	"When you select Load Picture, a file selector "
							"will appear, allowing you to locate the input "
							"picture file.  After the picture is selected, "
							"it will be opened and the pixel depth will be "
							"checked.  If the depth is greater than 8 "
							"the RGB input options "
							"dialog will appear (unless the input options "
							"have been preselected with the Set Options "
							"dialog).  If the picture file contains a color "
							"mapped or monochrome image, it will be loaded "
							"immediately (input options don't apply to non-"
							"RGB images)."
							"\n\n"
							"If the picture size differs from the current "
							"flic size, it will be centered or cropped "
							"accordingly.  The load process cannot scale "
							"images."
							;
char	savehelptext[]	=	"When you select Save Picture, a file selector "
							"will appear, allowing you to specify the output "
							"picture file.  If the file exists, you will "
							"be prompted for permission to overwrite it.  "
							"Before the picture is saved, the output options "
							"dialog will appear (unless the output options "
							"for this picture type have been preselected "
							"with the Set Options dialog)."
							;
char	optnhelptext[]	=	"The Set Options dialogs allow you to preset "
							"input and/or output options.  These options "
							"will remain in effect throughout the run of "
							"the program, allowing you to load or store a "
							"sequence of pictures without re-entering the "
							"options each time."
							"\n\n"
							"When any input or output options are in effect, "
							"the Set Options selection in the main menu will "
							"be flagged with a star.  Within the option-types "
							"menu, a star appears next to each type of "
							"option which has had values preset.  To clear "
							"preset options, select the type of option, and "
							"then select CANCEL on the options list."
							;
/*----------------------------------------------------------------------------
 * misc data and constants...
 *--------------------------------------------------------------------------*/

Boolean opt_rgb_valid = FALSE;
Boolean opt_tga_valid = FALSE;
Boolean opt_tif_valid = FALSE;
Boolean opt_pic_valid = FALSE;
long	opt_rgb_values;
long	opt_tga_values;
long	opt_tif_values;
long	opt_pic_values;

enum { PIC_LOAD, PIC_SAVE };

enum { NO_DIALOG, DO_DIALOG, };

enum { LOADVARS, SAVEVARS, };

/*----------------------------------------------------------------------------
 * code...
 *-------------------------------------------------------------------------*/

Errcode pic_save(char *pdrname, char *picname)
/*****************************************************************************
 * save the current flic frame to a picture file.
 ****************************************************************************/
{
	Errcode err;
	Screen	*pscreen;

	pscreen = GetPicScreen();

	PicDriverLoad(pdrname);

	if (opt_pic_valid)
		PicPdrOptionsPreset(NO_DIALOG, opt_pic_values);

	err = PicSave(picname, pscreen);
	PicDriverUnload();
}

Errcode pic_load(char *pdrname, char *picname)
/*****************************************************************************
 * load a picture file into the current flic frame.
 ****************************************************************************/
{
	Errcode err;
	Screen	*pscreen = GetPicScreen();

	PicDriverLoad(pdrname);

	if (opt_rgb_valid)
		PicRgbOptionsPreset(NO_DIALOG, opt_rgb_values);

	err = PicLoad(picname, pscreen);
	PicDriverUnload();
}

char *pdr_for_pic(char *picpath)
/*****************************************************************************
 * return the name of the picture driver (PDR) for the given picture filename.
 * also copies the preset options for the pdr to the generic options variables.
 ****************************************************************************/
{
	char dev[3], path[66], fname[9], ftype[5];

	fnsplit(picpath, dev, path, fname, ftype);
	if (0 == strcmp(ftype, ".TIF")) {
		opt_pic_valid  = opt_tif_valid;
		opt_pic_values = opt_tif_values;
		return "TIFF.PDR";
	} else if (0 == strcmp(ftype, ".TGA")) {
		opt_pic_valid  = opt_tga_valid;
		opt_pic_values = opt_tga_values;
		return "TARGA.PDR";
	} else {
		Qtext(picpdr_unknown, ftype);
		return NULL;
	}

}

Boolean do_picfile_dialog(char *picpath, int save_or_load)
/*****************************************************************************
 * do the load/save Qfile dialog, ask permission to overwrite existing files.
 ****************************************************************************/
{
	char	suffi[20];
	char	dev[3], path[66], fname[9], ftype[5];

	sprintf(suffi,"%s;%s;.*", psuffi[lastsuffix], psuffi[1-lastsuffix]);

	if (save_or_load == PIC_SAVE) {
		if (!Qfile(suffi, savebutton, picpath, picpath, FALSE, saveprompt))
			return FALSE;
		if (DosExists(picpath)) {
			fnsplit(picpath, dev, path, fname, ftype);
			if (!Qquestion(askoverwrite, fname, ftype))
				return FALSE;
		}
	} else {
		if (!Qfile(suffi, loadbutton, picpath, picpath, FALSE, loadprompt))
			return FALSE;
		fnsplit(picpath, dev, path, fname, ftype);
	}

	if (0 == strcmp(psuffi[1], ftype))
		lastsuffix = 1;
	else
		lastsuffix = 0;

	return TRUE;
}

void do_nextframe_dialog(void)
/*****************************************************************************
 * advance to the next frame, if at last frame, give the user some options.
 ****************************************************************************/
{
	int framecount;
	int curframe;
	int thechoice;

	framecount = GetFrameCount();
	curframe = GetFrame();

	if (curframe < framecount-1) {
		NextFrame();
		return;
	}

	thechoice = Qchoice(framechoices, Array_els(framechoices), frameprompt);
	switch (thechoice) {
	  case FRAME_ADD:
		SetFrameCount(framecount+1);
		SetFrame(framecount);
		Clear();
		break;
	  case FRAME_TOFIRST:
		SetFrame(0);
		break;
	  default:
		return;
	}

}

void set_optflags()
/*****************************************************************************
 * set '*' chars in the menu strings next to options which have valid values.
 ****************************************************************************/
{
	Boolean any_set = FALSE;
	char	flagged;

	if (opt_rgb_valid) {
		any_set = TRUE;
		flagged = '*';
	} else
		flagged = ' ';
	optchoices[OPT_RGB-1][0] = flagged;

	if (opt_tif_valid) {
		any_set = TRUE;
		flagged = '*';
	} else
		flagged = ' ';
	optchoices[OPT_TIFF-1][0] = flagged;

	if (opt_tga_valid) {
		any_set = TRUE;
		flagged = '*';
	} else
		flagged = ' ';
	optchoices[OPT_TARGA-1][0] = flagged;

	if (any_set)
		flagged = '*';
	else
		flagged = ' ';
	mainchoices[MAIN_SETOPTN-1][0] = flagged;
}

void do_options_dialog(void)
/*****************************************************************************
 * conduct the options dialogs (most work done by the pdracces routines)
 ****************************************************************************/
{
	int 	err;
	int 	thechoice;
	long	preset_values;

	for (;;) {
		set_optflags();
		thechoice = Qmenu(optchoices, Array_els(optchoices), optprompt);
		switch (thechoice) {
		  case OPT_RGB:
			if (Success <= (preset_values = PicRgbOptionsPreset(DO_DIALOG,opt_rgb_values))) {
				opt_rgb_valid = TRUE;
				opt_rgb_values = preset_values;
			} else {
				opt_rgb_valid = FALSE;
			}
			break;
		  case OPT_TIFF:
			PicDriverLoad("TIFF.PDR");
			if (Success <= (preset_values = PicPdrOptionsPreset(DO_DIALOG,opt_tif_values))) {
				opt_tif_valid = TRUE;
				opt_tif_values = preset_values;
			} else {
				opt_tif_valid = FALSE;
			}
			PicDriverUnload();
			break;
		  case OPT_TARGA:
			PicDriverLoad("TARGA.PDR");
			if (Success <= (preset_values = PicPdrOptionsPreset(DO_DIALOG,opt_tga_values))) {
				opt_tga_valid = TRUE;
				opt_tga_values = preset_values;
			} else {
				opt_tga_valid = FALSE;
			}
			PicDriverUnload();
			break;
		  default:
			return;
		}
	}
}

void do_help_dialog(void)
/*****************************************************************************
 * drive the help menu and display the requested help texts.
 ****************************************************************************/
{
	int thechoice;

	for (;;) {
		thechoice = Qchoice(mainhelpchoices, Array_els(mainhelpchoices), mainhelptext);
		switch (thechoice) {
		  case HELP_LOAD:
			Qtext(loadhelptext);
			break;
		  case HELP_SAVE:
			Qtext(savehelptext);
			break;
		  case HELP_OPTN:
			Qtext(optnhelptext);
			break;
		  default:
			return;
		}
	}

}

Errcode get_global_num(char *varname, long *num)
/*****************************************************************************
 * get a global variable string and convert it to a number.
 ****************************************************************************/
{
	char	workbuf[20];
	int 	err;

	workbuf[0] = '\0';
	if (Success > (err = GlobalVarGet(varname, workbuf)))
		return err;
	*num = atoi(workbuf);
	return Success;
}

void set_global_num(char *varname, long value)
/*****************************************************************************
 * convert a number to a string and save it in a global variable.
 ****************************************************************************/
{
	char	workbuf[20];

	sprintf(workbuf, "%d", value);
	GlobalVarSet(varname, workbuf);
}

void global_values(int option, char *picpath)
/*****************************************************************************
 * load or save user's preferences using GlobalVar lib routines.
 ****************************************************************************/
{
	char		workbuf[20];
	static char path_varname[]	 = "$rgbtool_lastpath";
	static char suffix_varname[] = "$rgbtool_lastsuffix";
	static char rgb_varname[]	 = "$rgbtool_rgboptions";
	static char tga_varname[]	 = "$rgbtool_tgaoptions";
	static char tif_varname[]	 = "$rgbtool_tifoptions";

	if (option == LOADVARS) {
		GlobalVarGet(path_varname, picpath);
		if (Success != get_global_num(suffix_varname, &lastsuffix))
			lastsuffix = 0;
		if (Success == get_global_num(rgb_varname, &opt_rgb_values))
			opt_rgb_valid = TRUE;
		if (Success == get_global_num(tga_varname, &opt_tga_values))
			opt_tga_valid = TRUE;
		if (Success == get_global_num(tif_varname, &opt_tif_values))
			opt_tif_valid = TRUE;
	} else {
		GlobalVarSet(path_varname, picpath);
		set_global_num(suffix_varname, lastsuffix);
		if (opt_rgb_valid)
			set_global_num(rgb_varname, opt_rgb_values);
		else
			GlobalVarDelete(rgb_varname);
		if (opt_tga_valid)
			set_global_num(tga_varname, opt_tga_values);
		else
			GlobalVarDelete(tga_varname);
		if (opt_tif_valid)
			set_global_num(tif_varname, opt_tif_values);
		else
			GlobalVarDelete(tif_varname);
	}
}

void main(void)
/*****************************************************************************
 * loop on the main menu until the user chooses Exit; dispatch other routines.
 ****************************************************************************/
{
	Errcode err;
	int 	thechoice;
	char	*pdrname;
	char	picpath[PATH_SIZE];

	global_values(LOADVARS, picpath);
	set_optflags(); // flag the Set Options menu item if presets were loaded

	for (;;) {

		thechoice = Qmenu(mainchoices, Array_els(mainchoices), mainprompt);
		switch (thechoice) {

		  case MAIN_PICLOAD:

			if (do_picfile_dialog(picpath, PIC_LOAD))
				if (NULL != (pdrname = pdr_for_pic(picpath)))
					if (Success > (err = pic_load(pdrname, picpath)))
						if (err != Err_abort) {
							Qerror(err, "Error detected by PicLoad():");
							goto EXIT;
						}
			break;

		  case MAIN_PICSAVE:

			if (do_picfile_dialog(picpath, PIC_SAVE))
				if (NULL != (pdrname = pdr_for_pic(picpath)))
					if (Success > (err = pic_save(pdrname, picpath))) {
						if (err != Err_abort) {
							Qerror(err, "Error detected by PicSave():");
							goto EXIT;
						}
					} else {
						Qtext(save_was_good);
					}

			break;

		  case MAIN_ADVANCE:

			do_nextframe_dialog();
			break;

		  case MAIN_SETOPTN:

			do_options_dialog();
			break;

		  case MAIN_HELP:

			do_help_dialog();
			break;

		  default:

			err = Success;
			goto EXIT;
		}
	}

EXIT:

	global_values(SAVEVARS, picpath);
	exit(err);
}
