/*****************************************************************************
 * PICLIST - List info on the picture files in a given directory.
 *			 Allows you to preview and/or load pictures from the list.
 ****************************************************************************/

#pragma poco library "pdracces.poe"
#include "errcodes.h"

/*----------------------------------------------------------------------------
 * dialog strings...
 *--------------------------------------------------------------------------*/

char	pathprompt[]	= "List picture files in which path?";
char	pathbutton[]	= "This Path";

char	*listbuttons[]	= {"Ok", NULL, "Exit"};
char	listptemplate[] = "Picture files in %s";
char	listprompt[PATH_SIZE+sizeof(listptemplate)+1];

char	no_files[]		= "No picture files were found in path %s";
char	load_error[]	= "Error attempting to load picture %s";

char	working_msg[]	= "Getting picture information...";

char	actionprompt[]	= "Select action for picture file %s:"
						  "\n\n"
						  "PREVIEW will display the picture without disturbing "
						  "the current flic frame, but the contents of the "
						  "swap screen (if any) are destroyed."
						  "\n\n"
						  "CURRENT will load the picture into the current "
						  "flic frame."
						  "\n\n"
						  "AFTER will insert a frame following the "
						  "current frame and load the picture into it."
						  "\n\n"
						  ;
char	*actionbuttons[]= {"Preview", "Current", "After", "Exit"};
enum {
	ACT_PREVIEW = 1,
	ACT_LOADCURRENT,
	ACT_LOADAFTER,
	ACT_EXIT,
	};

/*----------------------------------------------------------------------------
 * misc data and constants...
 *--------------------------------------------------------------------------*/

char	picpath[PATH_SIZE];
int 	listcount;
char	**display_list;
char	*display_data;
char	display_template[] = " %-12s %4d x %4d x %2d  ";

#define DISPLAY_LINE_LENGTH 34

/*----------------------------------------------------------------------------
 * code...
 *--------------------------------------------------------------------------*/

int build_list(char *path)
/*****************************************************************************
 * build the list of file info for the specified directory.
 ****************************************************************************/
{
	char **piclist;
	char **picfile;
	char **dlist;
	char *ddata;
	int fcount;
	int width, height, depth;
	int i;

	SetDir(path);

	fcount = DirList(&piclist, "*.*", FALSE);
	if (fcount <= 0) {
		return 0;
	}

	listcount = 0;
	if (NULL == (display_list = calloc(fcount, sizeof(char **))))
		exit(Err_no_memory);
	if (NULL == (display_data = calloc(fcount, DISPLAY_LINE_LENGTH)))
		exit(Err_no_memory);

	printf(working_msg);

	ddata = display_data;
	dlist = display_list;
	picfile = piclist;
	for (i = 0; i < fcount; ++i) {
//		printf("getting info for %s", *picfile);
		if (Success <= PicGetSize(*picfile, &width, &height, &depth)) {
			++listcount;
			*dlist++ = ddata;
			ddata += 1+sprintf(ddata, display_template, *picfile, width, height, depth);
		}
		++picfile;
	}
	FreeDirList(&piclist);
	unprintf();
	return listcount;
}

Errcode load_pic(char *picname)
/*****************************************************************************
 * load a picture, report any errors.
 ****************************************************************************/
{
	Errcode err;
	Screen	*pscreen = GetPicScreen();

	PicDriverFindLoad(picname);
	if (Success > (err = PicLoad(picname, pscreen))) {
		Qerror(err, load_error, picname);
	}
	return err;
}

void view_pic(char *picname)
/*****************************************************************************
 * preview a picture.
 * the current picscreen is stored in the swap screen for the duration.
 ****************************************************************************/
{
	int x,y,l,r,k;
	Errcode err;
	Screen *pscreen;
	Screen *sscreen;

	SwapClip();

	pscreen = GetPicScreen();
	sscreen = GetSwapScreen();

	PicDriverFindLoad(picname);
	PicRgbOptionsPreset(FALSE,1);	  // fast psuedo-color for rgb picture view
	err = PicLoad(picname, pscreen);
	PicRgbOptionsClear();
	if (Success > err) {
		Qerror(err, load_error, picname);
		return;
	}

	SetAbort(FALSE);
	HideCursor();
	do {
		PollInput(&x, &y, &l, &r, &k); // wait for mouse button or keystroke
	} while (l+r+k == 0);
	ShowCursor();
	SetAbort(TRUE);

	CopyScreen(sscreen, pscreen);
	SwapRelease();
}

void select_picture(int picidx)
/*****************************************************************************
 * the user selected a picture from the list, provide available actions.
 ****************************************************************************/
{
	int 	theaction;
	char	picname[14];
	char	*pwrk1, *pwrk2;

	if (picidx < 0 || picidx > listcount) // should never happen
		return;

	pwrk1 = &display_list[picidx][1];
	for (pwrk2 = picname; *pwrk1 != ' '; ++pwrk1, ++pwrk2)
		*pwrk2 = *pwrk1;
	*pwrk2 = '\0';

	for (;;) {
		theaction = Qchoice(actionbuttons, Array_els(actionbuttons), actionprompt, picname);
		switch (theaction) {
		  case ACT_PREVIEW:
			view_pic(picname);
			break;
		  case ACT_LOADAFTER:
			InsertFrames(1);
			NextFrame();
			/* fall thru */
		  case ACT_LOADCURRENT:
			if (Success <= load_pic(picname))
				display_list[picidx][0] = '*';
			return;
		  default:
			return;
		}
	}
}

void tidyup_pathname(char *picpath)
/*****************************************************************************
 * strip off the file name and type (if any) leaving just device/path.
 ****************************************************************************/
{
	char drive[3], path[66], file[9], type[5];

	fnsplit(picpath, drive, path, file, type);
	fnmerge(picpath, drive, path, "", "");
}

void main(void)
/*****************************************************************************
 * main loop driver.
 ****************************************************************************/
{
	int 	thechoice;
	int 	exitbutton;
	int 	lastpos = -1;
	Boolean exit_the_list;

	GlobalVarGet("$piclist_lastpath", picpath);

	for (;;) {

		if (!Qfile(".*", pathbutton, picpath, picpath, FALSE, pathprompt))
			goto EXIT;
		tidyup_pathname(picpath);
		if (0 == build_list(picpath)) {
			Qerror(Err_not_found, no_files, picpath);
			continue;
		}

		exit_the_list = FALSE;
		do	{
			sprintf(listprompt, listptemplate, picpath);
			exitbutton = Qscroll(&thechoice, display_list, listcount, &lastpos,
									listbuttons, listprompt);
			switch (exitbutton) {
			  case 1:
				select_picture(thechoice);
				break;
			  default:
				exit_the_list = TRUE;
				break;
			}
		} while (!exit_the_list);

		if (display_list != NULL)
			free(display_list);
		if (display_data != NULL)
			free(display_data);
	}

EXIT:

	GlobalVarSet("$piclist_lastpath", picpath);

}
