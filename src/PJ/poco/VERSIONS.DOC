Changes made in each Poco version...
  (Pre-170 versions documented in versnold.doc)

 Version    Date    Changes

    170   04/16/91  > Peter modified pp_pragma() to extend the syntax of the
                      pragma poco library statement.  It now accepts a string
                      following the library name, and if the string is present,
                      it must match (case-insensitive) the ID string coded in
                      the POE library module.  If no string is specified, the
                      ID string from the POE module is ignored.  Also, the
                      atoi() function was added to the string library
                      (strlib.c).

    171   05/01/91  > Fixed trapping of floating point errors on the host
                      side; fp errors now set builtin_err to Err_float but
                      don't directly report to the user.  Moved 'ownership'
                      of the builtin_err variable into poco.  (It used to be
                      declared on the host side, now it's declared in
                      pocoface.c).  This was done so that floating point errors
                      during constant-folding (eg, during the compile phase)
                      can be seen by poco.
                    > Added #pragma poco eof.
                    > Tweaked error reporting routine say_error in POCO.C. It
                      used to report the line number on which an error occurred
                      based on file_stack->line_count.  Because of the multi-
                      token lookahead logic, this can be as much as 5 to 10
                      lines beyond where the error happened.  Now we report the
                      line number based on curtoken->line_num, which is usually
                      the right line number (sometimes it'll be the next line
                      number, because of the vagaries of binop expression
                      parsing with the shift/reduce part of the parser).
                    > Error reporting also enhanced to report the error message
                      text (from aa.mu) if the error is more complicated than
                      a simple Err_syntax.

    172   05/21/91  > Added a check to check_dupe_proto in declare.c to prevent
                      a function supplied via the proto strings in a POE lib
                      to duplicate the name of a function in the builtin libs.

    173   07/06/91  > Fixed a glitch in the po_types_same() routine that was
                      allow bogus ambiguity between arrays and pointers. (IE,
                      it was thinking "char a[2][2]" and "char *a[2]" were
                      equivelent.)  Now for a pointer and an array to be
                      synonomous with each other, they must be a pointer-to
                      and an array-of the same type of things.  Note that
                      this is bypassed at a higher level for void pointers,
                      so "char *a; void **b; b=a;" is still legal when it
                      shouldn't be.
                    > Added a new error code, Err_poco_exit, and added some
                      logic to runops.c to go with it.  This error code is
                      used ONLY by the po_exit() library routine.  When the
                      lib routine sets this status into builtin_err, runops
                      will shut down, but will return a Success status instead
                      of Err_abort like it used to.  This makes PocoChainTo()
                      work properly when followed by 'exit(0);' in the code.
                    > Added an fputc('\n') to po_file_to_stdout in pocoface.
                      Sometimes this makes an extra NL display during output,
                      and sometimes it puts one there that's needed.  I dunno
                      why it's only sometimes needed, but the extra one when
                      it isn't needed doesn't hurt a thing, so...

    174   07/06/91  > Jim tries to hack in a String type.
                      It's to the point where it's generating OP_STRING_XXX
                      pretty much everywhere it should (except for freeing
                      local string variables), and also is running ok
                      treating a String like a (Popot) char * internally.
                    > Made it so void is no longer a valid type in numeric
                      expressions and void functions can't return a value.

    175   07/07/91  > Further work on string types.  Have a reference
                      counting protocol established that looks like
                      it'll do the job in postring.c.  Right now
                      it's possible for the reference count to
                      drop to 0 but the string not be freed during
                      a coercion from string to char * if the string
                      value originated in a function return.  I'm
                      keeping a list of all strings, so I can
                      walk the list freeing 0 ref. count things
                      periodically, but not sure where to do it
                      for minimal impact on performance.

    176   07/08/91  > Eliminated all (OP_IXXX + ido_type)
                      encodings in favor of xxx_ops[ido_type] (eg keeping
                      an array of multiplication ops, one for each
                      ido_type rather than adding the ido_type to OP_IMUL.)
                      This should be a good deal more flexible and less
                      error prone.
                    > Have string operations == != <= >= < > and +
                      (for concatenation) in place.  Basically
                      it all works now, but you're still going
                      to lose string memory sometimes.  String
                      arrays aren't freed up and string->(char *)
                      conversions leave an orphaned string reference.

    177   07/08/91  > Converted ugly #define's in pocoop.h to enums and
                      got rid of unused OP_CODE's.

    178   11/02/91  > New library function CelRelease() added.
                    > Fixed bug involving macros that have parens but no
                      parms.  A #define x() type macro would always give an
                      error when invoked as x(); now it works right.

    179   01/10/92  > Fixed bug in POCOFACE.C that was preventing the use
                      of multiple #pragma poco library statements in a
                      single poco program.

    180   05/10/92  > Fixed bug in get_member() in POCO.C that was generating
                      the wrong code to access an array inside a structure.
                      See comment block at head of get_member() for details.
                    > Added debugging routine po_dump_codebuf(), present only
                      when DEVELOPMENT is #define'd.  It dumps the current
                      contents of a code buffer to stdout during compile.
                    > Fixed array_decl() in DECLARE.C so that an array with
                      a size in a prototype is converted to a pointer type,
                      same as array[] without a size.
                    > Tweaked po_check_formatf() in POCOLIB.C so that a NULL
                      pointer passed for a %p format doesn't cause an abort,
                      since there's no problem with printing a NULL pointer.
                    > Added sanity check to po_get_libproto_line() in
                      POCOFACE.C to catch NULL proto string pointers.
                    > Changed the opcodes table in POCOOPS.C so that it now
                      now carries information on each instruction that
                      indicates whether the instruction disqualifies the
                      code sequence as a purely-constant sequence.  Right
                      now, this new info isn't being used for anything, but
                      it's in place.

    181  05/17/92   > Library changes, in poco and in root...
                    > New tween library         (\paa\pocotwen.c)
                    > New title library         (\paa\pocotitl.c)
                    > New flicplay library      (\paa\pocoflic.c)
                    > Updated string library    (strlib.c)
                        Added: strpbrk(), strtok(),  getenv()
                               strlwr(),  strupr(),  strerror()
                               strspn(),  strcspn(), atof()
                    > Updated memory library    (safefile.c)
                        Added: memchr()
                        Fixed: malloc() - No longer aborts on out-of-memory.
                    > Misc root library additions since v179:
                             SetBoxBevel(), GetBoxBevel()
                             CelRelease(),  GetPhysicalScreen(poe only)

    182  05/23/92   > Rewrote variable init routine.  It now lives in its
                      own module, VARINIT.C.  The rewrite fixes the bug that
                      prevented definition of an array of agregate types
                      with implied size.

    183  06/11/92   > Access to an array within a structure, where the
                      structure was accessed via a pointer, now works.
                      (Change in make_deref()).
                    > In po_code_pop(), we no longer attempt to optimize
                      away a do-nothing push/pop pair, since the routine
                      could be fooled by the data part of the preceeding op.
                    > #error now reports the rest of the text on the line
                      to the user, or "Error forced by #error" if there is
                      no other text on the line.
                    > Added #define EOF in resource\stdio.h.

    184  06/12/92   > You can now derference the return value of a function
                      that returns a pointer (ie, *strcpy(d,s) = 'x'; works).
                      Changes in FUNCCALL.C.
                    > Changed lotsa things in POCO.H to be enum types, for
                      better debugging.

    185  08/17/92   > Fixed reporting of errors that occur in preprocessor
                      statements.  It used to report a bogus line number.
                      Changes in POCO.C, POCO.H, PP.C, CHOPPER.C.
                    > An unexpected '}' is now reported.  Changes in POCO.C.
                    > Stack overflow is now checked on OP_ENTER so that
                      allocating more local vars than we have stack space
                      for is reported as an Err_poco_stack. Changes in RUNOPS.C.
                    > Line number reporting on stack traceback is now correct
                      when the error happens on or before the first line in
                      the function.  Changes in TRACE.C.
                    > Taking the address of an array by coding its name is
                      now properly recognized as a legal constant init
                      expression value. Changes in FOLD.C, POCO.C, VARINIT.C.
                    > The pure_const status of an expression following an
                      address-of (&) operator is now propogated upwards
                      properly. (eg, &(*ptr) is no longer seen as pure_const).
                      Changes in POCO.C.

