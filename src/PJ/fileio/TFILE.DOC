t 5
Message  5:
From jkent Sun Mar 31 03:08:14 1991
Return-Path: <jkent>
Received: by autodesk.uucp  (4.1/SMI-3.2)
	id AA27789; Sun, 31 Mar 91 03:08:13 PST
Date: Sun, 31 Mar 91 03:08:13 PST
From: jkent (Jim Kent)
Message-Id: <9103311108.AA27789@autodesk.uucp >
To: peterk
Subject: Re:  tfile
Status: R

I just found out a secret on BIX.  I haven't tested this,  but here goes:
	dos_seek(file, place)
	dos_write(file, &dummybuf, 0)
(ie a zero length write) is supposed to truncate a file.

I appreciate your concern about getting into this.   It's nice to know
that you haven't librarified the temp-file system yet,  though since
the temp drive depends on all the other file stuff I do find it
unfamiliar to work on it.   For the moment could you just do an
*analysis* of what is there?  It is such a crucial part of the program
I think it's best if we have two sets of eyes looking for bugs and
thinking about it.

I've given you an outline of the system a few times,  but I'm not
sure if it's taken.   There are two parts - a ram device and a
temporary device.  The ram device seems to be quite stable,  and the
interface to it is pretty straightforward.

The temp device seems to appall you on some level.   You never mention
it without kludge in the same breath.   I'll try not to take this
insult of a useful and I would even say elegant piece of code I wrote
personally,  though I must admit it grates on my nerves.  It is doing
scary stuff linking together two lo-level operations - memory allocation
and temporary file io.   If I had it to do over again I might just
use virtual memory,  though our temp file management does have the advantage 
that the "join" and other memory hogs can use more than one device.  Also
you might be amused to note that 3-D studio ships with 2 versions, one
with and one without virtual memory.  The biggest source of support 
calls are from people having trouble with virtual memory according
to Grant Blaha.

Any way please go have a good look at tfile.c and try to analyse the
places where it could fail, recurse, or end up in a forever swapping loop.
I'd be surprised if a couple of semiphores wouldn't solve the problem.

& t 6
Message  6:
From jkent Sun Mar 31 04:18:56 1991
Return-Path: <jkent>
Received: by autodesk.uucp  (4.1/SMI-3.2)
	id AA01920; Sun, 31 Mar 91 04:18:55 PST
Date: Sun, 31 Mar 91 04:18:55 PST
From: jkent (Jim Kent)
Message-Id: <9103311218.AA01920@autodesk.uucp >
To: peterk
Subject: More Tfile mess
Status: R

Looking at tfile.c there definitely is a problem in the swapping
protocal.   I changed my mind partway through implementing how
to handle ">:"  vs "=:"  vs "<:".

PK: Ahh, it would have taken me a while to decipher what the various competing
    intentions were. Thanks for the insight.

At first I was going to have them simple priorities, so that <: would
be swapped out to disk first, then =:,  then >:.   Then at some
point I decided to make it so >: would be disposable (for the bscreen)
so that the system if sufficiently stressed for memory/disk space could
just lose them.   The <: would never make it into ram in the first place.
The =: would end up swapped in and out.

The ">:" disposable device looks like a real mess.   Bscreen is
the only thing that uses it.   For the moment I vote to make
the bscreen "=:" and kill the ">:" device.

PK: This actually would be good to have since it would increase the available
    ram by one full screen. But only if it works.

The "<:" don't bother putting it to RAM device is interesting.
Most of the temp files that are this way are "swap files" left over
from the old animator done when I knew I'd need ram.   To convert
them to "=:" might make a little thrashing in low ram states as the file 
is written first to ram disk and then moved.   On the other hand it'd
make the program faster if you have lots of ram.   Since the "thrashing"
would just involve some extra memcpy's not actual disk thrashing,  I
think we should experiment with eliminating this too. 


PK: I would assume the temp save rcel has actually replaced most of the items
    that were speed critical.  Less thrashing is better in this case. people
    are more likely to complain about thrashing. Yet another competing swap
    out system that may swap out some other file to put a cel on ram before
    the temp save will try to write the cel to disk. In esscence giving the
    temp cels the highest priority of any swappable entitys in the system. 
    That book on lymphocytes may be of some relevence!! 
    
    This disk only path is also used for the vsetting.tmp and the sprite 
    overlay sequence file when low on ram, and may house other quite 
    infrequently used files and think it appropriate.  Since these files
    NEVER enter ram there is little swap conflict or looping potential.


So this just leaves the "=:" device.   We could eliminate all the
"priority" levels from tfile which aren't used now anyway.  The
end result would be a much simpler and hopefully more reliable
swapping system.   The endless loop "moving >:aatemp3.pic" "moving
=:aatemp.pic" may fall out of the wash if we do this.   As a first
step I'd try making everything in tempname.c start with an =:
and evaluate the run-time performance and see if it fixes the looping
moving message bugs.

    (pardon mega text but I just went on....)

PK: This may be true, but until I understand and have a complete qualitative
    and pricise understanding of the manner in which this thing works to
    make such a modification could open more pandoras boxes of interaction.
    I will start looking at the code this afternoon and attempt to assemble
    a flow chart like understanding of what happens.  What I have been doing
    so far is thinking of what issues would have to be addressed in managing
    such a system and then will have to look and see how you handled them.
    Part of why I may seem to verbally "degrade" code is in many ways I would
    find it easier to really tear something like this apart and really redo
    it incorporating any good ideas you have in it into a mostly re-written
    version that I can know inside out as the parts of the old code get moved
    across to the new version.  This does however mean I will then adopt 
    another baby which is what I've been afraid of.  
    
        In the process of moving the code I learn it
    and am forced to look at all of it.  This is what I did with the text
    editor and other parts I re worked.  With this code I would make a 
    stripped down model that hooks into the same interface that does lets say
    only write to the temp "disk" with no prioritys and make this stable and
    test the heck out of it.  Then I would start hanging on the ram handling
    and rebuild the swapping system from the ground up with an understanding
    of what you did and what you were trying to address AND an understanding
    of what I think additionally should be addressed.  
    
        I would first develop a flow plan
    of the various actions, the limits and constraints on those actions I can
    see with this knowledge. Then I implement it in code.  The actual code 
    should be very small, But, it is very dense in planning and
    testing of the flow.  In a sense this is a problem I would put at about the
    same magnitude as the window layer system in terms of it's critical and
    complex nature.  For me to guarantee the best results I would approach it
    with this overhaul method.  This is the most efficient way for me to 
    both learn it and fix and find every bug.  I am assuming the ram device 
    itself is self contained and can simply be plugged in and has been tested
    so there is no need to look at more than the interface and its interaction
    with the allocator.


Anyway sorry to get defensive about tfile.c in my last message.  It had
been a while since I looked at it,   and while most of the design is
pretty clean, this priorities bit is a real mess.

PK: previous mail.
