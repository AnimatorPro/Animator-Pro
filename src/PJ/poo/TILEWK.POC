// TileWorks copyright (c) 1991, Kamyan Software.  Version 1.00
// Programmed by Ken Carlino

/* Ranges for control */
#define MAX_DELAY			120
#define MIN_DELAY			1
#define MAX_SPEED			100
#define MIN_SPEED			1
#define MAX_STEP			100
#define MIN_STEP			1
#define MAX_SUBJECTS		10
#define MIN_SUBJECTS		1
#define MAX_HISTORY			150
#define MIN_HISTORY			1
#define MAX_COLOR_CYCLE		1000
#define MIN_COLOR_CYCLE		0

// definitions for lines
struct LINE_HISTORY
	{
	short x1;
	short y1;
	short x2;
	short y2;
	};
struct LINE_STATUS
	{
	short history_index;
	short number_of_lines;
	short x1_variance;
	short y1_variance;
	short x2_variance;
	short y2_variance;
	};

// Struct of settings save to the settings file
struct SETS
	{
	int vert_mirror_flg;				// 1=vert. mirror, 0 = not mirror
	int horz_mirror_flg;				// 1=horz. mirror, 0 = not mirror
	int step_distance;					// step distance	
	int num_subjects;					// number of subjects
	int history;						// number of history lines
	int color_cycle_speed;				// color cycle speed 1 - 100
	int erase_lines_flg;				// 1=erase lines, 0=leave lines
	int start_color;					// starting color index
	int dx1;							// Animate area
	int dy1;
	int dx2;
	int	dy2;
	int h1;								// animate size
	int w1;
	char file_name1[PATH_SIZE];			// cel path
	char file_name2[PATH_SIZE];			// gif path
	}


struct SETS sets;

int color_cycle_count;					// count of color cycle
int color_index;						// current color index
int number_of_colors = 255;				// number of colors to use
int sx1,sy1,sx2,sy2;					// Screen area

// storage for lines
struct LINE_HISTORY line_history[MAX_HISTORY][MAX_SUBJECTS];
struct LINE_STATUS	line_status[MAX_SUBJECTS];

char menu1_prompt[] = "Main menu";
char *menu1_choices[] =
	{
	"Set tile area",
	"Auto sampler",
	"Manual sampler",
	"Save tile area to file",
	"Tile screen",
	"Clear screen",
	"Change settings",
	"About TileWorks",
	"Exit"
	};
enum 
	{
	MENU1_EXIT,
	MENU1_SET_TILE_AREA,
	MENU1_AUTO_SAMPLER,
	MENU1_MANUAL_SAMPLER,
	MENU1_SAVE_TILE,
	MENU1_TILE_SCREEN,
	MENU1_CLEAR_SCREEN,
	MENU1_SETTINGS,
	MENU1_ABOUT
	};

char menu2_prompt[] = "Setting type to change";
char *menu2_choices[] =
	{
	"Vertical mirror setting",
	"Horizontal mirror setting",
	"Step distance",
	"Number of lines",
	"Line history",
	"Color cycle frequency",
	"Start Color",
	"Erase lines",
	"Show settings",
	"Exit setup"
	};
enum
	{
	MENU2_EXIT_SETUP,
	MENU2_VERTICAL_MIRROR,
	MENU2_HORIZONTAL_MIRROR,
	MENU2_STEP_DISTANCE,
	MENU2_SUBJECTS,
	MENU2_HISTORY,
	MENU2_COLOR,
	MENU2_START_COLOR,
	MENU2_ERASE_LINES,
	MENU2_SHOW_SETTINGS,
	};


char on[] = "on";
char off[] = "off";

/* init_lines - initialize the line drawings
 *
 * 10/13/1991 - Ken Carlino
 *
 * Copyright (C) 1991 Kamyan Software
 *
 * Inputs:
 * Outputs:
 * Returns:
 *      None
 */
void init_lines(void)
	{
	int i1;

	for (i1 = 0;i1 < sets.num_subjects;i1++)
		{
		line_status[i1].history_index = 0;
		line_status[i1].number_of_lines = 0;

		line_status[i1].x1_variance = 1 * rnd(sets.step_distance) + 1;
		line_status[i1].y1_variance = -1 * rnd(sets.step_distance) - 1;
		line_status[i1].x2_variance = 1 * rnd(sets.step_distance) + 1;
		if (line_status[i1].x1_variance == line_status[i1].x2_variance)
			line_status[i1].x2_variance++;
		line_status[i1].y2_variance = -1 * rnd(sets.step_distance) - 1;
		if (line_status[i1].y1_variance == line_status[i1].y2_variance)
			line_status[i1].y2_variance--;

		line_history[0][i1].x1 = sets.dx1 + rnd(sets.w1);
		line_history[0][i1].y1 = sets.dy1 + rnd(sets.h1);
		line_history[0][i1].x2 = sets.dx1 + rnd(sets.w1);
		line_history[0][i1].y2 = sets.dy1 + rnd(sets.h1);
		}
	color_index = sets.start_color;
	color_cycle_count = sets.color_cycle_speed;
	}


/* do_lines - draw next series of lines
 *
 * 10/13/1991 - Ken Carlino
 *
 * Copyright (C) 1991 Kamyan Software
 *
 * Inputs:
 * Outputs:
 * Returns:
 *      None
 */
void do_lines(void)						// draw next series of lines
	{
	int i1,i2;
	int tx1,ty1,tx2,ty2;
	int vx1,vy1,vx2,vy2;
	int hx1,hy1,hx2,hy2;
	char old_ink[20];

	for (i1 = 0;i1 < sets.num_subjects;i1++)
		{
		if (line_status[i1].number_of_lines == sets.history && sets.erase_lines_flg)
			{
			i2 = line_status[i1].history_index + 1;
			if (i2 >= sets.history)
				i2 = 0;

			SetColor(0);
			GetInk(old_ink);
			SetInk("opaque");

			if (sets.horz_mirror_flg)
				{
				vx1 = line_history[i2][i1].x1;
				vy1 = ((line_history[i2][i1].y1 - sets.dy2) - sets.dy1) * -1;
				vx2 = line_history[i2][i1].x2;
				vy2 = ((line_history[i2][i1].y2 - sets.dy2) - sets.dy1) * -1;
				Line(vx1,vy1,vx2,vy2);
				}
			if (sets.vert_mirror_flg)
				{
				hx1 = ((line_history[i2][i1].x1 - sets.dx2) - sets.dx1) * -1;
				hy1 = line_history[i2][i1].y1;
				hx2 = ((line_history[i2][i1].x2 - sets.dx2) - sets.dx1) * -1;
				hy2 = line_history[i2][i1].y2;
				Line(hx1,hy1,hx2,hy2);
				}
			if (sets.horz_mirror_flg && sets.vert_mirror_flg)
				{
				Line(hx1,vy1,hx2,vy2);
				}

			Line(line_history[i2][i1].x1,line_history[i2][i1].y1,
			 line_history[i2][i1].x2,line_history[i2][i1].y2);

			SetInk(old_ink);
			}
		else
			{
			line_status[i1].number_of_lines++;	
			}

		if (sets.color_cycle_speed)
			{
			if (--color_cycle_count == 0)
				{
				if (++color_index > number_of_colors)
					color_index = 0;
				color_cycle_count = sets.color_cycle_speed;
				}
			SetColor(color_index);
			}

		i2 = line_status[i1].history_index;

		tx1 = line_history[i2][i1].x1 + line_status[i1].x1_variance;
		ty1 = line_history[i2][i1].y1 + line_status[i1].y1_variance;
		tx2 = line_history[i2][i1].x2 + line_status[i1].x2_variance;
		ty2 = line_history[i2][i1].y2 + line_status[i1].y2_variance;

		if (tx1 > sets.dx2)
			{
			line_status[i1].x1_variance = -1 *
			  rnd(sets.step_distance) - 1;
			if (line_status[i1].x1_variance == line_status[i1].x2_variance)
				line_status[i1].x1_variance--;
			tx1 = sets.dx2;
			}
		if (tx1 < sets.dx1)
			{
			line_status[i1].x1_variance = 1 *
			  rnd(sets.step_distance) + 1;
			if (line_status[i1].x1_variance == line_status[i1].x2_variance)
				line_status[i1].x1_variance++;
			tx1 = sets.dx1;
			}
		if (tx2 > sets.dx2)
			{
			line_status[i1].x2_variance = -1 *
			  rnd(sets.step_distance) - 1;
			if (line_status[i1].x1_variance == line_status[i1].x2_variance)
				line_status[i1].x2_variance--;
			tx2 = sets.dx2;
			}
		if (tx2 < sets.dx1)
			{
			line_status[i1].x2_variance = 1 *
			  rnd(sets.step_distance) + 1;
			if (line_status[i1].x1_variance == line_status[i1].x2_variance)
				line_status[i1].x2_variance++;
			tx2 = sets.dx1;
			}

		if (ty1 > sets.dy2)
			{
			line_status[i1].y1_variance = -1 *
			  rnd(sets.step_distance) - 1;
			if (line_status[i1].y1_variance == line_status[i1].y2_variance)
				line_status[i1].y1_variance--;
			ty1 = sets.dy2;
			}
		if (ty1 < sets.dy1)
			{
			line_status[i1].y1_variance = 1 *
			  rnd(sets.step_distance) + 1;
			if (line_status[i1].y1_variance == line_status[i1].y2_variance)
				line_status[i1].y1_variance++;
			ty1 = sets.dy1;
			}
		if (ty2 > sets.dy2)
			{
			line_status[i1].y2_variance = -1 *
			  rnd(sets.step_distance) - 1;
			if (line_status[i1].y1_variance == line_status[i1].y2_variance)
				line_status[i1].y2_variance--;
			ty2 = sets.dy2;
			}
		if (ty2 < sets.dy1)
			{
			line_status[i1].y2_variance = 1 *
			  rnd(sets.step_distance) + 1;
			if (line_status[i1].y1_variance == line_status[i1].y2_variance)
				line_status[i1].y2_variance++;
			ty2 = sets.dy1;
			}

		i2 = line_status[i1].history_index + 1;
		if (i2 >= sets.history)
			i2 = 0;

		line_status[i1].history_index = i2;

		line_history[i2][i1].x1 = tx1;
		line_history[i2][i1].y1 = ty1;
		line_history[i2][i1].x2 = tx2;
		line_history[i2][i1].y2 = ty2;

		if (sets.horz_mirror_flg)
			{
			vx1 = tx1;
			vy1 = ((ty1 - sets.dy2) - sets.dy1) * -1;
			vx2 = tx2;
			vy2 = ((ty2 - sets.dy2) - sets.dy1) * -1;
			Line(vx1,vy1,vx2,vy2);
			}
		if (sets.vert_mirror_flg)
			{
			hx1 = ((tx1 - sets.dx2) - sets.dx1) * -1;
			hy1 = ty1;
			hx2 = ((tx2 - sets.dx2) - sets.dx1) * -1;
			hy2 = ty2;
			Line(hx1,hy1,hx2,hy2);
			}
		if (sets.horz_mirror_flg && sets.vert_mirror_flg)
			{
			Line(hx1,vy1,hx2,vy2);
			}

		Line(tx1,ty1,tx2,ty2);
		}
	}



main()
	{
	int i1,i2;
	int x,y,l,r,k;
	int menu1_choice = MENU1_SET_TILE_AREA;
	int menu2_choice;
	int menu3_choice;
	char old_ink[20];
	char vert_state[4];
	char horz_state[4];
	char erase_state[4];

	GetSize(&sx2,&sy2);
	Screen *screen1;
	FILE *infile,*outfile;

	if ((infile = fopen("tilewk.set","rb")) == NULL)
		{
		Qtext("Can't open tilewk.set file using defaults");
		sets.vert_mirror_flg = 1;
		sets.horz_mirror_flg = 1;
		sets.step_distance = 2;
		sets.num_subjects = 2;
		sets.history = 15;
		sets.color_cycle_speed = 20;
		sets.erase_lines_flg = 0;
		sets.start_color = 32;
		sets.dx1 = 0;
		sets.dy1 = 0;
		sets.dx2 = 49;
		sets.dy2 = 49;
		sets.h1 = 50;
		sets.w1 = 50;
		}
	else
		{
		fread(&sets,sizeof(sets),1,infile);
		fclose(infile);
		}

	while (menu1_choice != MENU1_EXIT)
		{
		printf("TileWorks (c) 1991. Kamyan Software. Ver 1.00");
		menu1_choice = Qmenu(menu1_choices, 9, menu1_prompt);
	
		switch (menu1_choice)
			{
			case MENU1_EXIT:

				if ((outfile = fopen("tilewk.set","wb")) == NULL)
					{
					Qtext("Can't save to tilewk.set file settings lost");
					}
				else
					{
					fwrite(&sets,sizeof(sets),1,outfile);
					fclose(outfile);
					}

				break;
			case MENU1_SET_TILE_AREA:
				RubBox(&sets.dx1,&sets.dy1,&sets.w1,&sets.h1);
				break;
			case MENU1_AUTO_SAMPLER:
				Clear();
				sleep(1);				// need for fast systems	
				sets.dx2 = sets.dx1 + sets.w1;
				sets.dy2 = sets.dy1 + sets.h1;

				init_lines();
				HideCursor();
				for(;;)
					{
					do_lines();	
					PollInput(&x,&y,&l,&r,&k);		
					if (l || r)
						break;
					}
				CelGet(sets.dx1,sets.dy1,sets.w1,sets.h1);
				GetInk(old_ink);
				SetInk("tile");
				Box(sx1,sy1,sx2 + 1,sy2 + 1);
				SetInk(old_ink);
				ShowCursor();
				break;
			case MENU1_MANUAL_SAMPLER:
				sleep(1);				// need for fast systems	
				sets.dx2 = sets.dx1 + sets.w1;
				sets.dy2 = sets.dy1 + sets.h1;

				init_lines();
				HideCursor();
				for(;;)
					{
					do_lines();	
					PollInput(&x,&y,&l,&r,&k);		
					if (l || r)
						break;
					}
				CelGet(sets.dx1,sets.dy1,sets.w1,sets.h1);
				ShowCursor();
				break;
			case MENU1_SAVE_TILE:
				CelGet(sets.dx1,sets.dy1,sets.w1,sets.h1);
				if (Qquestion("Save tile as cel file?"))
					{
					if (Qfile(".cel","Save",(char *)&sets.file_name1,
					 (char *)&sets.file_name1,FALSE,"File name for cel file"))
						SaveCel((char *)&sets.file_name1);
					}
				if (Qquestion("Save tile as Gif file?"))
					{
					screen1 = GetCelScreen();
					if (Qfile(".gif","Save",(char *)&sets.file_name2,
					 (char *)&sets.file_name2,FALSE,"File name for gif file"))
						SaveScreenPic(screen1, (char *)&sets.file_name2);
					}
				break;

			case MENU1_TILE_SCREEN:
				CelGet(sets.dx1,sets.dy1,sets.w1,sets.h1);
				GetInk(old_ink);
				SetInk("tile");
				Box(sx1,sy1,sx2 + 1,sy2 + 1);
				SetInk(old_ink);
				break;
			case MENU1_CLEAR_SCREEN:
				Clear();
				break;
			case MENU1_SETTINGS:
				menu2_choice = MENU2_VERTICAL_MIRROR;
				while (menu2_choice != MENU2_EXIT_SETUP)
					{
					menu2_choice = Qmenu(menu2_choices, 10, menu2_prompt);
					switch (menu2_choice)
						{
						case MENU2_EXIT_SETUP:
							break;
						case MENU2_VERTICAL_MIRROR:
							if (Qquestion("Use vertical mirroring?"))
								{
								strcpy(vert_state,"on");
								sets.vert_mirror_flg = 1;
								}
							else
								{
								strcpy(vert_state,"off");
								sets.vert_mirror_flg = 0;
								}
							break;
						case MENU2_HORIZONTAL_MIRROR:
							if (Qquestion("Use horizontal mirroring?"))
								{
								strcpy(horz_state,"on");
								sets.horz_mirror_flg = 1;
								}
							else
								{
								strcpy(vert_state,"off");
								sets.horz_mirror_flg = 0;
								}
							break;
						case MENU2_STEP_DISTANCE:
							Qnumber(&sets.step_distance,MIN_STEP,MAX_STEP,
							 "Line step distance");
							break;
						case MENU2_SUBJECTS:
							Qnumber(&sets.num_subjects,MIN_SUBJECTS,MAX_SUBJECTS,
							 "Number of lines");
							break;
						case MENU2_HISTORY:
							Qnumber(&sets.history,MIN_HISTORY,MAX_HISTORY,
							 "Amount of line history");
							break;
						case MENU2_COLOR:
							Qnumber(&sets.color_cycle_speed,
							 MIN_COLOR_CYCLE,MAX_COLOR_CYCLE,
							 "Color change frequency");
							break;
						case MENU2_START_COLOR:
							sets.start_color = Qcolor();
							break;
						case MENU2_ERASE_LINES:
							if (Qquestion("Erase lines?"))
								{
								strcpy(erase_state,"on");
								sets.erase_lines_flg = 1;
								}
							else
								{
								strcpy(erase_state,"off");
								sets.erase_lines_flg = 0;
								}
							break;
						case MENU2_SHOW_SETTINGS:
							if (sets.vert_mirror_flg)
								strcpy(vert_state,"on");
							else
								strcpy(vert_state,"off");

							if (sets.horz_mirror_flg)
								strcpy(horz_state,"on");
							else
								strcpy(horz_state,"off");

							if (sets.erase_lines_flg)
								strcpy(erase_state,"on");
							else
								strcpy(erase_state,"off");

							Qtext("Vertical mirror: %s\n"
								  "Horizontal mirror: %s\n"
								  "Step distance: %d\n"
								  "Number of lines: %d\n"
								  "Line history: %d\n"
								  "Color cycle freq.: %d\n"
								  "Start color index: %d\n"
								  "Erase lines: %s\n",vert_state,
								  horz_state,sets.step_distance,sets.num_subjects,
								  sets.history,sets.color_cycle_speed,sets.start_color,
								  erase_state);
							break;
						}
					}
				break;
			case MENU1_ABOUT:
				Qtext("TileWorks\n"
					  "Version 1.00\n"
					  "Copyright (C) 1991 Kamyan Software\n\n"
					  "TileWorks is a shareware product which "
					  "has a five day free evaluation period after "
					  "which a $15.00 payment is required. "
					  "Full registration information is available "
					  "in the tilewk.doc file included with TileWorks. "
					  "Payment and inquires can be sent to:\n\n"
					  "Kamyan Software\n"
					  "1228 Robin Drive\n"
					  "Carol Stream Il. 60188\n\n"
					  "Online inquires can be made to Ken Carlino "
					  "on CIS (73447,1114).\n");
				break;
			}
		}
	}	

