Phar Lap Macro Assembler  Version 4.0           Thu Feb 16 21:56:08 1995

                                                              Page    1-1


                                        ;**************************************
                                        ***************************************
                                         
                                        ;* POCOUTIL.ASM - Little assembler rout
                                        ines to help speed up poco. 
                                        ;**************************************
                                        ***************************************
                                         
                                         
00000000                                _DATA	segment public dword use32 'data'
                                         
                                         
00000000                                istab: 
00000000  80 80 80 80 80 80 80 80       	db	080H, 080H, 080H, 080H, 080H, 080H,
                                         080H, 080H 
00000008  80 90 90 90 90 90 80 80       	db	080H, 090H, 090H, 090H, 090H, 090H,
                                         080H, 080H 
00000010  80 80 80 80 80 80 80 80       	db	080H, 080H, 080H, 080H, 080H, 080H,
                                         080H, 080H 
00000018  80 80 80 80 80 80 80 80       	db	080H, 080H, 080H, 080H, 080H, 080H,
                                         080H, 080H 
00000020  10 20 20 20 20 20 20 20       	db	010H, 020H, 020H, 020H, 020H, 020H,
                                         020H, 020H 
00000028  20 20 20 20 20 20 20 20       	db	020H, 020H, 020H, 020H, 020H, 020H,
                                         020H, 020H 
00000030  42 42 42 42 42 42 42 42       	db	042H, 042H, 042H, 042H, 042H, 042H,
                                         042H, 042H 
00000038  42 42 20 20 20 20 20 20       	db	042H, 042H, 020H, 020H, 020H, 020H,
                                         020H, 020H 
00000040  20 44 44 44 44 44 44 04       	db	020H, 044H, 044H, 044H, 044H, 044H,
                                         044H, 004H 
00000048  04 04 04 04 04 04 04 04       	db	004H, 004H, 004H, 004H, 004H, 004H,
                                         004H, 004H 
00000050  04 04 04 04 04 04 04 04       	db	004H, 004H, 004H, 004H, 004H, 004H,
                                         004H, 004H 
00000058  04 04 04 20 20 20 20 21       	db	004H, 004H, 004H, 020H, 020H, 020H,
                                         020H, 021H 
00000060  20 48 48 48 48 48 48 08       	db	020H, 048H, 048H, 048H, 048H, 048H,
                                         048H, 008H 
00000068  08 08 08 08 08 08 08 08       	db	008H, 008H, 008H, 008H, 008H, 008H,
                                         008H, 008H 
00000070  08 08 08 08 08 08 08 08       	db	008H, 008H, 008H, 008H, 008H, 008H,
                                         008H, 008H 
00000078  08 08 08 20 20 20 20 80       	db	008H, 008H, 008H, 020H, 020H, 020H,
                                         020H, 080H 
                                        	rept 128 
                                        	db	0 
                                        	endm 
00000080  00                          1 	db	0
00000081  00                          1 	db	0
00000082  00                          1 	db	0
00000083  00                          1 	db	0
00000084  00                          1 	db	0
00000085  00                          1 	db	0
Phar Lap Macro Assembler  Version 4.0           Thu Feb 16 21:56:08 1995

                                                              Page    1-2


00000086  00                          1 	db	0
00000087  00                          1 	db	0
00000088  00                          1 	db	0
00000089  00                          1 	db	0
0000008A  00                          1 	db	0
0000008B  00                          1 	db	0
0000008C  00                          1 	db	0
0000008D  00                          1 	db	0
0000008E  00                          1 	db	0
0000008F  00                          1 	db	0
00000090  00                          1 	db	0
00000091  00                          1 	db	0
00000092  00                          1 	db	0
00000093  00                          1 	db	0
00000094  00                          1 	db	0
00000095  00                          1 	db	0
00000096  00                          1 	db	0
00000097  00                          1 	db	0
00000098  00                          1 	db	0
00000099  00                          1 	db	0
0000009A  00                          1 	db	0
0000009B  00                          1 	db	0
0000009C  00                          1 	db	0
0000009D  00                          1 	db	0
0000009E  00                          1 	db	0
0000009F  00                          1 	db	0
000000A0  00                          1 	db	0
000000A1  00                          1 	db	0
000000A2  00                          1 	db	0
000000A3  00                          1 	db	0
000000A4  00                          1 	db	0
000000A5  00                          1 	db	0
000000A6  00                          1 	db	0
000000A7  00                          1 	db	0
000000A8  00                          1 	db	0
000000A9  00                          1 	db	0
000000AA  00                          1 	db	0
000000AB  00                          1 	db	0
000000AC  00                          1 	db	0
000000AD  00                          1 	db	0
000000AE  00                          1 	db	0
000000AF  00                          1 	db	0
000000B0  00                          1 	db	0
000000B1  00                          1 	db	0
000000B2  00                          1 	db	0
000000B3  00                          1 	db	0
000000B4  00                          1 	db	0
000000B5  00                          1 	db	0
000000B6  00                          1 	db	0
000000B7  00                          1 	db	0
000000B8  00                          1 	db	0
000000B9  00                          1 	db	0
000000BA  00                          1 	db	0
000000BB  00                          1 	db	0
Phar Lap Macro Assembler  Version 4.0           Thu Feb 16 21:56:08 1995

                                                              Page    1-3


000000BC  00                          1 	db	0
000000BD  00                          1 	db	0
000000BE  00                          1 	db	0
000000BF  00                          1 	db	0
000000C0  00                          1 	db	0
000000C1  00                          1 	db	0
000000C2  00                          1 	db	0
000000C3  00                          1 	db	0
000000C4  00                          1 	db	0
000000C5  00                          1 	db	0
000000C6  00                          1 	db	0
000000C7  00                          1 	db	0
000000C8  00                          1 	db	0
000000C9  00                          1 	db	0
000000CA  00                          1 	db	0
000000CB  00                          1 	db	0
000000CC  00                          1 	db	0
000000CD  00                          1 	db	0
000000CE  00                          1 	db	0
000000CF  00                          1 	db	0
000000D0  00                          1 	db	0
000000D1  00                          1 	db	0
000000D2  00                          1 	db	0
000000D3  00                          1 	db	0
000000D4  00                          1 	db	0
000000D5  00                          1 	db	0
000000D6  00                          1 	db	0
000000D7  00                          1 	db	0
000000D8  00                          1 	db	0
000000D9  00                          1 	db	0
000000DA  00                          1 	db	0
000000DB  00                          1 	db	0
000000DC  00                          1 	db	0
000000DD  00                          1 	db	0
000000DE  00                          1 	db	0
000000DF  00                          1 	db	0
000000E0  00                          1 	db	0
000000E1  00                          1 	db	0
000000E2  00                          1 	db	0
000000E3  00                          1 	db	0
000000E4  00                          1 	db	0
000000E5  00                          1 	db	0
000000E6  00                          1 	db	0
000000E7  00                          1 	db	0
000000E8  00                          1 	db	0
000000E9  00                          1 	db	0
000000EA  00                          1 	db	0
000000EB  00                          1 	db	0
000000EC  00                          1 	db	0
000000ED  00                          1 	db	0
000000EE  00                          1 	db	0
000000EF  00                          1 	db	0
000000F0  00                          1 	db	0
000000F1  00                          1 	db	0
Phar Lap Macro Assembler  Version 4.0           Thu Feb 16 21:56:08 1995

                                                              Page    1-4


000000F2  00                          1 	db	0
000000F3  00                          1 	db	0
000000F4  00                          1 	db	0
000000F5  00                          1 	db	0
000000F6  00                          1 	db	0
000000F7  00                          1 	db	0
000000F8  00                          1 	db	0
000000F9  00                          1 	db	0
000000FA  00                          1 	db	0
000000FB  00                          1 	db	0
000000FC  00                          1 	db	0
000000FD  00                          1 	db	0
000000FE  00                          1 	db	0
000000FF  00                          1 	db	0
                                         
 = 00000001                             _CTb	 =	001H				   ; underbar, used by 
                                        iscsym() 
 = 00000002                             _CTd	 =	002H				   ; numeric digit 
 = 00000004                             _CTu	 =	004H				   ; upper case 
 = 00000008                             _CTl	 =	008H				   ; lower case 
 = 00000010                             _CTs	 =	010H				   ; whitespace 
 = 00000020                             _CTp	 =	020H				   ; punctuation 
 = 00000040                             _CTx	 =	040H				   ; hexadecimal 
 = 00000080                             _CTc	 =	080H				   ; control character 
                                         
 = 0000000E                             ISALNUM  =	_CTu OR _CTl OR _CTd 
 = 0000000C                             ISALPHA  =	_CTu OR _CTl 
 = 00000080                             ISCNTRL  =	_CTc 
 = 00000002                             ISDIGIT  =	_CTd 
 = 0000002E                             ISGRAPH  =	_CTd OR _CTu OR _CTl OR _CTp
                                         
 = 00000008                             ISLOWER  =	_CTl 
 = 00000020                             ISPUNCT  =	_CTp 
 = 00000010                             ISSPACE  =	_CTs 
 = 00000004                             ISUPPER  =	_CTu 
 = 00000040                             ISXDIGIT =	_CTx 
 = 0000000F                             ISCSYM	 =	_CTu OR _CTl OR _CTb OR _CTd 
 = 0000000D                             ISCSYMF  =	_CTu OR _CTl OR _CTb 
                                         
00000100                                _DATA	ends 
                                         
00000000                                _CODE	segment public dword use32 'code'
                                         
                                        	assume	cs:_CODE,ds:_DATA 
                                         
                                        	public	po_ptr2ppt 
                                        	public	po_ppt2ptr 
                                        	public	po_skip_space 
                                        	public	po_cmatch_scan 
                                        	public	po_hashfunc 
                                        	public	poco_stuff_bytes 
                                        	public	poco_zero_bytes 
                                        	public	poco_copy_bytes 
                                        	public	po_eqstrcmp 
Phar Lap Macro Assembler  Version 4.0           Thu Feb 16 21:56:08 1995

                                                              Page    1-5


                                        	public	po_chop_csym 
                                        	public	__po_chop_csym__ 
                                        	public	__poco_zero_bytes__ 
                                        	public	__poco_copy_bytes__ 
                                         
                                        ;**************************************
                                        ***************************************
                                         
                                        ;* Popot po_ptr2ppt(void *ptr, int byte
                                        s) 
                                        ;* 
                                        ;*  convert a C pointer and a count of 
                                        bytes it points to into a poco 12-byte 
                                        ;*  protected pointer.	this assumes wat
                                        com C '3s' calling conventions: on 
                                        ;*  entry the input parms are on the st
                                        ack, and [esi] points to the Popot 
                                        ;*  structure into which we are to plac
                                        e our return value. 
                                        ;*  assumes Popot is typedef'd as {void
                                         *pt,*min,*max}. 
                                        ;*  this function exists mainly for use
                                         by poe modules. 
                                        ;**************************************
                                        ***************************************
                                         
                                         
00000000                                po_ptr2ppt proc near 
                                         
00000000  87 F7                         	xchg	esi,edi 		; watcom gives us retva
                                        l ptr in esi, 
00000002  8B 44 24 04                   	mov	eax,[esp+4]		; we need it in edi. 
                                        get ptr parm from 
00000006  AB                            	stosd				; stack, store it to popot.pt
                                         and to 
00000007  AB                            	stosd				; popot.min.  add to it the b
                                        yte count 
00000008  03 44 24 08                   	add	eax,[esp+8]		; parm from the stack
                                        , store that as 
0000000C  AB                            	stosd				; popot.max. 
0000000D  8B FE                         	mov	edi,esi 		; restore edi register a
                                        nd 
0000000F  C3                            	ret				; return to caller. 
                                         
                                        po_ptr2ppt endp 
                                         
                                        ;**************************************
                                        ***************************************
                                         
                                        ;* void *po_ppt2ptr(Popot ppt) 
                                        ;* 
                                        ;*  convert a 12-byte poco protected po
                                        inter to a standard C pointer. 
                                        ;*  this function exists mainly for use
Phar Lap Macro Assembler  Version 4.0           Thu Feb 16 21:56:08 1995

                                                              Page    1-6


                                         by poe modules. 
                                        ;*  yes, this function is trivial, but 
                                        it allows a certain grace in coding 
                                        ;*  poe modules.  for example, one can 
                                        code something like: 
                                        ;*    void *sscreen = ppt2ptr(poeGetSwa
                                        pScreen()); 
                                        ;*  instead of needing a temporary Popo
                                        t declared to hold the retval from 
                                        ;*  poeGetSwapScreen. 
                                        ;**************************************
                                        ***************************************
                                         
                                         
00000010                                po_ppt2ptr proc near 
00000010  8B 44 24 04                   	mov	eax,[esp+4] 
00000014  C3                            	ret 
                                        po_ppt2ptr endp 
                                         
                                        ;**************************************
                                        ***************************************
                                         
                                        ;* char    *po_skip_space(char *line) 
                                        ;**************************************
                                        ***************************************
                                         
                                         
00000015                                po_skip_space	proc near 
                                         
00000015  8B 44 24 04                   	mov	eax,[esp+4]		; 
00000019  85 C0                         	test	eax,eax 		; 
0000001B  74 16                         	jz	short #return		; 
0000001D  33 C9                         	xor	ecx,ecx 		; 
0000001F                                #loop:					; 
0000001F  8A 08                         	mov	cl,[eax]		; 
00000021  84 C9                         	test	cl,cl			; 
00000023  74 0C                         	jz	short #retnull		; 
00000025  F6 81 00000000 R 10           	test	byte ptr[ecx+istab],_CTs; 
0000002C  74 05                         	jz	short #return		; 
0000002E  40                            	inc	eax			; 
0000002F  EB EE                         	jmp	short #loop		; 
00000031                                #retnull:				; 
00000031  33 C0                         	xor	eax,eax 		; 
00000033                                #return:				; 
00000033  C3                            	ret				; 
                                         
                                        po_skip_space	endp 
                                         
                                        ;**************************************
                                        ***************************************
                                         
                                        ;* char *po_cmatch_scan(char *line) 
                                        ;*   scan a line of C source code for c
                                        haracters that come in matching pairs: 
Phar Lap Macro Assembler  Version 4.0           Thu Feb 16 21:56:08 1995

                                                              Page    1-7


                                        ;*     ' " /  (the latter being part of
                                         /* */ pairs). 
                                        ;**************************************
                                        ***************************************
                                         
                                         
00000034                                po_cmatch_scan proc near 
                                         
00000034  8B 44 24 04                   	mov	eax,[esp+4] 
00000038  33 C9                         	xor	ecx,ecx 		; 
0000003A                                #loop:					; 
0000003A  8A 08                         	mov	cl,[eax]		; 
0000003C  40                            	inc	eax 
0000003D  84 C9                         	test	cl,cl			; 
0000003F  74 1A                         	jz	short #retnull		; 
00000041  F6 81 00000000 R 20           	test	byte ptr[ecx+istab],_CTp; quickly
                                         eliminate non-punctuation 
00000048  74 F0                         	jz	short #loop		; 
0000004A  80 F9 22                      	cmp	cl,022H 
0000004D  74 11                         	je	short #return 
0000004F  80 F9 27                      	cmp	cl,027H 
00000052  74 0C                         	je	short #return 
00000054  80 F9 2F                      	cmp	cl,02fH 
00000057  74 07                         	je	short #return 
00000059  EB DF                         	jmp	short #loop 
0000005B                                #retnull: 
0000005B  B8 00000001                   	mov	eax,1 
00000060                                #return: 
00000060  48                            	dec	eax 
00000061  C3                            	ret 
                                         
                                        po_cmatch_scan endp 
                                         
                                         
                                        ;**************************************
                                        ***************************************
                                         
                                        ;* int po_hashfunc(char *s) 
                                        ;**************************************
                                        ***************************************
                                         
                                         
00000062                                po_hashfunc proc near 
                                         
00000062  33 C9                         	xor	ecx,ecx 
00000064  8B 54 24 04                   	mov	edx,[esp+4] 
00000068  0F B6 02                      	movzx	eax,byte ptr [edx] 
0000006B                                #loop: 
0000006B  42                            	inc	edx 
0000006C  8A 0A                         	mov	cl,[edx] 
0000006E  03 C1                         	add	eax,ecx 
00000070  84 C9                         	test	cl,cl 
00000072  75 F7                         	jnz	short #loop 
00000074  25 000000FF                   	and	eax,0ffH 
Phar Lap Macro Assembler  Version 4.0           Thu Feb 16 21:56:08 1995

                                                              Page    1-8


00000079  C3                            	ret 
                                         
                                        po_hashfunc endp 
                                         
                                         
                                        ;**************************************
                                        ***************************************
                                         
                                        ;* void poco_stuff_bytes(void *mem, UBY
                                        TE value, int count) 
                                        ;**************************************
                                        ***************************************
                                         
                                         
0000007A                                poco_stuff_bytes proc	  near 
                                         
0000007A  8B D7                         	mov	edx,edi 
0000007C  8B 7C 24 04                   	mov	edi,[esp+4] 
00000080  8B 44 24 08                   	mov	eax,[esp+8] 
00000084  8A E0                         	mov	ah,al 
00000086  8B 4C 24 0C                   	mov	ecx,[esp+12] 
0000008A  D1 E9                         	shr	ecx,1 
0000008C  F3/ 66| AB                    	rep stosw 
0000008F  83 D1 00                      	adc	ecx,0 
00000092  F3/ AA                        	rep stosb 
00000094                                #done: 
00000094  8B FA                         	mov	edi,edx 
00000096  C3                            	ret 
                                         
                                        poco_stuff_bytes endp 
                                         
                                         
                                        ;**************************************
                                        ***************************************
                                         
                                        ;* void poco_zero_bytes(void *mem, int 
                                        count)	     - stack parms 
                                        ;* void __poco_zero_bytes__(void *mem, 
                                        int count)    - reg parms 
                                        ;**************************************
                                        ***************************************
                                         
                                         
00000097                                poco_zero_bytes proc near 
                                         
00000097  57                            	push	edi 
00000098  8B 7C 24 08                   	mov	edi,[esp+8] 
0000009C  8B 4C 24 0C                   	mov	ecx,[esp+12] 
000000A0  8B D1                         	mov	edx,ecx 
000000A2  83 E2 03                      	and	edx,3 
000000A5  C1 E9 02                      	shr	ecx,2 
000000A8  33 C0                         	xor	eax,eax 
000000AA  F3/ AB                        	rep stosd 
000000AC  8B CA                         	mov	ecx,edx 
Phar Lap Macro Assembler  Version 4.0           Thu Feb 16 21:56:08 1995

                                                              Page    1-9


000000AE  F3/ AA                        	rep stosb 
000000B0  5F                            	pop	edi 
000000B1  C3                            	ret 
                                         
                                        poco_zero_bytes endp 
                                         
000000B2                                __poco_zero_bytes__ proc near 
                                         
000000B2  57                            	push	edi 
000000B3  8B D1                         	mov	edx,ecx 
000000B5  83 E2 03                      	and	edx,3 
000000B8  C1 E9 02                      	shr	ecx,2 
000000BB  33 C0                         	xor	eax,eax 
000000BD  F3/ AB                        	rep stosd 
000000BF  8B CA                         	mov	ecx,edx 
000000C1  F3/ AA                        	rep stosb 
000000C3  5F                            	pop	edi 
000000C4  C3                            	ret 
                                         
                                        __poco_zero_bytes__ endp 
                                         
                                         
                                        ;**************************************
                                        ***************************************
                                         
                                        ;* void poco_copy_bytes(void *source, v
                                        oid *dest, int count)	 - stack parms 
                                        ;* void __poco_copy_bytes__(void *sourc
                                        e, void *dest, int count) - reg parms 
                                        ;**************************************
                                        ***************************************
                                         
                                         
000000C5                                poco_copy_bytes proc near 
                                         
000000C5  55                            	push	ebp 
000000C6  8B EC                         	mov	ebp,esp 
000000C8  56                            	push	esi 
000000C9  57                            	push	edi 
000000CA  8B 75 08                      	mov	esi,[ebp+8] 
000000CD  8B 7D 0C                      	mov	edi,[ebp+12] 
000000D0  8B 4D 10                      	mov	ecx,[ebp+16] 
000000D3  8B D1                         	mov	edx,ecx 
000000D5  83 E2 03                      	and	edx,3 
000000D8  C1 E9 02                      	shr	ecx,2 
000000DB  F3/ A5                        	rep movsd 
000000DD  8B CA                         	mov	ecx,edx 
000000DF  F3/ A4                        	rep movsb 
000000E1  5F                            	pop	edi 
000000E2  5E                            	pop	esi 
000000E3  C9                            	leave 
000000E4  C3                            	ret 
                                         
                                        poco_copy_bytes endp 
Phar Lap Macro Assembler  Version 4.0           Thu Feb 16 21:56:08 1995

                                                              Page    1-10


                                         
000000E5                                __poco_copy_bytes__ proc     near 
                                         
000000E5  56                            	push	esi 
000000E6  8B C7                         	mov	eax,edi 
000000E8  8B D1                         	mov	edx,ecx 
000000EA  83 E2 03                      	and	edx,3 
000000ED  C1 E9 02                      	shr	ecx,2 
000000F0  F3/ A5                        	rep movsd 
000000F2  8B CA                         	mov	ecx,edx 
000000F4  F3/ A4                        	rep movsb 
000000F6  8B F8                         	mov	edi,eax 
000000F8  5E                            	pop	esi 
000000F9  C3                            	ret 
                                         
                                        __poco_copy_bytes__ endp 
                                         
                                        ;**************************************
                                        ***************************************
                                         
                                        ;* Boolean po_eqstrcmp(char *s1, char *
                                        s2) 
                                        ;*  returns 0 if strings are equal, els
                                        e non-zero.  (just like strcmp except 
                                        ;*  it checks only equality, not less/g
                                        reater than). 
                                        ;*  (This one I'm actually proud of; it
                                        's semi-tricky). 
                                        ;**************************************
                                        ***************************************
                                         
                                         
000000FA                                po_eqstrcmp proc     near 
                                         
000000FA  33 C0                         	xor	eax,eax 		 ; Must start with high-
                                        order bits in 
000000FC  8B 4C 24 04                   	mov	ecx,[esp+4]		 ; eax clean for retu
                                        rn value.	Load 
00000100  8B 54 24 08                   	mov	edx,[esp+8]		 ; pointers to the tw
                                        o strings. 
00000104                                #loop: 
00000104  8A 21                         	mov	ah,[ecx]		 ; Load next s1 and next
                                         s2 bytes. Check 
00000106  8A 02                         	mov	al,[edx]		 ; s1 for nullterm, if t
                                        rue, we're done. 
00000108  84 E4                         	test	ah,ah			 ; (If s2 was also null, 
                                        eax will be 0; 
0000010A  74 0A                         	jz	short #return		 ; the strings are e
                                        qual in this case). 
0000010C  84 C0                         	test	al,al			 ; Check s2 for nullterm,
                                         if true, we're 
0000010E  74 06                         	jz	short #return		 ; done, but since w
                                        e know s1 (in ah) 
00000110  41                            	inc	ecx			 ; is not zero, we'll be ind
Phar Lap Macro Assembler  Version 4.0           Thu Feb 16 21:56:08 1995

                                                              Page    1-11


                                        icating 
00000111  42                            	inc	edx			 ; strings are not equal.  I
                                        f not at 
00000112  3A E0                         	cmp	ah,al			 ; end of either string, i
                                        ncr ptrs, and 
00000114  74 EE                         	je	short #loop		 ; compare the bytes. 
                                         If equal, loop, 
00000116                                #return:				 ; else return the (non-zer
                                        o) value 
00000116  C3                            	ret				 ; in eax. 
                                         
                                        po_eqstrcmp endp 
                                         
                                        ;**************************************
                                        ***************************************
                                         
                                        ;* char *po_chop_csym(char *line, char 
                                        *word, int maxlen, char **wordnext) 
                                        ;*   Note:  this function is #pragma'ti
                                        zed to take parms in registers: 
                                        ;*	esi = line 
                                        ;*	edi = word 
                                        ;*	ecx = maxlen 
                                        ;*	edx = wordnext 
                                        ;*	return value in esi 
                                        ;**************************************
                                        ***************************************
                                         
                                         
00000117                                po_chop_csym proc near 
                                         
00000117  55                            	push	ebp 
00000118  8B EC                         	mov	ebp,esp 
0000011A  56                            	push	esi 
0000011B  57                            	push	edi 
                                         
0000011C  8B 75 08                      	mov	esi,[ebp+8] 
0000011F  8B 7D 0C                      	mov	edi,[ebp+12] 
00000122  8B 4D 10                      	mov	ecx,[ebp+16] 
00000125  8B 55 14                      	mov	edx,[ebp+20] 
00000128  E8 00000006                   	call	__po_chop_csym__ 
                                         
0000012D  8B C6                         	mov	eax,esi 
0000012F  5F                            	pop	edi 
00000130  5E                            	pop	esi 
00000131  C9                            	leave 
00000132  C3                            	ret 
                                         
                                        po_chop_csym endp 
                                         
                                         
00000133                                __po_chop_csym__ proc near 
                                         
00000133  57                            	push	edi 
Phar Lap Macro Assembler  Version 4.0           Thu Feb 16 21:56:08 1995

                                                              Page    1-12


00000134  33 C0                         	xor	eax,eax 
00000136                                #loop: 
00000136  AC                            	lodsb 
00000137  AA                            	stosb 
00000138  F6 80 00000000 R 0F           	test	byte ptr[eax+istab],ISCSYM 
0000013F  E0 F5                         	loopnz	#loop 
00000141  0F 84 0000000A                	jz	#return 
00000147                                #eatem: 
00000147  AC                            	lodsb 
00000148  F6 80 00000000 R 0F           	test	byte ptr[eax+istab],ISCSYM 
0000014F  75 F6                         	jnz	#eatem 
00000151                                #return: 
00000151  4E                            	dec	esi 
00000152  4F                            	dec	edi 
00000153  89 3A                         	mov	[edx],edi 
00000155  5F                            	pop	edi 
00000156  C3                            	ret 
                                         
                                        __po_chop_csym__ endp 
                                         
00000157                                _CODE	ends 
                                        	end 
Phar Lap Macro Assembler  Version 4.0           Thu Feb 16 21:56:08 1995

                                                              Symbols-1


	GROUPS AND SEGMENTS
Name                                Size      Use    Align Combine   Class

_CODE  . . . . . . . . . . . . .    00000157  USE32  DWORD PUBLIC    code
_DATA  . . . . . . . . . . . . .    00000100  USE32  DWORD PUBLIC    data

	PROCEDURES
Name                                Type      Offset    Scope   Segment

__po_chop_csym__ . . . . . . . .    N PROC    00000133  Public  _CODE
	LOCAL VARIABLES AND LABELS
   #eatem  . . . . . . . . . . .    N LABEL   00000147  Local   _CODE
   #loop . . . . . . . . . . . .    N LABEL   00000136  Local   _CODE
   #return . . . . . . . . . . .    N LABEL   00000151  Local   _CODE

__poco_copy_bytes__  . . . . . .    N PROC    000000E5  Public  _CODE
__poco_zero_bytes__  . . . . . .    N PROC    000000B2  Public  _CODE
po_chop_csym . . . . . . . . . .    N PROC    00000117  Public  _CODE
po_cmatch_scan . . . . . . . . .    N PROC    00000034  Public  _CODE
	LOCAL VARIABLES AND LABELS
   #loop . . . . . . . . . . . .    N LABEL   0000003A  Local   _CODE
   #retnull  . . . . . . . . . .    N LABEL   0000005B  Local   _CODE
   #return . . . . . . . . . . .    N LABEL   00000060  Local   _CODE

po_eqstrcmp  . . . . . . . . . .    N PROC    000000FA  Public  _CODE
	LOCAL VARIABLES AND LABELS
   #loop . . . . . . . . . . . .    N LABEL   00000104  Local   _CODE
   #return . . . . . . . . . . .    N LABEL   00000116  Local   _CODE

po_hashfunc  . . . . . . . . . .    N PROC    00000062  Public  _CODE
	LOCAL VARIABLES AND LABELS
   #loop . . . . . . . . . . . .    N LABEL   0000006B  Local   _CODE

po_ppt2ptr . . . . . . . . . . .    N PROC    00000010  Public  _CODE
po_ptr2ppt . . . . . . . . . . .    N PROC    00000000  Public  _CODE
po_skip_space  . . . . . . . . .    N PROC    00000015  Public  _CODE
	LOCAL VARIABLES AND LABELS
   #loop . . . . . . . . . . . .    N LABEL   0000001F  Local   _CODE
   #retnull  . . . . . . . . . .    N LABEL   00000031  Local   _CODE
   #return . . . . . . . . . . .    N LABEL   00000033  Local   _CODE

poco_copy_bytes  . . . . . . . .    N PROC    000000C5  Public  _CODE
poco_stuff_bytes . . . . . . . .    N PROC    0000007A  Public  _CODE
	LOCAL VARIABLES AND LABELS
   #done . . . . . . . . . . . .    N LABEL   00000094  Local   _CODE

poco_zero_bytes  . . . . . . . .    N PROC    00000097  Public  _CODE

	VARIABLES AND LABELS
Name                                Type      Offset    Scope   Segment

istab  . . . . . . . . . . . . .    N LABEL   00000000  Prvate  _DATA
Phar Lap Macro Assembler  Version 4.0           Thu Feb 16 21:56:08 1995

                                                              Symbols-2


	CONSTANTS
Name                                Type      Value

ISALNUM  . . . . . . . . . . . .    Integer   0000000E
ISALPHA  . . . . . . . . . . . .    Integer   0000000C
ISCNTRL  . . . . . . . . . . . .    Integer   00000080
ISCSYM . . . . . . . . . . . . .    Integer   0000000F
ISCSYMF  . . . . . . . . . . . .    Integer   0000000D
ISDIGIT  . . . . . . . . . . . .    Integer   00000002
ISGRAPH  . . . . . . . . . . . .    Integer   0000002E
ISLOWER  . . . . . . . . . . . .    Integer   00000008
ISPUNCT  . . . . . . . . . . . .    Integer   00000020
ISSPACE  . . . . . . . . . . . .    Integer   00000010
ISUPPER  . . . . . . . . . . . .    Integer   00000004
ISXDIGIT . . . . . . . . . . . .    Integer   00000040
_CTb . . . . . . . . . . . . . .    Integer   00000001
_CTc . . . . . . . . . . . . . .    Integer   00000080
_CTd . . . . . . . . . . . . . .    Integer   00000002
_CTl . . . . . . . . . . . . . .    Integer   00000008
_CTp . . . . . . . . . . . . . .    Integer   00000020
_CTs . . . . . . . . . . . . . .    Integer   00000010
_CTu . . . . . . . . . . . . . .    Integer   00000004
_CTx . . . . . . . . . . . . . .    Integer   00000040


      49 Symbols
       0 Warning Errors
       0 Severe Errors
