/*  BULLET.POC

        This program draws a shadowed view-graph bullet on the
    Animator Pro screen. The program makes use of existing
    .CEL files for the basic bullet drawing.

        George P. Nelson
        Code 5351
        Naval Research Laboratory
        Washington, DC 20375

        e-mail: nelson@radar.nrl.navy.mil
         (from CompuServe this is:)
            >INTERNET:nelson@radar.nrl.navy.mil 

        1/8/92
*/

char *bull_file[] = {                 // Bullet CEL file names
          "s-bullet.cel",
          "m-bullet.cel",
          "l-bullet.cel",
          "v-bullet.cel",
          };
int  shad_delta[] = {                 // Movement for the shadow
          1,
          2,
          2,
          3,
          };
int  dbl_delta[] = {                  // Distance between double bullets
          12,
          22,
          27,
          35,
          };        
int  idx;    /* Chart size indicator
                  0 = 320x200
                  1 = 640x480
                  2 = 800x600
                  3 = 1024x768
                 -1 = Invalid for this program */

void single_bullet ( void)
{
   int x1, x2, y1, y2, left, right, key;

    // Get the cell and its initial position
    LoadCel(bull_file[idx]);          // Load the Hi-res bullet cel
    WaitClick ( &x2, &y2, &left, &right, &key);
    if (left == 1) {                  // Valid left mouse click
        do {
            SetInk("dark");
            CelMoveTo ( x2+shad_delta[idx], y2+shad_delta[idx]);
            CelPaste();
            SetInk("opaque");
            CelMove ( -shad_delta[idx], -shad_delta[idx]);
            CelPaste();
            x1 = x2;
            y1 = y2;
        } while (RubLine( x1, y1, &x2, &y2));
    }
    return;
}  // End of function: single_bullet() 

void double_bullet ( void)
{
   int x1, x2, y1, y2, left, right, key;

    // Get the cell and its initial position
    LoadCel(bull_file[idx]);          // Load the Hi-res bullet cel
    WaitClick ( &x2, &y2, &left, &right, &key);
    if (left == 1) {                  // Valid left mouse click
        do {
            SetInk("dark");
            CelMoveTo ( x2+shad_delta[idx], y2+shad_delta[idx]);
            CelPaste();                    // Paste the first bullet's shadow
            CelMove (-dbl_delta[idx], 0);
            CelPaste();                    // Paste the second bullet's shadow
            SetInk("opaque");
            CelMove ( -shad_delta[idx], -shad_delta[idx]);
            CelPaste();                    // Paste the second bullet opaque
            CelMove ( dbl_delta[idx], 0);
            CelPaste();                    // Paste the first bullet opaque
            x1 = x2;
            y1 = y2;
        } while (RubLine( x1, y1, &x2, &y2));
    }
    return;
}  // End of function: double_bullet() 

int  find_size ( void)
/* This function finds the current screen size to assign the screen
   size indicator. The function returns -1 if the size is not 320x200,
   640x480, 800x600, or 1024x768. */
{
    int xsize, ysize;
    Screen *scrn;

    scrn = GetPicScreen();
    GetScreenSize ( scrn, &xsize, &ysize);
    if ((xsize == 320) && (ysize == 200)) 
        return 0;
    else if ((xsize == 640) && (ysize == 480))
        return 1;
    else if ((xsize == 800) && (ysize == 600))
        return 2;
    else if ((xsize == 1024) && (ysize == 768))
        return 3;
    else
        return -1;
}  // End of function: find_size()

main()
{
    char inkbuf[16];
    char *msg1 = "  Shadowed Bullet drawing  \r"
                 "  will destroy current CEL. \r\n"
                 "             Continue ?";
    char *buttons[] = {
               "Single",
               "Double",
               "Cancel",
               };
    int ipath;

    // Get the current screen size index, exit program if unknown
    idx = find_size();
    if (idx == -1)
        exit(0);

    /* Inform the user that the current cel will be destroyed, and give him
       the option of quitting now. */
    if (!Qquestion(msg1))
        exit(0);

    GetInk (inkbuf);                  // Save current ink for restoration
    // Then determine if the user wants a single or double bullet
    ipath = Qchoice( buttons, 3, "Select bullet style");
    switch (ipath) {
        case 1:                       // Single bullet
            single_bullet();
            break;
        case 2:                       // Double bullet
            double_bullet();
            break;
        case 3:                       // Cancel the operation
            exit(0);
            break;
    };

    SetInk(inkbuf);                   // Restore the original ink
    exit(0);
}  // End of function main

