/*----------------------------------------------

   DXF.POC

   dxf translator for PJ66 written in POCO

   Last update: 10 April 91
   By PhilD...
  ----------------------------------------------

  What's implemented:


  1) color by layer
  2) color by entity
  3) circles
  4) lines
  5) polylines:
       - straight line segments between vertices
       - exclusion of splframe control points
       - segment width
  ----------------------------------------------*/



#define True       1
#define False      0
#define MAXLAYERS 51

/*------------------- from ARBAXIS.C ---------------------*/
#define X         0                                            /* Coordinate indices */
#define Y         1
#define Z         2
#define T         3

#define ARBBOUND  0.015625                                     /* aka "1/64" */
#define ZERO      1e-10

typedef double point[3];                                       /* Three dimensional point */
typedef double vector[4];                                      /* Homogeneous coordinate vector */
typedef double matrix[4][4];                                   /* Transformation matrix */

static double yaxis[3] = {0.0, 1.0, 0.0};
static double zaxis[3] = {0.0, 0.0, 1.0};
/*--------------------------------------------------------*/


FILE *handle;                                                  /* file handle */
char line[82];                                                 /* file input buffer */
char file[82];                                                 /* file name */
char enty[20];
double extminX,extminY,extmaxX,extmaxY;                        /* drawing extents */
int x, y, left, right, key;                                    /* mouse keyboard information */
int ScreenX, ScreenY;                                          /* drawing window origin */
int WinSize;                                                   /* width and height of drawing window to use */

typedef struct {char layer[25]; int color;} Layer;             /* layer information structure */
Layer layer[MAXLAYERS];
int LayPtr=0;                                                  /* layer array index */
point normal;
double Group[231];                                             /* group codes array */


double ScaleX(double);
double ScaleY(double);
double Scale(double);
double Str2Doub(char *);
int    Str2Int(char *);
void   Pause(void);
void   Window(void);
void   Pline(int);
void   ByLayer(void);
void   Arc(double, double, double, double, double);
void   main(void);
void   GetGroup(void);

void   trans(int, int, int);
void   veccross(point, point, point);
double vecmag(point);
void   vecnorm(point, point);









/*-----------------------------------------------
  Scale()

  adjusts the value of a non-coordinate scalar
  value to fit the drawing extents
  -----------------------------------------------*/
double Scale(double x)
     {
     return (x/extmaxX*WinSize);
     }




/*-----------------------------------------------
  ScaleX()

  adjusts the X value of a coordinate based on
  the drawing extents versus screen size
  -----------------------------------------------*/
double ScaleX(double x)
     {
     return ((x-extminX)/extmaxX*WinSize + ScreenX);
     }




/*-----------------------------------------------
  ScaleY()

  adjusts the X value of a coordinate based on
  the drawing extents versus screen size.  Also,
  flips the Y value, since PJ origins Y at the
  top and AutoCAD origins Y at the bottom.
  -----------------------------------------------*/
double ScaleY(double y)
     {
     return((WinSize - (y-extminY)/extmaxY*WinSize) + ScreenY);
     }






/*------------------------------------------
   Str2Doub()

   since fgetc() doesn't work, this is
   here so that fgets()'s results can be
   converted into doubles
  ------------------------------------------*/
double Str2Doub(char *lyn)
     {
     double temp=0.0, result=0.0;
     int Decimal=False, i=0, DecCntr=0, negative=False;

     do {
        switch(lyn[i])
             {
             case '0':
                  temp = 0.0;
                  break;
             case '1':
                  temp = 1.0;
                  break;
             case '2':
                  temp = 2.0;
                  break;
             case '3':
                  temp = 3.0;
                  break;
             case '4':
                  temp = 4.0;
                  break;
             case '5':
                  temp = 5.0;
                  break;
             case '6':
                  temp = 6.0;
                  break;
             case '7':
                  temp = 7.0;
                  break;
             case '8':
                  temp = 8.0;
                  break;
             case '9':
                  temp = 9.0;
                  break;

             case '.':
                  Decimal = True;
                  DecCntr = 1;
                  temp = 0;
                  break;

             case '-':
                  negative = True;
             }

        if (Decimal)
             {
             result += (temp / DecCntr);
             DecCntr *= 10.0;
             }
        else
             result = (result*10.0 + temp);

        i+=1;
        } while (lyn[i]!='\0');
     if (negative == True) result *= -1;
     return (result);
     }






/*------------------------------------------
   Str2Int()

   since fgetc() doesn't work, this is
   here so that fgets()'s results can be
   converted into integers
  ------------------------------------------*/
int Str2Int(char *lyn)
     {
     int result=0, i=0;

     do {
        switch(lyn[i])
             {
             case '1':
                  result = result*10 + 1;
                  break;
             case '2':
                  result = result*10 + 2;
                  break;
             case '3':
                  result = result*10 + 3;
                  break;
             case '4':
                  result = result*10 + 4;
                  break;
             case '5':
                  result = result*10 + 5;
                  break;
             case '6':
                  result = result*10 + 6;
                  break;
             case '7':
                  result = result*10 + 7;
                  break;
             case '8':
                  result = result*10 + 8;
                  break;
             case '9':
                  result = result*10 + 9;
                  break;
             case '0':
                  result = result*10;
                  break;
             case '-':
                  result *= -1;
                  break;
             }
        i++;
        } while (lyn[i]!='\0');
     return (result);
     }






/*-----------------------------------------------
  Pause()
  -----------------------------------------------*/
void Pause()
     {
     WaitClick(&x,&y,&left,&right,&key);
     }







/*-------------------------------------------------------------------
  Window()

  allow the user to select a portion of the screen to be used for
  this DXF import.  Draw a box around the area and set ScreenX and
  ScreenY to show the percentage of the screen
  being used.  The routines ScaleX and ScaleY use these values for
  mapping the drawing coordinates to the screen.  Adjust screen size
  values to reflect a 1:1 aspect ratio.
  -------------------------------------------------------------------*/
void Window()
     {
     int x, y, w, h, SizeX, SizeY;

     GetSize(&SizeX, &SizeY);                                  /* get screen pixel size */

     if (Qquestion("Use full screen?"))                        /* get screen extents to use */
          {
          if (SizeX > SizeY)                                   /* adust for 1:1 aspect ratio */
               WinSize = SizeY;
          else
               WinSize = SizeX;
          ScreenX = (SizeX-WinSize)/2;
          ScreenY = (SizeY-WinSize)/2;
          }
     else
          {
          Qtext("Select a window to use");                     /* get window from user */
          SetFilled(False);
          RubBox(&x, &y, &w, &h);
          Box(x, y, w, h);
          if (w > h)
               WinSize = h;
          else
               WinSize = w;
          ScreenX = x+3;
          ScreenY = y-3;
          }

     extmaxX -= extminX;                                       /* adjust for possible negative coordinates */
     extmaxY -= extminY;

     if (extmaxX > extmaxY)                                    /* adjust for 1:1 aspect */
          extmaxY = extmaxX;
     else
          extmaxX = extmaxY;
     }







/*-----------------------------------------------
  Pline()

  decodes the polyline entity.
  This routine does NOT do the polyline meshes.
  -----------------------------------------------*/
void Pline(int Closed)
     {
     int Flag, Flag2, No, Width, value;
     double x1, y1, x2, y2, x3, y3;

     Flag=Flag2=False;

     do {
        No = False;                                            /* Used to discard certain verties */
        Width = 0;                                             /* default line width */

        if (strncmp(line," 10",3)==0)                          /* X1 value */
             {
             fgets(line,82,handle);
             if (Flag)
                  x2 = ScaleX(Str2Doub(line));
             else
                  x1 = x3 = ScaleX(Str2Doub(line));
             }

        if (strncmp(line," 20",3)==0)                          /* Y1 value */
             {
             fgets(line,82,handle);
             if (Flag)
                  y2 = ScaleY(Str2Doub(line));
             else
                  y1 = y3 = ScaleY(Str2Doub(line));
             }

        if (strncmp(line,"VERTEX",6)==0)                       /* start of next point */
             {
             if (Flag2)
                  Flag = True;
             Flag2 = True;
             }

        if (strncmp(line," 62",3)==0)                          /* color */
             {
             fgets(line,82,handle);
             SetColor(Str2Int(line));
             }

        if (strncmp(line," 70",3)==0)                          /* pline bit codes */
             {
             fgets(line,82,handle);
             value = Str2Int(line);
             if ((value & 0x16) == 0x16)
                  No = True;                                   /* splframe control point */
             }

        if ((strncmp(line," 40",3)==0) ||                      /* width */
            (strncmp(line," 41",3)==0))
             {
             fgets(line,82,handle);
             Width = Str2Int(line);
             }

        if (strncmp(line,"  0",3)==0)                          /* end of this vertex definition */
             if (Flag && !No)                                  /* draw the line */
                  {
                  SetBrushSize(Width);
                  Line(x1,y1,x2,y2);
                  x1 = x2;
                  y1 = y2;
                  }

        fgets(line,82,handle);
        } while (strncmp(line,"SEQEND",6)!=0  &&
                 strncmp(line,"EOF",3)   !=0);

     if (Closed)
          Line(x2,y2,x3,y3);                                   /* closed polyline */
     }








/*----------------------------------------------
  ByLayer()

  set color By Layer
  ----------------------------------------------*/
void ByLayer()
     {
     int i;

     for (i=0; i<=MAXLAYERS; i++)
          {
          if (strncmp(layer[i].layer,line,strlen(line))==0)
               {
               SetColor(layer[i].color);
               break;
               }
          }
     }







/*----------------------------------------------
  Arc()

  draws a circular Arc, PJ lacks this function

    x      - X coordinate of center
    y      - Y coordinate of center
    radius - radius of arc
    start  - starting angle
    end    - ending angle
  ----------------------------------------------*/
void Arc(double x, double y, double radius, double start, double end)
     {
     double i,j,k;
     int flag=0;

     start = (start * ((2*3.1415926)/360));                    /* convert to radians */
     end = (end * ((2*3.1415926)/360));
     i = start;
     if (end<start) flag = 1;

     for (;;)
          {
          Dot(x+radius*cos(i),y-radius*sin(i));

          if (1/radius > 0.5)
               i += 0.5;
          else
               i += 1/radius;

          if (i >= (2*3.141592))
               {
               i = 0;
               flag = 0;
               }

          if (i>end && flag==0) break;
          }
     }





/*---------------------------------------
  GetGroup()

  loads all the group codes for a given
  entity definition
  ---------------------------------------*/
void GetGroup()
     {
     int index;

     Group[210] = Group[220] = Group[230] = 0;       /* clear normals for valid testing later */

     do {
        fgets(line,82,handle);

        if (strncmp(line,"  5",3)==0)
             fgets(line,82,handle);                  /* throw away handle, to avoid confusion down below */

        else if (strncmp(line,"  8",3)==0)           /* layer */
             {
             fgets(line,82,handle);
             ByLayer();
             }

        else if (strncmp(line," 10",3)==0)           /* X value */
             {
             fgets(line,82,handle);
             Group[10] = ScaleX(Str2Doub(line));
             }

        else if (strncmp(line," 11",3)==0)           /* X2 value */
             {
             fgets(line,82,handle);
             Group[11] = ScaleX(Str2Doub(line));
             }

        else if (strncmp(line," 20",3)==0)           /* Y value */
             {
             fgets(line,82,handle);
             Group[20] = ScaleY(Str2Doub(line));
             }

        else if (strncmp(line," 21",3)==0)           /* Y2 value */
             {
             fgets(line,82,handle);
             Group[21] = ScaleY(Str2Doub(line));
             }

        else if (strncmp(line," 30",3)==0)
             {
             fgets(line,82,handle);
             Group[30] = ScaleY(Str2Doub(line));
             }

        else if (strncmp(line," 31",3)==0)
             {
             fgets(line,82,handle);
             Group[31] = ScaleY(Str2Doub(line));
             }

        else if (strncmp(line," 40",3)==0)           /* radius */
             {
             fgets(line,82,handle);
             Group[40] = Scale(Str2Doub(line));
             }

        else if (strncmp(line," 50",3)==0)           /* start angle */
             {
             fgets(line,82,handle);
             Group[50] = Str2Doub(line);
             }

        else if (strncmp(line," 51",3)==0)           /*  end angle */
             {
             fgets(line,82,handle);
             Group[51] = Str2Doub(line);
             }

        else if (strncmp(line," 62",3)==0)           /* color */
             {
             fgets(line,82,handle);
             Group[62] = Str2Int(line);
             SetColor(Str2Int(line));
             }

        else if (strncmp(line," 70",3)==0)
             {
             fgets(line,82,handle);
             Group[70] = Str2Doub(line);
             }

        else if (strncmp(line,"210",3)==0)
             {
             fgets(line,82,handle);
             Group[210] = Str2Doub(line);
             }

        else if (strncmp(line,"220",3)==0)
             {
             fgets(line,82,handle);
             Group[220] = Str2Doub(line);
             }

        else if (strncmp(line,"230",3)==0)
             {
             fgets(line,82,handle);
             Group[230] = Str2Doub(line);
             }

        } while (strncmp(line,"  0",3)!=0 &&
                 strncmp(line,"EOF",3)!=0);
     }





/*--------------------------------------------------------------------
   TRANS

   Transform a point, given the normal vector.  Pulls the normal vector
   from Group[210/220/230].  Transforms the coordinates as held in
   Group[10/20/30].
  --------------------------------------------------------------------*/
void trans(int pt_x, int pt_y, int pt_z)
     {
     int i, j;
     point xdir, ydir, zdir, sum;
     matrix m;

     if (Group[210]!=0 || Group[220]!=0 || Group[230]!=0)
          {
          printf ("%s", enty);

          zdir[0] = Group[210];                        /* get the normals */
          zdir[1] = Group[220];
          zdir[2] = Group[230];

          if (fabs(zdir[X]) < ARBBOUND && fabs(zdir[Y]) < ARBBOUND) /* get the arbitrary x axis */
               veccross(xdir, yaxis, zdir);
          else
               veccross(xdir, zaxis, zdir);
          vecnorm(xdir, xdir);

          veccross (ydir, zdir, xdir);                 /* Now we cross our new X-axis with our norm (Z) to get the Y-axis */
          vecnorm  (ydir, ydir);                       /* And we normalize that to a unit vector */

          for (i = 0; i < 4; i++) {
               for (j = 0; j < 4; j++) {
                    if (i==j)
                         m[i][j] = 1.0;
                    else
                         m[i][j] = 0.0;
                    }}

          m[0][0] = xdir[X];
          m[1][0] = xdir[Y];
          m[2][0] = xdir[Z];
          m[0][1] = ydir[X];
          m[1][1] = ydir[Y];
          m[2][1] = ydir[Z];
          m[0][2] = zdir[X];
          m[1][2] = zdir[Y];
          m[2][2] = zdir[Z];

          for (i=0; i<3; i++)
               sum[i] = m[i][0] * Group[10] +
                        m[i][1] * Group[20] +
                        m[i][2] * Group[30] + m[i][3];

          Group[pt_x] = sum[X];
          Group[pt_y] = sum[Y];
          Group[pt_z] = sum[Z];
          }
     }


/*------------------------------------------------------
  VECCROSS

  Get the cross product of two vectors.  Return
  the result in o.
  ------------------------------------------------------*/
void veccross(point o, point a, point b)
     {
     point r;

     r[X] = a[Y] * b[Z] - a[Z] * b[Y];
     r[Y] = a[Z] * b[X] - a[X] * b[Z];
     r[Z] = a[X] * b[Y] - a[Y] * b[X];
     o[X] = r[X];
     o[Y] = r[Y];
     o[Z] = r[Z];
     }

/*--------------------------------------------------------
   VECMAG

   Returns magnitude of a vector.  This expects a point
   and uses only the first three terms.
  --------------------------------------------------------*/
double vecmag(point a)
     {
     return sqrt(a[X] * a[X] + a[Y] * a[Y] + a[Z] * a[Z]);
     }

/*---------------------------------------------
  VECNORM

  Normalise vector and store normalised result
  in a second vector.  Works on points.
  ---------------------------------------------*/
void vecnorm(point o, point a)
     {
     o[X] = a[X] * (1.0 / vecmag(a));
     o[Y] = a[Y] * (1.0 / vecmag(a));
     o[Z] = a[Z] * (1.0 / vecmag(a));
     }






/*==========================================
  main()

  main routine for DXF.POC
  ==========================================*/
void main()
     {
     int i, tempi, Blocks=False, Entities=False;
     double x1, y1, x2, y2, temp;

     Qtext("This utility reads in AutoCAD\nDXF Files.\nVersion 0.2.");

     if (Qfile(".DXF","Save","",file,True,"DXF File to Import"))
          {
          handle = fopen(file,"r");

          SetColorMap(1,252,  12,  60);                        /* set up autocad colors */
          SetColorMap(2,252, 252,  60);
          SetColorMap(3, 12, 204,  60);
          SetColorMap(4, 60, 252, 252);
          SetColorMap(5, 12,  12, 252);
          SetColorMap(6,252,  12, 204);
          SetColorMap(7,252, 252, 252);
          SetColorMap(8,252, 252, 252);

          do {
             SetColor(7);
             fgets(line,82,handle);

             if (strncmp(line,"LAYER",5)==0 && (LayPtr<MAXLAYERS)) /* store layer information */
                  {
                  fgets(line,82,handle);
                  if (strncmp(line," 70",3)!=0)                /* initial layer table entry -- ignore */
                       {
                       do {
                          if (strncmp(line,"  2",3)==0)        /* layer name */
                               {
                               fgets(line,82,handle);
                               strncpy(layer[LayPtr].layer,line,25);
                               }

                          if (strncmp(line," 62",3)==0)        /* color */
                               {
                               fgets(line,82,handle);
                               layer[LayPtr].color = Str2Int(line);
                               }

                          fgets(line,82,handle);
                          }while (strncmp(line,"  0",3)!=0 &&  /* end of layer definition */
                                  strncmp(line,"EOF",3)!=0);
                       LayPtr++;
                       }
                  }

               if (strncmp(line,"$EXTMIN",7)==0)
                    {
                    fgets(line,82,handle);
                    fgets(line,82,handle);
                    extminX = Str2Doub(line);

                    fgets(line,82,handle);
                    fgets(line,82,handle);
                    extminY = Str2Doub(line);
                    }

               if (strncmp(line,"$EXTMAX",7)==0)
                    {
                    fgets(line,82,handle);
                    fgets(line,82,handle);
                    extmaxX = Str2Doub(line);
                    fgets(line,82,handle);
                    fgets(line,82,handle);
                    extmaxY = Str2Doub(line);

                    Window();                                  /* get window from user */
                    }

               if (strncmp(line,"BLOCKS",6)==0)                /* flag when in blocks section */
                    Blocks = True;

               if (strncmp(line,"ENTITIES",8)==0)              /* flag when in entities section */
                    Entities = True;

               if (strncmp(line,"ENDSEC",6)==0)                /* end of section */
                    {
                    Blocks = False;
                    Entities = False;
                    }

               if (strncmp(line,"CIRCLE",6)==0 && Entities)    /* Circles */
                    {
                    GetGroup();
                    strcpy(enty,"CIRCLE\0");
                 /*   trans(10,20,30);   */
                    SetFilled(False);
                    Circle(Group[10],Group[20],Group[40]);
                    }

               if (strncmp(line,"ARC",3)==0 && Entities)       /* Arcs */
                    {
                    GetGroup();
                    strcpy(enty,"ARC\0");
                 /*   trans(10,20,30);   */
                    Arc(Group[10],Group[20],Group[40],Group[50],Group[51]);
                    }

               if (strncmp(line,"LINE",4)==0 && Entities)      /* lines */
                    {
                    GetGroup();
                    strcpy(enty,"LINE\0");
                 /*   trans(10,20,30);  */
                 /*   trans(11,21,31);  */
                    Line(Group[10],Group[20],Group[11],Group[21]);
                    }

               if (strncmp(line,"POLYLINE",8)==0 && Entities)  /* polylines */
                    {
                    do {
                       fgets(line,82,handle);                  /* find the group 70 code, if there is one */
                       if (strncmp(line,"VERTEX",6)==0)
                            break;
                       } while (strncmp(line," 70",3)!=0 &&
                                strncmp(line,"EOF",3)!=0);

                    if (strncmp(line," 70",3)==0)              /* pline bit codes */
                         {
                         fgets(line,82,handle);
                         tempi = Str2Int(line);
                         if ((tempi & 0x01) == 0x01)
                              Pline(True);                     /* closed pline */

                         if ((tempi & 0x16) == 0x16)           /* polygon mesh */
                              {
                              }

                         if ((tempi & 0x64) == 0x64)           /* polyface mesh */
                              {
                              }
                         }
                    else
                         Pline(False);                         /* open pline */
                    }

               } while (strncmp(line,"EOF",3)!=0)
          }
     }
