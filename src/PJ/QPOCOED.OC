
#include "errcodes.h"
#include "jimk.h"
#include "textedit.h"
#include "menus.h"
#include "pocoface.h"

Vfont *get_poco_font();

void etext_undraw_rect(Raster *r, void *data, int x, int y,
	int width, int height);
void etext_undraw_dot(int x, int y, Raster *r);


static Errcode open_poco_win(Wndo **win)
{
Errcode err;
WndoInit wi;

	clear_mem(&wi,sizeof(wi));
	wi.width = vb.screen->wndo.width;
	wi.height = vb.screen->wndo.height;
	wi.screen = vb.screen;
	wi.over = NULL;
	wi.flags = (WNDO_BACKDROP);

	if((err = open_wndo(win,&wi)) < 0)
		goto error;

	(*win)->ioflags = (KEYHIT|ANY_CLICK);
	return(Success);
error:
	return(softerr(err,"poco_edit"));
}


static void led_text(Text_file *gf)
/* call to edit_text_file bracketed by some initialization of the 
   Text_file structure common to all uses of the editor in this file */
{
	gf->text_name = poco_source_name;
	gf->justify_mode = JUST_LEFT;
	if (vb.screen->is_hires)
		gf->font = vb.screen->mufont;
	else
		gf->font = get_poco_font();
	edit_text_file(gf);
	save_text_file(gf);
}

long seek_char(char *file, long linepos, short charpos)
/* given a line and character on the line position, convert it to
   absolute character position */
{
long pos = 0;
long lp = 1;
short cp;
char c;

for (;;)
	{
	if ((c = *file++) == 0)
		break;
	if (c == '\n')
		{
		lp++;
		cp=0;
		}
	else
		cp++;
	if (lp >= linepos)
		{
		if (lp > linepos || cp > charpos)
			break;
		}
	pos++;
	}
return(pos);
}


void qedit_poco(long line, int cpos)
/* Edit existing text in same colors we use for menus over a blank screen.
   Don't paste the text. */
{
Text_file lgtf;
#define gf (&lgtf)

clear_struct(gf);
unzoom();
save_undo();
gf->raster = NULL;
if(open_poco_win((Wndo **)&(gf->raster)) < Success)
	goto OUT;
if (sblack != 0)		/* backdrop window open will have done this case */
	pj_set_rast(gf->raster, sblack);
if (pj_exists(poco_source_name))
	load_text_file(gf, poco_source_name);
else
	line = -1;
gf->ccolor = swhite;
gf->undraw_data = gf->raster;
gf->undraw_rect = etext_undraw_rect;
gf->undraw_dot = etext_undraw_dot;
if (line >= 0)
	gf->tcursor_p = seek_char(gf->text_buf, line, cpos);
else
	{
	gf->tcursor_p = vs.ped_cursor_p;
	gf->text_yoff = vs.ped_yoff;
	}
copy_rectfields(gf->raster, &gf->twin);
led_text(gf);
vs.ped_cursor_p = gf->tcursor_p;
vs.ped_yoff = gf->text_yoff;
free_text_file(gf);
OUT:
close_wndo((Wndo *)gf->raster);
zoom_unundo();
rezoom();
#undef gf
}

