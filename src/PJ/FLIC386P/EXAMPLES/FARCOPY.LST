Phar Lap Macro Assembler  Version 4.0           Thu Jun 18 03:09:59 1992

                                                              Page    1-1


                                         
                                         
                                        ; This file lets you access out-of-segm
                                        ent memory and do  
                                        ; in's and out's.  Also can put bytes o
                                        ut a port. 
                                         
                                        CGROUP	group	code 
                                         
00000000                                code	segment dword 'CODE' 
                                        	assume cs:CGROUP,ds:CGROUP 
                                         
                                        	;;  out_byte(int port, int value) 
                                        	;; 
                                        	;;  Send one byte out a port. 
                                        	public out_byte 
00000000                                out_byte proc near 
                                        ob_parameters struc 
00000000  ????????                      	ob_return		dd	?	;return address 
00000004  ????????                      	ob_old_ebp		dd	?	;old base-page 
00000008  ????????                      	ob_port			dd	?	;io port # 
0000000C  ????????                      	ob_value		dd	?	;byte to send out port 
00000010                                ob_parameters ends 
00000000  55                            	push	ebp 
00000001  8B EC                         	mov	ebp,esp 
00000003  8B 55 08                      	mov	edx,[ebp].ob_port 
00000006  8B 45 0C                      	mov	eax,[ebp].ob_value 
00000009  EE                            	out	dx,al 
0000000A  5D                            	pop	ebp 
0000000B  C3                            	ret 
                                        out_byte endp 
                                         
                                        	;; 
                                        	;;	far_copy_bytes(int source_offset, i
                                        nt source_segment,  
                                        	;;		int dest_offset, int dest_segment,
                                         int size) 
                                        	;; 
                                        	;;  Copy data between two different se
                                        gments. 
                                         
                                        	public far_copy_bytes 
0000000C                                far_copy_bytes proc near 
                                        fcb_parameters	struc	;far_copy_bytes pa
                                        rameter structure 
00000000  ????????                      	fcb_return		dd	?	;return address 
00000004  ????????                      	fcb_old_ebp		dd	?	;old base-page 
00000008  ????????                      	fcb_source_offset	dd	?	;address offset
                                         to read 
0000000C  ????????                      	fcb_source_segment	dd	?	;address segme
                                        nt to read 
00000010  ????????                      	fcb_dest_offset		dd	?	;address offset 
                                        to write 
00000014  ????????                      	fcb_dest_segment	dd	?	;address segment
Phar Lap Macro Assembler  Version 4.0           Thu Jun 18 03:09:59 1992

                                                              Page    1-2


                                         to write 
00000018  ????????                      	fcb_size		dd	?	;size of data to transf
                                        er 
0000001C                                fcb_parameters ends 
                                        ;; Standard function preamble - set up 
                                        stack frame to access parameters 
                                        ;; and push the registers worth saving.
                                         
0000000C  55                            	push	ebp 
0000000D  8B EC                         	mov	ebp,esp 
0000000F  1E                            	push	ds 
00000010  06                            	push	es 
00000011  56                            	push	esi 
00000012  57                            	push	edi 
                                        ;; Set up ds:esi to point to the far so
                                        urce location and es:edi 
                                        ;; to point to the destination buffer, 
                                        and get ready for 
                                        ;; the (inevitable?) repl movsb. 
00000013  8B 45 0C                      	mov	eax,[ebp].fcb_source_segment 
00000016  8E D8                         	mov 	ds,ax 
00000018  8B 75 08                      	mov 	esi,[ebp].fcb_source_offset 
0000001B  8B 45 14                      	mov 	eax,[ebp].fcb_dest_segment 
0000001E  8E C0                         	mov 	es,ax 
00000020  8B 7D 10                      	mov 	edi,[ebp].fcb_dest_offset 
00000023  8B 4D 18                      	mov 	ecx,[ebp].fcb_size 
00000026  F3/ A4                        	rep 	movsb 
                                        ;; Standard function exit - restore all
                                         saved registers and return. 
00000028  5F                            	pop	edi 
00000029  5E                            	pop	esi 
0000002A  07                            	pop	es 
0000002B  1F                            	pop	ds 
0000002C  5D                            	pop	ebp 
0000002D  C3                            	ret 
                                        far_copy_bytes endp 
                                         
0000002E                                code ends 
                                        	end 
Phar Lap Macro Assembler  Version 4.0           Thu Jun 18 03:09:59 1992

                                                              Symbols-1


	GROUPS AND SEGMENTS
Name                                Size      Use    Align Combine   Class

CGROUP . . . . . . . . . . . . .    Group
   code  . . . . . . . . . . . .    0000002E  USE32  DWORD NONE      CODE

	STRUCTURES
Name                                Size      Offset    Type

fcb_parameters . . . . . . . . .    0000001C
   fcb_return  . . . . . . . . .    00000004  00000000  DWORD
   fcb_old_ebp . . . . . . . . .    00000004  00000004  DWORD
   fcb_source_offset . . . . . .    00000004  00000008  DWORD
   fcb_source_segment  . . . . .    00000004  0000000C  DWORD
   fcb_dest_offset . . . . . . .    00000004  00000010  DWORD
   fcb_dest_segment  . . . . . .    00000004  00000014  DWORD
   fcb_size  . . . . . . . . . .    00000004  00000018  DWORD
ob_parameters  . . . . . . . . .    00000010
   ob_return . . . . . . . . . .    00000004  00000000  DWORD
   ob_old_ebp  . . . . . . . . .    00000004  00000004  DWORD
   ob_port . . . . . . . . . . .    00000004  00000008  DWORD
   ob_value  . . . . . . . . . .    00000004  0000000C  DWORD

	PROCEDURES
Name                                Type      Offset    Scope   Segment

far_copy_bytes . . . . . . . . .    N PROC    0000000C  Public  code
out_byte . . . . . . . . . . . .    N PROC    00000000  Public  code


      17 Symbols
       0 Warning Errors
       0 Severe Errors
