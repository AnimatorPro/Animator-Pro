    This is a list of things I think are really good things to add to the ansi
    standard for "c".


o - A #ifconst(c) preprocessor directive

	Is true if the expression in (c) is a constant false if a variable
	or variable expression.


	#ifconst(12+2-1/3) is true

	#ifconst(1+3+non-numeric) is false


o - specific field position indication in initialization of structured 
    static data.

    IE:
        given:
            struct aa {
                int aa1, aa2;
            }

            struct bb {
                struct aa bbaa;
                int bb1, bb2;
            } 

        then a static declaration could be:

            struct bb bbdat = {
                .bbaa.aa1 = 1,
                .bbaa.aa2 = 2,
                .bb1 = 3,
                .bb2 = 4,
            };

            or:

            struct bb {
                struct aa bbaa;
                int bb1, bb2;
            } = {
                .bbaa.aa1 = 1,
                .bbaa.aa2 = 2,
                .bb1 = 3,
                .bb2 = 4,
            };


        All fields without a specified initialization would be left
        zero filled.
        
        Old style and New style inits would not be co-extant.
        The type allowed would be determined by the first one encountered.
        
        ie:     

            struct bb bbdat = {
                1,
                .bbaa.aa2 = 2,  /* Error */
                .bb1 = 3,  /* Error */
                .bb2 = 4,  /* Error */
            };

            or:

            struct bb bbdat = {
                .bbaa.aa1 = 1,
                2,  /* Error */
                3,  /* Error */
                4,  /* Error */
            };

        This would be of benifit since initialization order would be
        maintained in one place.  And compiler errors would occur if
        a field is deleted from the structure definition and only some
        fields are initialized.

o - Enumerated pointer type.

    A pointer type like a void pointer that may have many pointer types
    assigned to it.  It differs however in that a list of allowable types
    is assigned to the type when it is declared and only those types or
    a void may be assigned to it.  It's implicit reference type would be
    the first one in the enumerated list.

        It might be more dangerous than specific types for 
    everything, but it gives more checking over voids when a function needs as
    input a limited number of types of things differientiated by their data.
    This would be of great benifit in object oriented programs.
    Something like:

        typedef enumptr { struct header *, struct type1 *, struct type2 *, 
                  struct type3 *, } mypointer;

        in code:

        myfunc(mypointer input)
        {
            if(input->type == TYPE_1)
                process_type1((struct type1 *)input);
            else if(input->type == TYPE_2)
                process_type2((struct type2 *)input);
            .
            .
            .
        }

        or:

        enumptr { char *, short *, long *, struct aa *, struct bb *, } eptr;

            where ++eptr will point to the next byte. 

		the function may be called with any of the allowable types as

		doit()
		{
		struct header *hd;
		struct type1 *t1;
		struct type2 *t2;
		struct type3 *t3;
		struct notin_enum *no;

        	myfunc(hd);  /* ok */
        	myfunc(t1);  /* ok */
        	myfunc(t2);  /* ok */
        	myfunc(t3);  /* ok */
			myfunc(no);  /* Type error!! */
		}


/**** grumble grumble

Typedef pointers should not require existance of typedef when pointer is 
declared Especially in structures. This so if what a pointer points to isn't
referenced the actual structure declaration isn't needed.  If one uses typedefs
a lot then you end up having to include may thousands of lines of code to
compile a very dinky function that only passes a pointer through to a sub 
function.  We've been running out of memory with the compiler a lot.

