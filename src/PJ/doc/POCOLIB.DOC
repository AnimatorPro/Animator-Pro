
/********* User Interface library ***********/ 
void printf(char *format, ...); 
     Function:      Prints a line at the top of the screen with a reverse
                    video background.
     Parameters:    char *format        string to print, using standard
                                        printf format.
                    ...                 variables to print in format
                                        string, using standard printf
                                        format.
     Return Value: none

void UnPrintf();
     Function:      Removes line on top of screen caused by printf().
     Parameters:    none
     Return Value:  none

void Qbusy(char *format, ...); 
     Function:      Puts up a box of text until program next requires input
                    from user.  Use this function to tell user to wait for
                    a long operation, and/or to update user on progress.
     Parameters:    char *format        string to print, using standard
                                        printf() format.
                    ...                 variables to print in format
                                        string, using standard printf
                                        format.
     Return Value:  none

void UnQbusy(); 
     Function:      Removes Qbusy box from screen.  This is not always
                    necessary.
     Parameters:    none
     Return Value:  none

ErrCode Qerror(ErrCode err, char *format, ...); 
     Function:      Prints the error number encountered, the Animator error
                    message associated with the number and an additional
                    message.
     Parameters:    ErrCode err         error code encountered.  Returned
                                        by some Poco functions.
                    char *format        String to print, using standard
                                        printf() format.
                    ...                 Variables to print in format
                                        string, using standard printf()
                                        format.
     Return Value:  ErrCode             Animator error code.

void Qtext(char *format, ...); 
     Function:      Puts up a small "continue" box with text.
     Parameters:    char *format        String to print, using standard
                                        printf() format.
                    ...                 Variables to print in format
                                        string, using standard printf()
                                        format.
     Return Value:  none

int Qchoice(char **buttons, int bcount, char *header, ...); 
     Function:      Puts up a selection box with buttons you specify.
     Parameters:    char **buttons      A string array containing the
                                        buttons to use.  To define, use:
                                             char *buttons[] =
                                                  {
                                                  "Yes",
                                                  "No",
                                                  "Maybe",
                                                  };
                    int bcount          Number of buttons in array.
                    char *header        Prompt to print in selection box,
                                        using standard printf() format.
                    ...                 Variables to print in header
                                        string, using standard printf()
                                        format.
     Return Value:  int                 Number of the button user selected,
                                        from 1 to bcount.  Subtract 1 for
                                        array index.

Boolean Qstring(char *string, int size, char *header); 
     Function:      Asks the user for a string and puts it in a variable.
     Parameters:    char *message       Prompt for string.
                    char *string        Variable the will contain user's
                                        string when function returns. 
                                        Define a set buffer size, eg.
                                             char name[20];
                    int size            Size of buffer space in string, eg.
                                             sizeof(string)
     Return Value:  Boolean             True if string was returned, false
                                        if user canceled.

int Qmenu(char **choices, int ccount, char *header); 
     Function:      Puts up an Animator-style numbered pop-up menu.  User
                    can click on selection or press a number to select a
                    menu item.
     Parameters:    char **choices      Array containing menu options.  See
                                        Qchoice for definition format.  Max
                                        is ten items; last item should
                                        always be "End", "Exit", "Cancel",
                                        etc.
                    int ccount          Number of choices in menu.  (eg.
                                        number of elements in array.)
                    char *header        Prompt for menu selection (menu
                                        header).
     Return Value:  int [0-9]           returns the number of the menu item
                                        user selected.  First array element
                                        is 1; the last array element is
                                        always 0.

Boolean Qquestion(char *question, ...); 
     Function:      Asks the user a yes/no question.
     Parameters:    char *question      Question to ask, using standard
                                        printf() format.
                    ...                 Variables to print in format
                                        string, using standard printf()
                                        format.
     Return Value:  Boolean             True if user clicked on Yes, False
                                        if user clicked on No.

Boolean Qnumber(int *num, int min, int max, char *header); 
     Function:      Brings up an Animator-style slider bar and prompts the
                    user to use it to select an integer.
     Parameters:    int *num            At the end of the function call,
                                        this value will contain the number
                                        the user selected.
                    int min             Lowest number selectable.
                    int max             Highest number selectable.
                    char *header        Message prompt for user.
     Return Value:  Boolean             True if number was returned, false
                                        if user canceled out of slider.

Boolean Qlist(int *choice, char **items, 
              int icount, int *ipos, char *header); 
     Function:      Brings up an unlimited list of items from which the
                    user can make a selection.  If there are more than ten
                    items, you can use a scroll bar to move through the
                    list.
     Parameters:    int *choice         At the end of the function call,
                                        this value will contain the number
                                        of the item the user selected, from
                                        0 to icount-1.
                    char **items        Array containing items to choose
                                        from.  Use same format as Qchoice.
                    int icount          Number of elements in list (in
                                        array).
                    int *ipos           Position of slider in dialog box. 
                                        0 is topmost position; 1 is added
                                        to this number for each position
                                        down (i.e. for each time the down
                                        arrow on slider is clicked).  This
                                        value is passed as well as
                                        returned, so slider will stay in
                                        same position between calls if this
                                        variable is used consistently.
                    char *header        Prompt for menu list.
     Return Value:  Boolean             True if user selected an item,
                                        false if user canceled.

Boolean Qfile(char *suffix, char *button, char *inpath, 
              char *outpath, Boolean force_suffix, char *header);
     Function:      Brings up an Animator-style file selector box and
                    returns the filename the user selected.
     Parameters:    char *suffix        Mask for file extender, including
                                        period.  For example, 
                                             .FLI
                                             .*
                    char *button        Button on lower right of file
                                        selector which tells the user which
                                        action will be taken on the file
                                        (for example, Load, Save, View,
                                        etc.).  A separate Cancel button
                                        will automatically be next to this
                                        button.
                    char *inpath        Default filename for user
                                        selection.  If string is empty,
                                        Poco will use "unnamed" and the
                                        default suffix.
                    char *outpath       At the end of the function call,
                                        this string will contain the
                                        filename the user selected.  This
                                        string will include disk drive and
                                        path, so make sure the buffer is
                                        large enough for the largest DOS
                                        filename (80 characters).
                    Boolean force_suffix     If True, Poco will
                                             automatically append default
                                             extender to both *inpath (e.g.
                                             "unnamed.pic") and *outpath. 
                                             Otherwise, filename won't have
                                             an extender if user didn't
                                             specify one.
                    char *header        Message header for top of file
                                        selector box.
     Return Value:  Boolean             True if user selected box specified
                                        as char *button; False if user
                                        canceled.

Boolean RubBox(int *x, int *y, int *w, int *h); 
     Function:      Lets the user draw a rubber box on the screen and
                    returns the dimensions of the rectangle.  Doesn't draw
                    anything on the screen.
     Parameters:    int *x         Top left x value of box.
                    int *y         Top left y value of box.
                    int *w         Width of box.
                    int *h         Height of box.
     Return Value:  Boolean        True if user made box, false if user
                                   canceled.

Boolean RubCircle(int *x, int *y, int *rad); 
     Function:      Lets the user draw a rubber box on the screen and
                    returns the dimensions of the circle.  Doesn't draw
                    anything on the screen.
     Parameters:    int *x         Center x position of circle.
                    int *y         Center y position of circle.
                    int *rad       Radius of circle.
     Return Value:  Boolean        True if user made box, false if user
                                   canceled.

Boolean RubLine(int x1, int y1, int *x2, int *y2);
     Function:      Lets the user draw a rubber line on the screen and
                    returns the coordinates of the line.  Doesn't draw
                    anything on the screen.
     Parameters:    int x1         Beginning x coordinate of line.
                    int y1         Beginning y coordinate of line.
                    int *x2        End x coordinate user selected.
                    int *y2        End y coordinate user selected.
     Return Value:  Boolean        True if user made line, False if user
                                   canceled.

int RubPoly(int **x, int **y); 
     Function:      Lets the user draw a rubber polygon on the screen.
     Parameters:    int **x        Array of x values of polygon.
                    int **y        Array of y values of polygon.
     Return Value:  int            Number of points in polygon.

void WaitClick(int *x, int *y, int *left, int *right, int *key);
     Function:      Waits for the user to click the mouse or press a key.
     Parameters:    int *x         X position of mouse at end of function.
                    int *y         Y position of mouse at end of function.
                    int *left      1 if left mouse button was pressed,
                                   otherwise 0.
                    int *right     1 if right mouse button was pressed,
                                   otherwise 0.
                    int *key       Scan code if key pressed, otherwise 0.
     Return Value:  none

void PollInput(int *x, int *y, int *left, int *right, int *key); 
     Function:      Checks to see if mouse was clicked or key was pressed.
     Parameters:    int *x         X position of mouse at end of function.
                    int *y         Y position of mouse at end of function.
                    int *left      1 if left mouse button was pressed,
                                   otherwise 0.
                    int *right     1 if right mouse button was pressed,
                                   otherwise 0.
                    int *key       Scan code if key pressed, otherwise 0.
     Return Value:  none

void WaitInput(int *x, int *y, int *left, int *right, int *key); 
     Function:      Waits for any input: click, keypress or mouse movement.
     Parameters:    int *x         X position of mouse at end of function.
                    int *y         Y position of mouse at end of function.
                    int *left      1 if left mouse button was pressed,
                                   otherwise 0.
                    int *right     1 if right mouse button was pressed,
                                   otherwise 0.
                    int *key       Scan key if key pressed, otherwise 0.

     Return Value:  none


/********* Graphics library ***********/ 
void GetSize(int *width, int *height); 
     Function:      Returns current screen size.
     Parameters:    int *width     At end of function, screen width.
                    int *height    At end of function, screen height.
     Return Value:  none.

int GetColor(); 
     Function:      Returns current drawing color.
     Parameters:    none
     Return Value:  int            Current color, 0-255.

void SetColor(int color); 
     Function:      Sets the current drawing color.
     Parameters:    int color      Color to set, 0-255.
     Return Value:  none

void Clear(); 
     Function:      Clears the screen.
     Parameters:    none
     Return Value:  none

void Dot(int x, int y); 
     Function:      Puts a dot on the screen in current drawing color.
     Parameters:    int x          x position of pixel to set.
                    int y          y position of pixel to set.
     Return Value:  none

int GetDot(int x, int y); 
     Function:      Gets the color at a position on screen.
     Parameters:    int x          x position of point.
                    int y          y position of point.
     Return Value:  int            color under dot (0-255).

void Line(int x1, int y1, int x2, int y2); 
     Function:      Draws a line between two points.
     Parameters:    int x1         x position of first point.
                    int y1         y position of first point.
                    int x2         x position of second point.
                    int y2         y position of second point.
     Return Value:  none

void Box(int x, int y, int w, int h); 
     Function:      Draws a rectangle on the screen.
     Parameters:    int x          x position of upper left corner (??)
                    int y          y position of upper left corner (??)
                    int w          width of rectangle
                    int h          height of rectangle
     Return Value:  none

void Circle(int cx, int cy, int radius); 
     Function:      Draws a circle on the screen.
     Parameters:    int cx         X position of center of circle.
                    int cy         Y position of center of circle.
                    int radius     radius of circle.
     Return Value:  none

ErrCode Poly(int ptcount, int *x, int *y); 
     Function:      Draws a polygon.  Connects the last point to the first
                    point.
     Parameters:    int ptcount    Number of points to connect.
                    int *x         Pointer to array of x coordinates.
                    int *y         Pointer to array of y coordinates.
     Return Value:  ErrCode

ErrCode Spline(int ptcount, int *x, int *y); 
     Function:      Draws a spline.
     Parameters:    int ptcount    Number of points in spline.
                    int *x         Pointer to array of x coordinates.
                    int *y         Pointer to array of y coordinates.
     Return Value:  Errcode

ErrCode Oval(double angle, int xcen, int ycen, int xrad, int yrad); 
     Function:      Draws an oval.
     Parameters:    double angle   Angle of oval.
                    int xcen       x center of oval.
                    int ycen       y center of oval
                    int xrad       x radius of oval.
                    int yrad       y radius of oval.
     Return Value:  Errcode

ErrCode Star(double angle, int xcen, int ycen, int rad); 
     Function:      Draws a star.
     Parameters:    double angle   Angle of star.
                    int xcen       x center of star.
                    int ycen       y center of star.
                    int rad        radius of star.
     Return Value:  Errcode

ErrCode Petal(double angle, int xcen, int ycen, int rad); 
     Function:      Draws a petal.
     Parameters:    double angle   angle of petal.
                    int xcen       x center of petal.
                    int ycen       y center of petal.
                    int rad        radius of petal.
     Return Value:  Errcode

ErrCode Rpoly(double angle, int xcen, int ycen, int rad); 
     Function:      Draws a rounded polygon.
     Parameters:    double angle   Angle of polygon's rotation.
                    int xcen       X center of polygon.
                    int ycen       Y center of polygon.
                    int rad        Radius of polygon.
     Return Value:  ErrCode

ErrCode Spiral(double angle, int xcen, int ycen, int rad, double turns); 
     Function:      Draws a spiral.
     Parameters:    double angle   
                    int xcen  
                    int ycen  
                    int rad   
                    double turns
     Return Value:  

ErrCode Fill(int x, int y); 
     Function:      Performs a fill operation.
     Parameters:    int x          X coordinate where fill begins.
                    int y          Y coordinate where fill begins.
     Return Value:  Errcode

ErrCode FillTo(int x, int y, int to_color); 
     Function:      Fills everything except a certain color.
     Parameters:    int x          X coordinate where fill begins.
                    int y          Y coordinate where fill begins.
                    int to_color   Color to fill to.
     Return Value:  Errcode

ErrCode Edge(int color); 
     Function:      Frames boundary of a color with the current drawing
                    color.
     Parameters:    int color      Color to frame.
     Return Value:  errcode

void WordWrap(int x, int y, int width, int height, char *text); 
     Function:      Writes text, using word wrap, inside a rectangle.
     Parameters:    int x          Upper left x coordinate of box.
                    int y          Upper left y coordinate of box.
                    int width      Width of box.
                    int height     Height of box.
                    char *text     Text to write.
     Return Value:  none

void Text(int x, int y, char *string); 
     Function:      Writes text on the screen.
     Parameters:    int x          Top left x coordinate of starting text
                                   position.
                    int y          Top left y coordinate of starting text
                                   position.
                    char *string   text to write.  (Jim, should be char
                                   *text like above.)
     Return Value:  none

void SetColorMap(int index, int r, int g, int b); 
     Function:      Sets a color in the color map to a new RGB value.
     Parameters:    int index      Color to change.
                    int r          Red component of new value.
                    int g          Green component of new value.
                    int b          Blue component of new value.
     Return Value:  none.

void GetColorMap(int index, int *r, int *g, int *b); 
     Function:      Returns current RGB value for a color.
     Parameters:    int index      Color to read.
                    int *r         At end of function, red component of
                                   value.
                    int *g         At end of function, green component of
                                   value.
                    int *b         At end of function, blue component of
                                   value.
     Return Value:  none.

/********* Graphics Modes library ***********/ 
ErrCode SetInk(char *name); 
     Function:      Sets the current ink.
     Parameters:    char *name     Name of ink to set.
     Return Value:  ErrCode

void GetInk(char *buf); 
     Function:      Gets the current ink.
     Parameters:    char *buf      At end of function, contains current
                                   ink.
     Return Value:  none

void SetInkStrength(int percent); 
     Function:      Sets ink strength.
     Parameters:    int percent    Strength of ink, from 0-100
     Return Value:  none

int GetInkStrength(); 
     Function:      Gets ink strength.
     Parameters:    none
     Return Value:  int            Strength of ink, from 0-100.

void SetInkDither(Boolean dither); 
     Function:      Sets dither flag for current ink.
     Parameters:    Boolean dither True if on, false if off.
     Return Value:  none.

Boolean GetInkDither(); 
     Function:      Finds out whether dither is on for current ink.
     Parameters:    none
     Return Value:  Boolean        True if on, false if off.

void SetFilled(Boolean fill); 
     Function:      Sets filled flag (used for drawing boxes, polygons,
                    etc.).
     Parameters:    Boolean fill   True if on, false if off.
     Return Value:  none

Boolean GetFilled(); 
     Function:      Finds out whether filled flag is set.
     Parameters:    none
     Return Value:  Boolean        True if on, false if off.

void SetBrushSize(int size); 
     Function:      Sets the brush size.
     Parameters:    int size       Size of brush, from x-x.
     Return Value:  none

int GetBrushSize(); 
     Function:      Gets the brush size.
     Parameters:    none
     Return Value:  int            Size of brush, from x-x.

void SetKeyMode(Boolean clear); 
     Function:      Sets/turns off clear flag for key color.
     Parameters:    Boolean clear  True if on, false if off.
     Return Value:  none

Boolean GetKeyMode(); 
     Function:      Finds out whether clear flag is on for key color.
     Parameters:    none
     Return Value:  Boolean        True if on, false if off.

void SetKeyColor(int color); 
     Function:      Sets the key color.
     Parameters:    int color      New key color (0-255).
     Return Value:  none

int GetKeyColor(); 
     Function:      Returns key color.
     Parameters:    none
     Return Value:  int            Key color (0-255).

void SetMaskUse(Boolean use_it); 
     Function:      
     Parameters:    Boolean use_it
     Return Value:  

Boolean GetMaskUse(); 
     Function:      
     Parameters:    
     Return Value:  

void SetMaskCreate(Boolean make_it); 
     Function:      
     Parameters:    Boolean make_it
     Return Value:  

Boolean GetMaskCreate(); 
     Function:      
     Parameters:    
     Return Value:  

void SetStarPoints(int points); 
     Function:      Sets number of points for star/petal/rpoly.
     Parameters:    int points     Number of points (x-x).
     Return Value:  none

int GetStarPoints(); 
     Function:      Gets number of points for star/petal/rpoly.
     Parameters:    none
     Return Value:  int            Number of points. (x-x).

void SetStarRatio(int ratio); 
     Function:      Sets inner radius ratio for star/petal/rpoly.
     Parameters:    int ratio      New ratio (from 0 to 100).
     Return Value:  none

int GetStarRatio(); 
     Function:      Gets ratio for star/petal/rpoly.
     Parameters:    none
     Return Value:  int            Ratio.

void SetSplineTCB(int t, int c, int b); 
     Function:      Sets tension, continuity and bias for splines.
     Parameters:    int t          Tension (-20 to 20).
                    int c          Continuity (-20 to 20).
                    int b          Bias (-20 to 20).
     Return Value:  none

void GetSplineTCB(int *t, int *c, int *b); 
     Function:      Gets tension, continuity and bias for splines.
     Parameters:    int *t         At end of function, tension (-20 to 20).
                    int *c         At end of function, continuity (-20 to
                                   20).
                    int *b         At end of function, bias (-20 to 20).
     Return Value:  none

void SetTwoColorOn(Boolean setit); 
     Function:      Sets two color mode for drawing.
     Parameters:    Boolean setit  True if on, false if off.
     Return Value:  none

Boolean GetTwoColorOn(); 
     Function:      Finds out if two color mode is on.
     Parameters:    none
     Return Value:  Boolean        True if on, false if off.

void SetTwoColor(int color); 
     Function:      Sets color for two color mode.
     Parameters:    int color      Color to use (0-255).
     Return Value:  none

int GetTwoColor(); 
     Function:      Gets current color for two color mode.
     Parameters:    none
     Return Value:  int            Current color (0-255).

void SetJustify(int just); 
     Function:      Sets justification options for text mode.
     Parameters:    int just       0 -- Flush left
                                   1 -- Flush right
                                   2 -- Center text
                                   3 -- Fill line (justify text)
     Return Value:  none

int GetJustify(); 
     Function:      Gets current justification settings for text.
     Parameters:    none
     Return Value:  int            0 -- Flush left
                                   1 -- Flush right
                                   2 -- Center text
void SetClosed(Boolean closed); 
     Function:      Sets closed flag for polygons, splines, etc.
     Parameters:    Boolean closed      True if on, false if off.
     Return Value:  none

Boolean GetClosed(); 
     Function:      Gets closed flag for polygons, splines, etc.
     Parameters:    none.
     Return Value:  Boolean             True if on, false if off.

void SetCycleDraw(Boolean cycle); 
     Function:      Sets color cycle drawing mode.
     Parameters:    Boolean cycle  True if on, false if off.
     Return Value:  none.

Boolean GetCycleDraw(); 
     Function:      Gets color cycle drawing mode flag.
     Parameters:    none.
     Return Value:  Boolean        True if on, false if off.


/********* Turtle Graphics library ***********/ 
void Move(double amount); 
     Function:      Moves the turtle graphics pen.
     Parameters:    double amount  Distance to move in pixels.
     Return Value:  none.

void Back(double amount); 
     Function:      Moves turtle graphics pen backwards.
     Parameters:    double amount  Distance to move in pixels.
     Return Value:  none

void Left(double angle); 
     Function:      Turns pen to left.
     Parameters:    double angle   Angle of turn in degrees.
     Return Value:  none.

void Right(double angle); 
     Function:      Turns pen to right.
     Parameters:    double angle   Angle of turn in degrees.
     Return Value:  

void PenUp(); 
     Function:      Picks turtle graphics pen up (suspends drawing).
     Parameters:    none
     Return Value:  none

void PenDown(); 
     Function:      Puts down turtle graphics pen (resumes drawing).
     Parameters:    none
     Return Value:  none

Boolean IsDown(); 
     Function:      Finds out whether pen is up or down.
     Parameters:    none
     Return Value:  Boolean        True if down, false if up.

void MoveTo(double x, double y, double angle); 
     Function:      Move pen to an absolute position on screen.
     Parameters:    double x       New x coordinate of pen.
                    double y       New y coordinate of pen.
                    double angle   New direction of pen (in degrees).
     Return Value:  none

void Where(double *x, double *y, double *angle); 
     Function:      Returns position and direction of pen.
     Parameters:    double *x      Current x coordinate of pen.
                    double *y      Current y coordinate of pen.
                    double *angle  Current heading of pen (in degrees).
     Return Value:  none

void Home(); 
     Function:      Moves pen to center of screen and sets drawing
                    direction right (0).
     Parameters:    none
     Return Value:  none

/********* Time Oriented Function library ***********/ 
void NextFrame(); 
     Function:      Advances to next frame.
     Parameters:    none
     Return Value:  none

void BackFrame(); 
     Function:      Goes to previous frame.
     Parameters:    none
     Return Value:  none

void SetFrame(int frame); 
     Function:      Sets current frame to an absolute frame number.
     Parameters:    int frame      Frame number to move to.
     Return Value:  none

int GetFrame(); 
     Function:      Finds the number of the current frame.
     Parameters:    none
     Return Value:  int            Current frame number

ErrCode SetFrameCount(int count); 
     Function:      Sets total number of frames in animation.
     Parameters:    int count      Number of frames.
     Return Value:  ErrCode

int GetFrameCount(); 
     Function:      Finds total number of frames in current animation.
     Parameters:    none
     Return Value:  int            Number of frames.

void PlayFlic(long frames); 
     Function:      Plays current animation.
     Parameters:    long frames    Number of frames to play.
     Return Value:  

void SetSpeed(int speed); 
     Function:      Sets the speed of an animation.
     Parameters:    int speed           Speed to play (0 to 120).
     Return Value:  

int GetSpeed(); 
     Function:      Gets current animation play speed.
     Parameters:    none
     Return Value:  int            Current speed.

ErrCode InsertFrames(int count); 
     Function:      Inserts frames after current frame.
     Parameters:    int count      Number of frames to insert.
     Return Value:  ErrCode

ErrCode DeleteFrames(int count); 
     Function:      Deletes frames starting at and including current frame.
     Parameters:    int count      Number of frames to delete.
     Return Value:  ErrCode

ErrCode OverTime(ErrCode (*effect)(double time, void *data), void *data); 
     Function:      Passes a function to the Animator Time Select menu, and
                    returns each frame's relative position in the animation
                    to the function.  The function is expected to draw
                    something on the screen, with the position dependent on
                    the time parameter.  Optionally, you can pass
                    additional data to the function.
     Parameters:    ErrCode (*effect)(double time, void *data)
                                   Name of function passed to Time Select
                                   menu.  (Note: the parameters are
                                   assumed; use only the function name when
                                   you call OverTime().  See example.)
                    double time    This is passed to the effect function by
                                   the Time Select menu.  Its value, from 0
                                   to 1, is the relative position of the
                                   frame in the current animation. 
                                   OverTime sends this value for each
                                   frame, automatically advancing the
                                   animation.
                    void *data     Usually a structure, this is any data
                                   element you choose to send to the effect
                                   function.  This data is disregarded by
                                   the Time Select menu.  Use a NULL data
                                   pointer if no data is sent.
     Return Value:  ErrCode        OverTime returns the ErrCode returned to
                                   it by the effect function or the Time
                                   Select menu, or 0 if no error was
                                   encountered.
     Example Calls: OverTime(CircFunc,&cd);
                    OverTime(GrowBush,NULL);
     Example Program:    /* CIRCLE.POC                           /*
                         /* Causes the user's rubberboxed circle /*
                         /* to expand through animation.         /*

                         typedef struct {
                              int x,y,rad;
                         } CircData;

                         CircFunc(double time, CircData *cd) {
                              Circle(cd->x,cd->y,time*cd->rad);
                              return(0);
                         }

                         main() {
                         CircData cd;
                         for (;;) {
                              if (!RubCircle(&cd.x, &cd.y, &cd.rad))
                                   break;
                              OverTime(CircFunc, &cd);
                              }
                         }

/********* Cel library ***********/ 
Boolean CelExists(); 
     Function:      Finds out if a cel exists. 
     Parameters:    none
     Return Value:  Boolean                       1 if cel exists,
                                                  otherwise 0.

void CelPaste(); 
     Function:      Pastes a cel on the screen at current cel location.
     Parameters:    none
     Return Value:  none

void CelMove(int dx, int dy); 
     Function:      Moves a cel a relative distance on the screen (without
                    pasting).
     Parameters:    int dx         Distance to move in x direction. 
                    int dy         Distance to move in y direction.
     Return Value:  none

void CelMoveTo(int x, int y); 
     Function:      Moves a cel to a new position on screen (without
                    pasting).
     Parameters:    int x          New x position of center of cel.
                    int y          New y position of center cel.
     Return Value:  

void CelTurn(double angle); 
     Function:      Turns cel a relative amount.
     Parameters:    double angle   Amount to turn cel in degrees.
     Return Value:  none

void CelTurnTo(double angle); 
     Function:      Turns cel to absolute direction.
     Parameters:    double angle   New direction of cel.
     Return Value:  none

ErrCode CelNextFrame(); 
     Function:      Goes to next frame of cel.
     Parameters:    
     Return Value:  ErrCode

ErrCode CelBackFrame(); 
     Function:      Goes to previous frame of cel.
     Parameters:    
     Return Value:  ErrCode             

ErrCode CelSetFrame(int frame); 
     Function:      Sets frame of cel.
     Parameters:    int frame      New cel frame.
     Return Value:  ErrCode             

int CelGetFrame(); 
     Function:      Returns current cel frame.
     Parameters:    
     Return Value:  int            Current frame.

int CelFrameCount();
     Function:      Returns number of frames in current cel.
     Parameters:    
     Return Value:  int            Number of frames.

ErrCode CelWhere(int *x, int *y, double *angle);
     Function:      Returns current location of cel.
     Parameters:    int *x              Center (???) x location.
                    int *y              Center y location.
                    double *angle       Position of cel.
     Return Value:  ErrCode

/********* Swap Screen library ***********/ 
Boolean SwapExists(); 
     Function:      Finds out if a swap screen exists.
     Parameters:    none
     Return Value:  Boolean        True if exists, otherwise false.

***void SwapPaste(); 
     Function:      Pastes the swap screen onto drawing screen.
     Parameters:    none
     Return Value:  none

void SwapClip(); 
     Function:      Puts current screen into swap screen buffer.
     Parameters:    none
     Return Value:  none

***void SwapTrade(); 
     Function:      Exchanges drawing screen with swap screen.
     Parameters:    none
     Return Value:  none

void SwapRelease(); 
     Function:      Clears swap screen.
     Parameters:    none
     Return Value:  none


/********* Optics library ***********/
void OptClearState();
     Function:      Clears all movement.  Equivalent to selecting Clear All
                    under the optics Presets menu.
     Parameters:    none
     Return Value:  none

void OptSetState(struct optState *os);
     Function:      Sets all movement and other optics state information to
                    values contained in optState parameter.
     Parameters:    struct optState *os      Optics movement and state
                                             information.  See optics.h for
                                             structure.
     Return Value:  none.

void OptGetState(struct optState *os);
     Function:      Gets current optics movement and state information.
     Parameers:     struct optState *os      At end of function, contains
                                             Optics movement and state
                                             information (See optics.h)
     Return Value:  none

void OptFreeState(struct optState *os);
     Function:      Frees up the dynamic memory associated with an optState
                    structure returned by OptGetState.
     Parameters:    struct optState *os      Optics structure to free.
     Return Value:  none.

void OptClearPos();
     Function:      Equivalent to selecting Clear Move on the optics panel. 
                    (Clears top of optics transformation stack.)
     Parameters:    none
     Return Value:  none

void OptSetPos(struct optPos *op);
     Function:      Sets all the sliders in the optics panel.  (Sets the
                    top of the optics transformation stack.)
     Parameters:    struct optPos *op        Optics movement points.
     Return Value:  none

void OptGetPos(struct optPos *op);
     Function:      Reads the values for all the sliders in the optics
                    panel.  (Program gets the top of the optics
                    transformation stack.)
     Parameters:    struct optPos *op        Optics movement points.
     Return Value:  none

void OptClearPath();
     Function:      Removes path movement.
     Parameters:    none
     Return Value:  none

void OptSetPath(int ptcount, int *x, int *y);
     Function:      Sets path movement to a set of pixel coordinates.
     Parameters:    int ptcount    Number of points in path.
                    int *x         Array of x coordinates for path.
                    int *y         Array of y coordinates for path.
     Return Value:  none

int OptGetPath(int **x, int **y);
     Function:      Allocates buffers and fills them with the current
                    optics path.
     Parameters:    int **x        Address of buffer for optics path x
                                   values.  (Buffer will contain the values
                                   at end of function.)
                    int **y        Address of buffer for optics path y
                                   values.  (Buffer will contain the values
                                   at end of function.)
     Return Value:  int            Number of coordinate points in path.

void OptFreePath(int **x, int **y);
     Function:      Frees buffers allocated by OptGetPath.
     Parameters:    int **x        Address of x buffer to free.
                    int **y        Address of y buffer to free.
     Return Value:  none

void OptDefaultCenters();
     Function:      Sets spin and size centers to the center of current
                    optics element.
     Parameters:    none
     Return Value:  none

void OptContinue();
     Function:      This is equivalent to pressing the continue button on
                    the optics panel.  (Program pushes a copy of top
                    transformation onto stack.)
     Parameters:    none
     Return Value:  none

int OptGetElement();
     Function:      Gets an optics element.
     Parameters:    none
     Return Value:  EL_SCREEN (0) for flic
                    EL_CEL (1) for cel
                    EL_POLY (2) for poly
                    EL_SPLINE (3) for spline
                    EL_TWEEN (4) for tween

ErrCode OptSetElement(int el);
     Function:      Sets an optics element.
     Parameters:    int el         Element to set.  Use the same values as
                                   those returned by OptGetElement() above.
     Return Value:  ErrCode        Function will set the element to
                                   EL_SCREEN if the requested element does
                                   not exist.

ErrCode OptToFrame(double time);
     Function:      Pastes transformed element onto screen.
     Parameters:    double time    0.0 for element at start of transform
                                   and 1.0 for element at end.
     Return Value:  Errcode

ErrCode OptToSegment(int start, int stop);
     Function:      Renders current transformation over a section of flic.
     Parameters:    int start      First frame to render.
                    int stop       Last frame to render.
     Return Value:  Errcode

ErrCode OptToAll();
     Function:      Renders current transformation over entire flic.
     Parameters:    
     Return Value:  


/********* Screen library ***********/ 
Screen *GetPicScreen(); 
     Function:      Assigns a handle to current (picture) screen.
     Parameters:    none
     Return Value:  Screen *       Handle of screen.

Screen *GetSwapScreen(); 
     Function:      Assigns a handle to swap screen.
     Parameters:    none
     Return Value:  Screen *       Handle of screen.

Screen *GetUndoScreen(); 
     Function:      Assigns a handle to undo screen.
     Parameters:    none
     Return Value:  Screen *       Handle of screen.

ErrCode AllocScreen(Screen **screen, int width, int height); 
     Function:      Allocates memory for a new screen.
     Parameters:    Screen **screen     Handle of new screen.
                    int width           Width of new screen.
                    int height          Height of new screen.
     Return Value:  ErrCode

void FreeScreen(Screen **screen); 
     Function:      Frees memory allocated by AllocScreen().
     Parameters:    Screen **screen     Handle of screen to free.
     Return Value:  none

void GetScreenSize(Screen *s, int *x, int *y); 
     Function:      Finds current screen size.
     Parameters:    Screen *s      Handle of screen.
                    int *x         x size of screen.
                    int *y         y size of screen.
     Return Value:  none

void SetPixel(Screen *s, int color, int x, int y); 
     Function:      Sets a pixel on a screen.
     Parameters:    Screen *s      Screen to draw on.
                    int color      Color of pixel to set.
                    int x          x position of pixel to set.
                    int y          y position of pixel to set.
     Return Value:  none

int GetPixel(Screen *s, int x, int y); 
     Function:      Returns color of a pixel on a screen.
     Parameters:    Screen *s      Screen to look at.
                    int x          x position of pixel to check.
                    int y          y position of pixel to check.
     Return Value:  int            Color value of pixel.

void SetBlock(Screen *s, char *pixbuf, int x, 
              int y, int width, int height);
     Function:      Sets a block on a screen to a bytewise buffer
                    previously stored with GetBlock().
     Parameters:    Screen *s      Screen to draw on.
                    char *pixbuf   Pixel data to draw.
                    int x          Upper left x position of block.
                    int y          Upper left y position of block.
                    int width      Width of block.
                    int height     Height of block.
     Return Value:  none
 
void GetBlock(Screen *s, char *pixbuf, int x, 
              int y, int width, int  height); 
     Function:      Stores a block of a screen into a buffer for retrieval
                    with SetBlock().
     Parameters:    Screen *s      Screen to get block from.
                    char *pixbuf   Pointer to buffer to hold block.
                    int x          Upper left x position of block.
                    int y          Upper left y position of block.
                    int width      Width of block.
                    int  height    Height of block.
     Return Value:  none

void IconBlit(char *source, int snext, int sx, int sy, int width, 
              int height, Screen *dest, int  dx, int dy, int color);
     Function:      Maps a bit representation of an image (such as a font
                    or icon) to the screen, using 0 in source as the
                    background color and 1 in source as the color
                    specified.
     Parameters:    char *source   Bit-mapped buffer.
                    int snext      Number of bytes to next line in source.
                    int sx         Beginning x position in source.
                    int sy         Beginning y position in source.
                    int width      Width of buffer to copy.
                    int height     Height of buffer to copy.
                    Screen *dest   Handle of destination screen.
                    int  dx        Upper left x position in destination.
                    int dy         Upper left y position in destination.
                    int color      Color to map 1's in buffer to.
     Return Value:  none

void Blit(Screen *source, int sx, int sy, int width, int height, 
          Screen *dest, int dx, int dy); 
     Function:      Blits a graphic block from one screen to another.
     Parameters:    Screen *source      Handle of source screen.
                    int sx              Upper left x coordinate of source.
                    int sy              Upper left y coordinate of source.
                    int width           Width of block.
                    int height          Height of block.
                    Screen *dest        Handle of destination screen.
                    int dx              Upper left x coordinate of
                                        destination.
                    int dy              Upper left y coordinate of
                                        destination.
     Return Value:  none

void KeyBlit(Screen *source, int sx, int sy, int width, int height, 
             Screen *dest, int dx, int dy, int key_color);  
     Function:      Blits a block from one screen to antoher, but doesn't
                    copy pixels in key color on source screen.
     Parameters:    Screen *source      Handle of source screen.
                    int sx              Upper left x coordinate of source.
                    int sy              Upper left y coordinate of source.
                    int width           Width of block to copy.
                    int height          Height of block to copy.
                    Screen *dest        Handle of destination screen.
                    int dx              Upper left x coordinate of
                                        destination.
                    int dy              Upper left y coordinate of
                                        destination.
                    int key_color       Key color (pixels in this color
                                        aren't copied).
     Return Value:  none

void CopyScreen(Screen *source, Screen *dest);
     Function:      Copies one screen to another.
     Parameters:    Screen *source      Source screen to copy.
                    Screen *dest        Handle of destination screen.
     Return Value:  none

void TradeScreen(Screen *a, Screen *b);
     Function:      Exchanges two screens.
     Parameters:    Screen *a      Handle of screen.
                    Screen *b      Handle of screen.
     Return Value:  none

/********* Misc. Functions library ***********/ 
void exit(ErrCode err); 
     Function:      Exits Poco.
     Parameters:    ErrCode err    0 if normal; otherwise negative.  If err
                                   is a standard Animator error code, the
                                   error will be reported on exit.  With
                                   the special value -425, if Poco was
                                   called from the command line, Animator
                                   will not run on termination of the
                                   program.
     Return Value:  none

void NewFlic(); 
     Function:      Starts a new animation, retaining current palette and
                    settings.
     Parameters:    none
     Return Value:  none

ErrCode Reset();    
     Function:      Resets Animator's default settings and starts new
                    animation at current screen size.
     Parameters:    none
     Return Value:  ErrCode

ErrCode ResizeReset(int width, int height);
     Function:      Resets Animator's default settings and starts new
                    animation at new screen size.
     Parameters:    int width      New screen width.
                    int height     New screen height.
     Return Value:  Errcode

int PocoVersion(); 
     Function:      Returns Poco version number.
     Parameters:    none
     Return Value:  int            Version number.

void Redo(); 
     Function:      Performs a Redo operation.
     Parameters:    none.
     Return Value:  none.

*** Jim have these Undo functions have been taken out???
***void PicToUndo(); 
     Function:      Copies picture to undo buffer.
     Parameters:    none.
     Return Value:  none.

***void UndoToPic(); 
     Function:      Copies undo buffer to screen.
     Parameters:    none.
     Return Value:  none.

***void TradeUndo(); 
     Function:      Exchanges undo buffer with current screen.
     Parameters:    
     Return Value:  

void Restore(); 
     Function:      Restores current frame to what it was when you first
                    moved to it.
     Parameters:    none.
     Return Value:  none.

int rnd(int max); 
     Function:      Generates a random number from 0 to max-1.
     Parameters:    int max        Maximum number to generate.
     Return Value:  int            A random number.

int rand(); 
     Function:      Returns a random 16-bit number.
     Parameters:    
     Return Value:  

void srand(int seed); 
     Function:      Sets the random number generator.
     Parameters:    int seed       Seed for random number generator.
     Return Value:  none.

long clock(); 
     Function:      Returns amount of time you've been running Animator
                    this session.
     Parameters:    none.
     Return Value:  long           Amount of time you've been running
                                   Animator.

/********* Autodesk Animator File library ***********/ 

ErrCode LoadFlic(char *name); 
     Function:      Loads an animation from disk.
     Parameters:    char *name     Filename of animation to load.
     Return Value:  ErrCode

ErrCode SaveFlic(char *name); 
     Function:      Saves an animation to disk.
     Parameters:    char *name     Filename of animation to save.
     Return Value:  ErrCode

ErrCode LoadPic(char *name); 
     Function:      Loads a GIF picture into current frame.
     Parameters:    char *name     Filename of picture to load.
     Return Value:  ErrCode

ErrCode SavePic(char *name); 
     Function:      Saves current frame to a GIF picture file.
     Parameters:    char *name     Filename of picture to save.
     Return Value:  ErrCode

ErrCode LoadCel(char *name); 
     Function:      Loads a cel into cel buffer.
     Parameters:    char *name     Filename of cel to load.
     Return Value:  Errcode

ErrCode SaveCel(char *name); 
     Function:      Saves current cel buffer to a file.
     Parameters:    char *name     Filename of cel to save.
     Return Value:  errcode

ErrCode LoadPath(char *name); 
     Function:      Loads optics path.
     Parameters:    char *name     Filename of optics path to load.
     Return Value:  

ErrCode SavePath(char *name); 
     Function:      Saves optics path to disk.
     Parameters:    char *name     Filename of optics path to save.
     Return Value:  

ErrCode LoadPoly(char *name); 
     Function:      Loads polygon from disk for "Reuse".
     Parameters:    char *name     Filename of polygon to load.
     Return Value:  

ErrCode SavePoly(char *name); 
     Function:      Saves polygon to disk.
     Parameters:    char *name     Filename of polygon to save.
     Return Value:  

ErrCode LoadColors(char *name); 
     Function:      Loads a color palette.
     Parameters:    char *name     Filename of color palette to load.
     Return Value:  errcode

ErrCode SaveColors(char *name); 
     Function:      Saves current color palette to disk.
     Parameters:    char *name     Filename of color palette to save.
     Return Value:  errcode

ErrCode LoadTitles(char *name); 
     Function:      Loads text buffer used in text/edit reuse and titles
                    menu.
     Parameters:    char *name     Filename of text to load.
     Return Value:  

ErrCode SaveTitles(char *name); 
     Function:      Save text/titles buffer to disk.
     Parameters:    char *name     Filename of text to save.
     Return Value:  

ErrCode LoadMask(char *name); 
     Function:      Loads a mask from disk.
     Parameters:    char *name     Filename of mask to load.
     Return Value:  errcode

ErrCode SaveMask(char *name); 
     Function:      Saves current mask buffer to disk.
     Parameters:    char *name     Filename of mask to save.
     Return Value:  errcode

ErrCode LoadFont(char *name); 
     Function:      Loads a font from disk.  (???*** Jim What about font
                    options?)
     Parameters:    char *name     Filename of font to load.
     Return Value:  errcode


/********* (C Standard) FILE library ***********/ 
FILE *fopen(char *name, char *mode); 
     Function:      Opens a file for input/output.
     Parameters:    char *name     Name of file to open.
                    char *mode     Access mode (must be lower case):
                                        r = Read
                                        w = Write 
                                        a = Append
                                        r+ = Read and write existing file.
                                        w+ = Read and write a new file.
     Return Value:  FILE*               Pointer to file handle of open
                                        file.

void *fclose(FILE *f); 
     Function:      Closes a file.
     Parameters:    FILE *f        Pointer to handle of file to close.
     Return Value:  none.

int fread(void *buf, int size, int count, FILE *f); 
     Function:      Reads data from an open file.  Total bytes read will be
                    size times count.
     Parameters:    void *buf      Pointer to block to hold data.
                    int size       Length of each item to read.
                    int count      Number of items to read.
                    FILE *f        Pointer to handle of file to read.
     Return Value:  int            Number of items read.

int fwrite(void *buf, int size, int count, FILE *f); 
     Function:      Writes data to an open file.
     Parameters:    void *buf      Pointer to block holding data.
                    int size       Length of each item to write.
                    int count      Number of items to write.
                    FILE *f        Pointer to handle of file to write.
     Return Value:  int            Number of items written.

int fprintf(FILE *f, char *format, ...); 
     Function:      Writes a formatted output string to an open file.
     Parameters:    FILE *f        Pointer to handle of file to write.
                    char *format   String to write, using standard printf
                                   format.
                    ...            Variables to include in output string,
                                   using standard printf format.
     Return Value:  int            Number of bytes output.

int fseek(FILE *f, long offset, int mode); 
     Function:      Repositions pointer in an open file.
     Parameters:    FILE *f        Pointer to handle of open file.
                    long offset    Number of bytes to move pointer beyond
                                   location specified in mode.
                    int mode       Mode of repositioning:
                                   0 -- From beginning of file.
                                   1 -- From current position.
                                   2 -- From end of file.
     Return Value:  int            Returns 0 on success.

long ftell(FILE *f); 
     Function:      Returns current pointer position in an open file.
     Parameters:    FILE *f        Pointer to handle of open file.
     Return Value:  long           Current position in file, relative to
                                   beginning of file.

int fflush(FILE *f); 
     Function:      Flushes an open data stream, either to a file open for
                    output or from a file open for input.
     Parameters:    FILE *f        Pointer to handle of open file.
     Return Value:  int            Returns 0 on success.

int getc(FILE *f); 
     Function:      Gets a character from an open file.
     Parameters:    FILE *f        Pointer to handle of file to read.
     Return Value:  int            Character read.

int fgetc(FILE *f); 
     Function:      Gets a character from an open file.
     Parameters:    FILE *f        Pointer to handle of file to read.
     Return Value:  int            Character read.

int putc(int c, FILE *f); 
     Function:      Writes a character to an open file.
     Parameters:    int c          ASCII code of character to write.
                    FILE *f        Pointer to handle of file to write.
     Return Value:  int            On success, character that was written.
                                   *** Jim Turbo C says this returns EOF on
                                   failure; do we have an EOF???
int fputc(int c, FILE *f); 
     Function:      Writes a character to an open file.
     Parameters:    int c          Character to write.
                    FILE *f        Pointer to handle of file to write.
     Return Value:  int            On success, character that was written. 
                                   **?? Ditto on failure?

char *fgets(char *s, int maxlen, FILE *f); 
     Function:      Reads a string from a file until it reaches the end of
                    line character (or reads maxlen characters).  The end
                    of line character is retained in string, and a null
                    byte is added to mark the end of the string.
     Parameters:    char *s        Pointer to string.
                    int maxlen     Maximum characters to read.
                    FILE *f        Pointer to handle of file.
     Return Value:  char *         String pointed to by s or NULL on end of
                                   file or error.

int fputs(char *s, FILE *f); 
     Function:      Writes a string to a file.
     Parameters:    char *s        Null-terminated string to write.  fputs
                                   doesn't write newline or terminating
                                   null character.
                    FILE *f        Pointer to handle of file.
     Return Value:  int            Last character written.

/********* (C standard) String library ***********/ 
int sprintf(char *buf, char *format, ...); 
     Function:      Evaluates a formatted string and puts it in a buffer.
     Parameters:    char *buf      Buffer to write string to.
                    char *format   Formatted string to copy, using standard
                                   printf format.
                    ...            Variables to evaluate into formatted
                                   string, using standard printf format.
     Return Value:  int            Number of bytes written to output
                                   string, excluding terminating null byte. 
                                   *** what about on error???

int strcmp(char *a, char *b); 
     Function:      Compares two strings.
     Parameters:    char *a        First string to compare.
                    char *b        Second string to compare.
     Return Value:  int            < 0 if a is less than b
                                   = 0 if a equals b
                                   > 0 if a is greater than b

int stricmp(char *a, char *b); 
     Function:      Compares two strings, without case sesitivity.
     Parameters:    char *a        First string to compare.
                    char *b        Second string to compare.
     Return Value:  int            < 0 if a is less than b
                                   = 0 if a equals b
                                   > 0 if a is greater than b

int strncmp(char *a, char *b, int maxlen); 
     Function:      Compares a portion of one string to another.
     Parameters:    char *a        First string to compare.
                    char *b        Second string to compare.
                    int maxlen     Maximum number of characters to compare.
     Return Value:  int            < 0 if a is less than b
                                   = 0 if a equals b
                                   > 0 if a is greater than b

int strlen(char *a); 
     Function:      Returns the length of a string.
     Parameters:    char *a        String to examine.
     Return Value:  int            Number of characters in string.

char *strcpy(char *dest, char *source); 
     Function:      Copies one string into another string.
     Parameters:    char *dest     Destination string.
                    char *source   Source string.
     Return Value:  char*          Destination string.

char *strncpy(char *dest, char *source, int maxlen); 
     Function:      Copies a certain number of characters from one string
                    into another.
     Parameters:    char *dest     Destination string.
                    char *source   Source string.
                    int maxlen     Number of characters to copy.  Function
                                   will pad or truncate if necessary.
     Return Value:  char*          Destination string.

char *strcat(char *dest, char *source); 
     Function:      Appends one string to another.
     Parameters:    char *dest     Destination string.
                    char *source   String to append.
     Return Value:  char*          Concantenated string.

char *strdup(char *source); 
     Function:      Copies a string into a newly-created location.
     Parameters:    char *source   String to copy.
     Return Value:  char*          New string.

char *strstr(char *string, char *substring); 
     Function:      Looks for a substring in a string.
     Parameters:    char *string        String to search.
                    char *substring     Substring to look for.
     Return Value:  char*               Pointer to first occurence of
                                        substring in string, or null if not
                                        found.

/********* (C Standard) Memory Manager library ***********/ 
void *malloc(int size); 
     Function:      Allocates a block of memory.
     Parameters:    int size       Number of bytes to be allocated.
     Return Value:  void *         Pointer to memory block.

void *calloc(int size_el, int el_count); 
     Function:      Allocates a block of memory.  The size will be size_el
                    times el_count.
     Parameters:    int size_el    **** Jim:
                    int el_count             Turbo C manual has parameters
                                             reversed.
     Return Value:  void *         Pointer to memory block.

void free(void *pt); 
     Function:      Frees an allocated memory block.
     Parameters:    void *pt       Pointer to memory to free.
     Return Value:  none

void *memcpy(void *dest, void *source, int size); 
     Function:      Copies a block of memory.
     Parameters:    void *dest     Pointer to destination block.
                    void *source   Pointer to source block.
                    int size       Number of bytes to copy.
     Return Value:  void *         Pointer to destination block.

void *memmove(void *dest, void *source, int size); 
     Function:      Copies a block of memory, correctly copying overlapping
                    blocks.
     Parameters:    void *dest     Pointer to destination block.
                    void *source   Pointer to source block.
                    int size       Number of bytes to copy.
     Return Value:  void *         Pointer to destination block.

int memcmp(void *a, void *b, int size); 
     Function:      Compares two blocks of memory.
     Parameters:    void *a        Pointer to first memory block.
                    void *b        Pointer to second memory block.
                    int size       Number of bytes to compare.
     Return Value:  int            < 0 if a is less than b
                                   = 0 if a equals b
                                   > 0 if a is greater than b

void *memset(void *dest, int source, int size); 
     Function:      Sets a block of memory to a character.
     Parameters:    void *dest     Pointer to block of memory to set.
                    int source     Character to set the block to.
                    int size       Number of bytes to set.
     Return Value:  void *         Pointer to destination block.

/********* (C Standard) Math library ***********/ 
double  acos(double x); 
     Function:      Returns the arc cosine of x.
     Parameters:    double x
     Return Value:  

double  asin(double x); 
     Function:      Returns the arc sine of x.
     Parameters:    double x
     Return Value:  

double  atan(double x); 
     Function:      Returns the arc tangent of x.
     Parameters:    double x
     Return Value:  

double  atan2(double y, double x); 
     Function:      Returns the arc tangent of y/x.
     Parameters:    double y  
                    double x
     Return Value:  

double  ceil(double x); 
     Function:      Rounds up from x.
     Parameters:    double x
     Return Value:  

double  cos(double x); 
     Function:      Returns the cosine of x.
     Parameters:    double x
     Return Value:  

double  cosh(double x); 
     Function:      Returns the hyperbolic cosine of x.
     Parameters:    double x
     Return Value:  

double  exp(double x); 
     Function:      Returns the value of e to the xth power.
     Parameters:    double x
     Return Value:  

double  fabs(double x); 
     Function:      Returns the absolute value of x.
     Parameters:    double x
     Return Value:  

double  floor(double x); 
     Function:      Rounds down from x.
     Parameters:    double x
     Return Value:  

double  fmod(double x, double y); 
     Function:      Returns x modulo y.
     Parameters:    double x  
                    double y
     Return Value:  

double  log(double x); 
     Function:      Returns the natural logarithm of x.
     Parameters:    double x
     Return Value:  

double  log10(double x); 
     Function:      Returns log10(x).
     Parameters:    double x
     Return Value:  

double  pow(double x, double y); 
     Function:      Raises x to the power of y.
     Parameters:    double x  
                    double y
     Return Value:  

double  sin(double x); 
     Function:      Returns the sine of x.
     Parameters:    double x
     Return Value:  

double  sinh(double x); 
     Function:      Returns the hyperbolic sine of x.
     Parameters:    double x
     Return Value:  

double  sqrt(double x); 
     Function:      Returns the square root of x.
     Parameters:    double x
     Return Value:  

double  tan(double x); 
     Function:      Returns the tangent of x.
     Parameters:    double x
     Return Value:  

double  tanh(double x); 
     Function:      Returns the hyperbolic tangent of x.
     Parameters:    double x
     Return Value:  

/********* DOS library ***********/ 
ErrCode fnsplit(char *path, char *device, char *dir, 
                char *file, char *suf); 
     Function:      Breaks a filename into its components.
     Parameters:    char *path     Full name to split (max length 80).
                    char *device   Device name (including colon) is
                                   returned here (max length 3).
                    char *dir      Directory (including all backslashes) is
                                   returned here (max length 66).
                    char *file     Filename is returned here (max length
                                   9).
                    char *suf      File extender (including period) is
                                   returned here (max length 5).
     Return Value:  ErrCode

ErrCode fnmerge(char *path, char *device, char *dir, 
                char *file, char *suf); 
     Function:      Reconstructs a filename from its components (see
                    fnsplit).
     Parameters:    char *path     Reconstructed filename is returned here.
                    char *device   Device name.
                    char *dir      Directory.
                    char *file     Filename.
                    char *suf      File extender.
     Return Value:  ErrCode

Boolean DosExists(char *filename); 
     Function:      Finds out whether a file exists.
     Parameters:    char *filename      Name of file to look for.
     Return Value:  Boolean             True if file exists, otherwise
                                        false.

ErrCode DosCopy(char *source, char *dest); 
     Function:      Copies one file onto another.  (Deletes any existing
                    destination file.)
     Parameters:    char *source   Full name of file to copy.
                    char *dest     Full name of file to copy to.
     Return Value:  Errcode

ErrCode DosDelete(char *filename); 
     Function:      Deletes a file from disk.
     Parameters:    char *filename      Name of file to delete.
     Return Value:  Errcode

ErrCode DosRename(char *old, char *new); 
     Function:      Renames a file.
     Parameters:    char *old      Name of file to rename.
                    char *new      New name of file.
     Return Value:  Errcode

ErrCode SetDir(char *dir); 
     Function:      Sets the directory for the current drive.
     Parameters:    char *dir      New directory.
     Return Value:  Errcode

ErrCode GetDir(char *dir); 
     Function:      Gets directory for current drive.
     Parameters:    char *dir      Current directory is returned here.
     Return Value:  Errcode

int DirList(char ***list, char *wild, Boolean get_dirs); 
     Function:      ?????????????????
     Parameters:    char ***list   
                    char *wild     
                    Boolean get_dirs
     Return Value:  int ??????

void FreeDirList(char ***list); 
     Function:      Frees from memory list created by DirList.
     Parameters:    char ***list   ??????????????
     Return Value:  none

ErrCode LoadPoe(void **prex, char *name);
     Function:      
     Parameters:    void **prex    
                    char *name
     Return Value:  

ErrCode RunPoe(void **prex, int magic, ...);
     Function:      
     Parameters:    void **prex    
                    int magic 
                    ...
     Return Value:  

void FreePoe(void **prex);
     Function:      
     Parameters:    void **prex
     Return Value:  
