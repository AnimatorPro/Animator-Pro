#define LIB_CLOSE_RAST		0
#define LIB_PUT_DOT			1
#define _LIB_PUT_DOT		2
#define LIB_GET_DOT			3
#define _LIB_GET_DOT		4
#define LIB_PUT_HSEG		5
#define _LIB_PUT_HSEG		6
#define LIB_GET_HSEG	    7	
#define _LIB_GET_HSEG		8
#define LIB_PUT_VSEG		9
#define _LIB_PUT_VSEG		10
#define LIB_GET_VSEG		11
#define _LIB_GET_VSEG		12

#define LIB_PUT_RECTPIX		13
#define LIB_GET_RECTPIX		14

#define LIB_D_HLINE			15
#define _LIB_D_HLINE		16
#define LIB_D_VLINE			17
#define _LIB_D_VLINE		18
#define LIB_SET_RECT     	19
#define _LIB_SET_RECT     	20
#define LIB_SET_RAST     	21
#define LIB_XOR_RECT 		22
#define _LIB_XOR_RECT 		23
#define LIB_MASK1BLIT		24
#define _LIB_MASK1BLIT		25
#define LIB_MASK2BLIT		26
#define _LIB_MASK2BLIT		27

#define LIB_UNBRUN_RECT	    28
#define LIB_UNLCCOMP_RECT   29
#define LIB_UNRUN_RECT	    30
#define LIB_UNSBSRS_RECT    31



/* binary calls */

#define LIB_TO_SAME			0
#define LIB_TO_BYTEMAP		1
#define LIB_FROM_BYTEMAP	2
#define LIB_TO_OTHER		3

#define LIB_BLITRECT		32
#define LIB_TBLITRECT		36	
#define LIB_UBLITRECT		40	
#define LIB_XOR_RAST		44	
#define LIB_ZOOMBLIT		48	
#define LIB_SHRINKBLIT		52	

#define NUM_LIB_CALLS		56	


Errcode open_ramrast(RamRast *rr)
/* will allocate the parts of a ramrast, initialize libraries and setup
 * field values */

Errcode close_ramrast(RamRast *rr)
/* frees parts but does not free RamRast */

void bym_put_dot(Bytemap *v, RCOLOR color, LONG x, LONG y);
;	Clipped put dot for memory structure.

;void _bym_put_dot(Bytemap *v, RCOLOR color, LONG x, LONG y);
;	Unclipped put dot for memory structure.

;int bym_get_dot(Vscreen *v, int x, int y);
;	memory screen get dot routine.

;int _bym_get_dot(Vscreen *v, int x, int y);
;	memory screen get dot routine.

;LONG bym_put_hseg(Bytemap *r,void *pixbuf,
;	ULONG x,ULONG y,ULONG width);
;Copy pixels from memory into screen.  Returns width after clipping.

;void _bym_put_hseg(Bytemap *r,void *pixbuf,
;	ULONG x,ULONG y,ULONG width);
;Unclipped copy pixels from memory into screen.

;LONG bym_get_hseg(Bytemap *r,void *pixbuf, ULONG x,ULONG y,ULONG width);
;Get a horizontal line segment from bytmap into memory buffer.  Returns
;width after clipping

;void _bym_get_hseg(Bytemap *r,void *pixbuf, ULONG x,ULONG y,ULONG width);
;unclipped! get horizontal line segment

;LONG bym_put_vseg(Bytemap *r,void *pixbuf,
;	ULONG x,ULONG y,ULONG height);
;Copy a vertical segment.  Returns height after clipping.

;void _bym_put_vseg(Bytemap *r,void *pixbuf,
;	ULONG x,ULONG y,ULONG height);
;Copy a vertical segment. Unclipped.  

;LONG bym_get_vseg(Bytemap *r,void *pixbuf, ULONG x,ULONG y,ULONG height);
;Copy vertical segment from screen into memory buffer.  Return height after
;clipping.

void bym_get_rectpix(Bytemap *r,void *pixbuf,
 		   		        LONG x,LONG y,ULONG width,ULONG height)
/* loads all pixels from a screen rectangle into a linear buffer
 * on a line by line basis.
 * For now assumes pixsize is 1 if the rectangle is clipped garbage will
 * be in the clipped off section of the buffer (could be faster) */

static void bym_put_rectpix(Bytemap *r,void *pixbuf,
 		   		 			LONG x,LONG y,ULONG width,ULONG height)
/* loads all pixels from a linear pixel buffer into a screen rectangle 
 * on a line by line basis (could be faster) */

void bym_d_hline(Bytemap *bm, RCOLOR color, LONG minx, 
	LONG y, LONG width);
/*  Draw a horizontal line. */

void _bym_d_hline(Bytemap *bm, RCOLOR color, LONG minx, 
	LONG y, LONG width);
/* (Unclipped) draw a horizontal line. */

void bym_d_vline(Bytemap *bm, RCOLOR color, LONG x, 
	LONG miny, LONG height);
/* Draw a vertical line */

void _bym_d_vline(Bytemap *bm, RCOLOR color, LONG x, 
	LONG miny, LONG height);
/* (Unclipped) Draw a vertical line */

void bym_set_rect(Bytemap *bm,  RCOLOR color, 
				  LONG x, LONG y, ULONG width, ULONG height);
/* Draw a rectangle in a solid color */

void _bym_set_rect(Bytemap *bm,  RCOLOR color, 
				  LONG x, LONG y, ULONG width, ULONG height);
/* (Unclipped) Draw a rectangle in a solid color */

void bym_xor_rect(Bytemap *bm, RCOLOR color,
				 LONG x, LONG y, ULONG width, ULONG height);
/* Xor a rectangle with single color */

void _bym_xor_rect(Bytemap *bm, RCOLOR color,
				 LONG x, LONG y, ULONG width, ULONG height);
/* (Unclipped) Xor a rectangle with single color */

void bym_set_rast(Bytemap *v, RCOLOR color);
/* Set whole screen to a single color */

void bym_mask1blit(UBYTE *mbytes, LONG mbpr, 
			   	   LONG mx, LONG my, ULONG width, ULONG height,
			   	   Bytemap *r, LONG rx, LONG ry, 
			   	   RCOLOR oncolor );
/* Blit a single bitplane onto screen.  Where there are 1's in the
   bit-plane set the screen to 'oncolor'.  Where there are 0's do
   nothing. */
void _bym_mask1blit(UBYTE *mbytes, LONG mbpr, ...
/* (Unclipped) version of the above. */

void bym_mask2blit(UBYTE *mbytes, LONG mbpr, 
			   			  LONG mx, LONG my, ULONG width, ULONG height,
			   			  Bytemap *r, LONG rx, LONG ry, 
			   			  RCOLOR oncolor, RCOLOR offcolor );
/* Blit a single bitplane onto screen.  Where there are 1's in the
   bit-plane set the screen to 'oncolor'.  Where there are 0's set
   the screen to 'offcolor'. */
void _bym_mask2blit(UBYTE *mbytes, LONG mbpr, 
/* (Unclipped) version of the above. */

static void bym_unbrun_rect(Bytemap *r,void *ucbuf, LONG pixsize,
				 LONG x,LONG y,ULONG width,ULONG height)
/* Animator 1.0 decompress 1'st frame */

static void bym_unlccomp_rect(Bytemap *r,void *ucbuf, LONG pixsize,
				   LONG x,LONG y,ULONG width,ULONG height)
/* Animator 1.0 decompress delta frame */

/*......................Blits between 2 screens........................*/
static void bym_blitrect(Bytemap *source,			 /* source raster */
					  LONG src_x, LONG src_y,  /* source Minx and Miny */
				  Bytemap *dest,   		     /* destination raster */
				  LONG dest_x, LONG dest_y, /* destination minx and miny */
				  LONG width, LONG height)  /* blit size */  
/* Copys rectangle between two screens of the same type */

static void bym_t_blitrect(Bytemap *source,			 /* source raster */
					  LONG src_x, LONG src_y,  /* source Minx and Miny */
				  Bytemap *dest,   		     /* destination raster */
				  LONG dest_x, LONG dest_y, /* destination minx and miny */
				  LONG width, LONG height)  /* blit size */  
/* Copies rectangle TO a bytemap type screen from our type of screen */

static void bym_f_blitrect(Bytemap *source,			 /* source raster */
					  LONG src_x, LONG src_y,  /* source Minx and Miny */
				  Bytemap *dest,   		     /* destination raster */
				  LONG dest_x, LONG dest_y, /* destination minx and miny */
				  LONG width, LONG height)  /* blit size */  
/* Copies rectangle FROM a bytemap type screen to our type of screen */

static void bym_tblitrect(Bytemap *source,			 /* source raster */
					  LONG src_x, LONG src_y,  /* source Minx and Miny */
				  Bytemap *dest,   		     /* destination raster */
				  LONG dest_x, LONG dest_y, /* destination minx and miny */
				  LONG width, LONG height)  /* blit size */  
/* Copys rectangle between two screens of the same type */

static void bym_t_tblitrect(Bytemap *source,			 /* source raster */
				  LONG src_x, LONG src_y,  /* source Minx and Miny */
				  Bytemap *dest,   		     /* destination raster */
				  LONG dest_x, LONG dest_y, /* destination minx and miny */
				  LONG width, LONG height)  /* blit size */  
/* Copies rectangle TO a bytemap type screen from our type of screen */

static void bym_f_tblitrect(Bytemap *source,			 /* source raster */
				  LONG src_x, LONG src_y,  /* source Minx and Miny */
				  Bytemap *dest,   		     /* destination raster */
				  LONG dest_x, LONG dest_y, /* destination minx and miny */
				  LONG width, LONG height)  /* blit size */  
/* Copies rectangle FROM a bytemap type screen to our type of screen */


void bym_xor_rast(Bytemap *source, Bytemap *dest)
/* Xor source screen with dest screen where both source and dest are our
   type of screen */

void bym_t_xor_rast(Bytemap *source, Bytemap *dest)
/* Xor source screen TO bytemap dest screen */

void bym_f_xor_rast(Bytemap *source, Bytemap *dest)
/* Xor FROM bytemap source screen to our type of screen */

static void bym_zoomblit( Bytemap *src,			    /* source raster */
	               LONG src_x, LONG src_y,     /* source Minx and Miny */
		           Bytemap *dest,   			    /* destination raster */
	               LONG dest_x, LONG dest_y,   /* destination minx and miny */
	           	   ULONG width, ULONG height,  /* destination blit size */  
	               LONG zoom_x, LONG zoom_y )  /* zoom scalers */
/* copy source to destination expanding horizontally by zoom_x 
 * and vertically by zoom_y
 * it will assume destination size is zoom_x * width and zoom_y * height 
 * and zoom_y is always assumed to be zoom_x */
void bym_t_zoomblit( Bytemap *src, ...  /* TO Bytemap from us*/
void bym_f_zoomblit( Bytemap *src, ...  /* FROM Bytemap to us*/

static void bym_shrinkblit( Raster *src,			    /* source raster */
	         LONG src_x, LONG src_y,     /* source Minx and Miny */
	         Raster *dest,   			    /* destination raster */
             LONG dest_x, LONG dest_y,   /* destination minx and miny */
             ULONG d_width, ULONG d_height,  /* destination blit size */  
             LONG shrink_x, LONG shrink_y )  /* zoom scalers */
/* Copy from src to dest shrinking as you go... */
void bym_t_shrinkblit( Bytemap *src, ...  /* TO Bytemap from us*/
void bym_f_shrinkblit( Bytemap *src, ...  /* FROM Bytemap to us*/


