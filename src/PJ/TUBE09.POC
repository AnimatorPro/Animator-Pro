// tube.poc - a little test-bed to develop routines to
// draw efficiently with soft-edged brushes.


// Here are some data types used in code that deals with MFC
// and Windows.  Here for portability.
typedef char BYTE;
typedef int BOOL;
typedef struct {int x, y;} CPoint;
typedef struct {double x, y;} CDoublePoint;

// A little function/macro to round a double into an int.

//static inline int round(double d) { return (int)(d + 0.5); }
#define round(d) ((int)((d)+0.5))

int envValueAt(double input)
// Input is between 0 and 1.  Returns color at that position.
{
    static int *cluster = NULL;
    static int clusterSize;
    if (cluster == NULL)
        GetCluster(&clusterSize, &cluster);
    int ix = input*clusterSize;
    if (ix >= clusterSize)
        ix = clusterSize-1;
    if (ix < 0)
        ix = 0;
    return cluster[ix];
}


static void sampleEnvelope(char *buf, int w)
// Put w samples of envelope into buf.  This matches
// the sample that would come from the center of a
// brush.
{
    double x;
    double rad = w/2.0;
    int mid = w/2;
    int mid1;
    double start;
    double evenTweak;
    // Odd and even sizes are handled pretty differently...
    if (w & 1) {
        start = 0;
        mid1 = mid;
        evenTweak = 0.0;
    } else {
        start = 0.5;
        mid1 = mid-1;
        evenTweak = 0.25;
    }
    int ix = 0;
    for (x = start; x < rad; x += 1.0) {
        BYTE color;
        color = envValueAt(1.0 - (x-evenTweak)/rad);
        buf[mid+ix] = buf[mid1-ix] = color; 
        ++ix;
    }
}

static void makeCircleBrush(int xoff, int yoff, int diameter, Screen *screen)
// Make a circle brush of given size on screen.
// 
// This routine only actually calculates 1/4 of the points, and then
// reflects these into the other 3 quadrants.
// In the case of an odd-diameter the middle line just gets 
// reflected onto itself.
{
    if (diameter == 1){  // One pixel brush
        SetPixel(screen, envValueAt(1.0), xoff, yoff);
    } else {
        // The 16 bit arithmetic and the line buffer will both blow
        // if diameter is more than 255.

        // ASSERT(diameter <= 255);
        BYTE lineBuf[255];

        double x, y;
        int mid = diameter/2;
        int mid1;
        double start;
        double evenTweak;
        // Odd and even sizes are handled pretty differently...
        if (diameter & 1) {
            start = 0;
            mid1 = mid;
            evenTweak = 0.0;
        } else {
            start = 0.5;
            mid1 = mid-1;
            // This evenTweak might not be necessary if we did
            // gamma correction.  It serves to balance the difference
            // in apparent brightness between odd and even cases,
            // especially in the 2-diameter brush.  
            evenTweak = 0.25;
        }
        double rad = diameter/2.0;
        double radSquared = rad*rad;
        int iy = 0;
        for (y = start; y < rad;  y += 1.0) {
            double y2 = y*y;
            int ix = 0;
            for (x = start; x < rad; x += 1.0) {
                double distSquared = y2 + (x)*(x);
                BYTE color;
                if (distSquared <= radSquared) {
                    double dist = sqrt(distSquared);
                    color = envValueAt(1.0 - (dist-evenTweak)/rad);
                } else {
                    color = 0;
                }                            
                lineBuf[mid+ix] = lineBuf[mid1-ix] = color; 
                ++ix;
            }
            SetBlock(screen, lineBuf, xoff, yoff+mid+iy, diameter, 1);
            SetBlock(screen, lineBuf, xoff, yoff+mid1-iy, diameter, 1);
            ++iy;
        }                
    }
}

// Fractional Sample stuff.  This class manages a scan line and
// a couple of copies of the same shifted to right by fractional
// pixels.
 
// QUANT_SHIFT defines how many fractional pixels we
// deal with.  It only needs to be a power of two to
// turn a divide into a shift.
#define QUANT_SHIFT (3)
#define QUANT_LIMIT (1<<QUANT_SHIFT)

typedef struct fracSample
{
    char *lineBufs[QUANT_LIMIT+1];
    int integerWidth;
} FracSample;

void cleanupFracSample(FracSample *s)
// Deallocate memory associated with the fractional sample.
{
    int i;
    for (i=0; i<QUANT_LIMIT; ++i) {
        if (s->lineBufs[i] != NULL)
            free(s->lineBufs[i]);
    }
}

BOOL initFracSample(FracSample *s, double width)
// Set up a fractional sample buffers and fill them with
// the envelope.
{
    int i;
    s->integerWidth = width;

    // Initialize pointers to NULL for easier error 
    // recovery.
    for (i=0; i<QUANT_LIMIT; ++i)
        s->lineBufs[i] = NULL;

    // Allocate buffers with an extra byte on end for fractional
    // part.
    for (i=0; i<QUANT_LIMIT; ++i) {
        if ((s->lineBufs[i] = malloc(width+1)) == NULL) {
            cleanupFracSample(s);
            return FALSE;
        }
    }

    // Having this extra saves us some clipping time...
    s->lineBufs[QUANT_LIMIT] = s->lineBufs[QUANT_LIMIT-1];

    // Sample the first line, and put a zero for 
    // extra (fractional) byte.
    char *source = s->lineBufs[0];
    sampleEnvelope(source, width);
    source[width] = 0;

    // Calculate the other lines each shifted over a fractional
    // pixel.
    int rounder = QUANT_LIMIT/2;
    for (i=1; i<QUANT_LIMIT; ++i) {
        int j;
        int leftFrac = 0;
        source = s->lineBufs[0];
        char *dest = s->lineBufs[i];
        int inverseLimit = QUANT_LIMIT-i;
        for (j=0; j<=width; ++j) {
            int c = (source[j] & 0xff);
            int rightFrac = (inverseLimit)*c;
            *dest++ = (leftFrac + rightFrac + rounder)>>QUANT_SHIFT;
            leftFrac = i*c;
        }
    }
}

char *bufForFrac(FracSample *s, double fraction)
// Pick out the right buffer for the indicated fraction.
// Fraction better be between 0 and 1.
{
    int index = fraction*QUANT_LIMIT;
    return s->lineBufs[index];
}



void scalePointTo(CDoublePoint *p, double newSize)
// Change length of vector to newSize without changing
// it's direction.
{
    double size = sqrt(p->x*p->x + p->y*p->y);
    p->x = p->x * newSize/size;
    p->y = p->y * newSize/size;
}

static void touchDot(Screen *screen, int x, int y)
// Hilite a dot.
{
    SetPixel(screen, 255, x, y);
}

static void mostlyVerticalSoftLine(Screen *screen, CDoublePoint *origFrom, 
    CDoublePoint *origTo,  Screen *brush, int brushDiameter,
    BOOL capStart, BOOL capEnd)
// Draw the tube connecting the two brushes at the ends of a line.
{   
    // Make sure  we're drawing from top to bottom.
    if (origFrom->y > origTo->y) {
        CDoublePoint *swapp;
		swapp = origFrom;
		origFrom = origTo;
		origTo = swapp;

		// Swap which end(s) to cap as well...
		int swapi;
		swapi = capStart;
		capStart = capEnd;
		capEnd = swapi;
    }        
    
    
    // Even brushes are effectively offset half a pixel
    double evenOffset = 0.0;
    if ((brushDiameter & 1) == 0)
        evenOffset = 0.5;

    // Generate center line of tube.
    CDoublePoint fromPoint;
    fromPoint.x = origFrom->x - evenOffset;
    fromPoint.y = origFrom->y - evenOffset;
    CDoublePoint toPoint;
    toPoint.x = origTo->x - evenOffset;
    toPoint.y = origTo->y - evenOffset;

    // Figure out if going from left to right or right to left.
    int xInc;
    if (fromPoint.x < toPoint.x) {
        xInc = 1;
    } else {
        xInc = -1;
    }

    // Radius is basically half of diameter. 
    double radius = (brushDiameter) * 0.5;
    double radSquared = radius*radius;

    //CDoublePoint dir = toPoint - fromPoint;
    CDoublePoint dir;
    dir.x = toPoint.x - fromPoint.x;
    dir.y = toPoint.y - fromPoint.y;

    // The 0.999 here helps with the rounding, especially in
    // the vertical case.
    //dir.scaleTo(radius);
    scalePointTo(&dir, radius*0.999);

    //CDoublePoint v1(-dir.y, dir.x); // left perpendicular
    //CDoublePoint v2(dir.y, -dir.x); // right perpendicular
    CDoublePoint v1 = {-dir.y, dir.x};
    CDoublePoint v2 = {dir.y, -dir.x};

    //CDoublePoint fp1 = fromPoint + v1;
    //CDoublePoint fp2 = fromPoint + v2; 
    //CDoublePoint tp1 = toPoint + v1;
    //CDoublePoint tp2 = toPoint + v2;

    // Calculate tangent points. 
    CPoint fp1 = {round(fromPoint.x + v1.x), round(fromPoint.y + v1.y)};
    CPoint fp2 = {round(fromPoint.x + v2.x), round(fromPoint.y + v2.y)};
    CPoint tp1 = {round(toPoint.x + v1.x), round(toPoint.y + v1.y)};
    CPoint tp2 = {round(toPoint.x + v2.x), round(toPoint.y + v2.y)};

    // Tangent may be slightly outside of brush.  This little "dink"
    // will bring it back inside.
    double dx = fp2.x - fromPoint.x;
    double dy = fp2.y - fromPoint.y;
    if (dx*dx + dy*dy > radSquared) {
        fp2.x -= 1;
        fp1.x += 1;
        tp1.x += 1;
        tp2.x -= 1;
    }

    // Calculate the slope of the line sides and the slope
    // of the top (and bottom).
    double xyRatio = ((double)tp1.x - fp1.x)/(tp1.y - fp1.y);
    double xyTopRatio;
    if (fp1.y != fp2.y)
        xyTopRatio = ((double)fp1.x - fp2.x)/(fp1.y - fp2.y);

    // Figure out how wide the tube connecting the two brushes
    // is going to be.
    double hf = ((double)fp2.y - fp1.y)/(tp1.y - fp1.y);
    // The 0.2 in the below calculation is just because it looks better
    // to make the tube a bit too fat than a bit too skinny, and
    // because of integer rounding we're not going to hit it
    // exactly.
    double beforeX = fp1.x + (tp1.x - fp1.x) * hf;
    double exactProjWidth = fp2.x - beforeX  + 0.2;
    int projWidth = round(exactProjWidth)+1;

    // Fill a scan-line with the projection of the envelope at
    // that width.
    FracSample projection;
    initFracSample(&projection, projWidth);

    int top, bottom;
    if (xInc > 0) {
        top = fp2.y;
        bottom = tp1.y;
    } else {
        top = fp1.y;
        bottom = tp2.y;
    }

    // Draw top bit brush - bits that are completely
    // above the tube.
    int iRad = brushDiameter/2;
    int topBrushX = origFrom->x - iRad;
    int topBrushY = origFrom->y - iRad;
    int botBrushX = origTo->x - iRad;
    int botBrushY = origTo->y - iRad;
    int topBrushOffset = top - (fromPoint.y - iRad);
    if (capStart) {
	    KeyBlit(brush, 0, 0, brushDiameter, top - topBrushY, screen,
	        topBrushX, topBrushY, 0);
    }

	// Now loop from top of tube to end - copying parts of the
	// top and bottom cap potentially, and certainly filling in
	// the tube connecting the two brushes.
    int y;
    for (y = top; y<bottom; y+=1) {
        double exactX = fp1.x + xyRatio*(y-fp1.y);
        int x = (int)floor(exactX);
        char *projBuf = bufForFrac(&projection,  exactX - x);
        int xend = x + projWidth - 1;
        int projStart = 0;
        if (fp1.y != fp2.y)  {
            // Let brush be instead of tube on upper left half
            // of brush.
            int leftLimit = round(fp2.x + xyTopRatio*(y-fp2.y));
            int rightLimit = round(tp2.x + xyTopRatio*(y-tp2.y));
            if (xInc < 0) {
                int temp = leftLimit;
                leftLimit = rightLimit;
                rightLimit = temp;
            }
            if (x < leftLimit) {
                if (capStart && xInc > 0) {
                    KeyBlit(brush, 0, y - topBrushY,
                        leftLimit - topBrushX + 1, 1,   
                        screen, topBrushX, y, 0);
                } else if (capEnd && xInc < 0) {
                    KeyBlit(brush, 0, y - botBrushY,
                        leftLimit - botBrushX + 1, 1,
                        screen, botBrushX, y, 0);
                }
                projStart += leftLimit - x;
                x = leftLimit;
            }
            if (xend > rightLimit) {
                int brushX;
                if (capStart && xInc < 0) {
                    brushX = rightLimit + 1 - topBrushX;
                    KeyBlit(brush, brushX, y - topBrushY,
                        brushDiameter - brushX, 1,
                        screen, rightLimit + 1, y, 0);
                } else if (capEnd && xInc > 0 ) {
                    brushX = rightLimit + 1 - botBrushX;
                    KeyBlit(brush, brushX, y - botBrushY,
                        brushDiameter - brushX, 1,
                        screen, rightLimit+1, y, 0);
                }
                xend = rightLimit;
            }
        }
       if (x <= xend)
           SetBlock(screen, projBuf+projStart,x,y,xend-x+2,1);            
    }
    if (capEnd) {
        KeyBlit(brush, 0,  bottom - botBrushY,
            brushDiameter, botBrushY + brushDiameter - bottom,  
            screen, botBrushX, bottom, 0);
    }
    cleanupFracSample(&projection);
}

static void mostlyHorizontalSoftLine(Screen *screen, CDoublePoint *origFrom, 
    CDoublePoint *origTo,  Screen *brush, int brushDiameter,
    BOOL capStart, BOOL capEnd)
// Draw the tube connecting the two brushes at the ends of a line.
{   
    // Make sure  we're drawing from left to right
    if (origFrom->x > origTo->x) {
        CDoublePoint *swapp;
		swapp = origFrom;
		origFrom = origTo;
		origTo = swapp;

		// Swap which end(s) to cap as well...
		int swapi;
		swapi = capStart;
		capStart = capEnd;
		capEnd = swapi;
    }        
    
    
    // Even brushes are effectively offset half a pixel
    double evenOffset = 0.0;
    if ((brushDiameter & 1) == 0)
        evenOffset = 0.5;

    // Generate center line of tube.
    CDoublePoint fromPoint;
    fromPoint.x = origFrom->x - evenOffset;
    fromPoint.y = origFrom->y - evenOffset;
    CDoublePoint toPoint;
    toPoint.x = origTo->x - evenOffset;
    toPoint.y = origTo->y - evenOffset;

    // Figure out if going from left to right or right to left.
    int yInc;
    if (fromPoint.y < toPoint.y) {
        yInc = 1;
    } else {
        yInc = -1;
    }

    // Radius is basically half of diameter. 
    double radius = (brushDiameter) * 0.5;
    double radSquared = radius*radius;

    //CDoublePoint dir = toPoint - fromPoint;
    CDoublePoint dir;
    dir.x = toPoint.x - fromPoint.x;
    dir.y = toPoint.y - fromPoint.y;

    // The 0.999 here helps with the rounding, especially in
    // the vertical case.
    //dir.scaleTo(radius);
    scalePointTo(&dir, radius*0.999);

    //CDoublePoint v1(-dir.y, dir.x); // top perpendicular
    //CDoublePoint v2(dir.y, -dir.x); // bottom perpendicular
    CDoublePoint v1 = {dir.y, -dir.x};
    CDoublePoint v2 = {-dir.y, dir.x};

    //CDoublePoint fp1 = fromPoint + v1;
    //CDoublePoint fp2 = fromPoint + v2; 
    //CDoublePoint tp1 = toPoint + v1;
    //CDoublePoint tp2 = toPoint + v2;

    // Calculate tangent points. 
    CPoint fp1 = {round(fromPoint.x + v1.x), round(fromPoint.y + v1.y)};
    CPoint fp2 = {round(fromPoint.x + v2.x), round(fromPoint.y + v2.y)};
    CPoint tp1 = {round(toPoint.x + v1.x), round(toPoint.y + v1.y)};
    CPoint tp2 = {round(toPoint.x + v2.x), round(toPoint.y + v2.y)};

    // Tangent may be slightly outside of brush.  This little "dink"
    // will bring it back inside.
    double dx = fp2.x - fromPoint.x;
    double dy = fp2.y - fromPoint.y;
    if (dx*dx + dy*dy > radSquared) {
        fp2.y -= 1;
        fp1.y += 1;
        tp1.y += 1;
        tp2.y -= 1;
    }

    // Calculate the slope of the line sides and the slope
    // of the top (and bottom).
    double yxRatio = ((double)tp1.y - fp1.y)/(tp1.x - fp1.x);
    double yxSideRatio;
    if (fp1.x != fp2.x)
        yxSideRatio = ((double)fp1.y - fp2.y)/(fp1.x - fp2.x);

    // Figure out how tall the tube connecting the two brushes
    // is going to be.
    double hf = ((double)fp2.x - fp1.x)/(tp1.x - fp1.x);
    // The 0.2 in the below calculation is just because it looks better
    // to make the tube a bit too fat than a bit too skinny, and
    // because of integer rounding we're not going to hit it
    // exactly.
    double beforeY = fp1.y + (tp1.y - fp1.y) * hf;
    double exactProjHeight = fp2.y - beforeY  + 0.2;
    int projHeight = round(exactProjHeight)+1;

    // Fill a scan-line with the projection of the envelope at
    // that height.
    FracSample projection;
    initFracSample(&projection, projHeight);

    int left, right;
    if (yInc > 0) {
        left = fp2.x;
        right = tp1.x;
    } else {
        left = fp1.x;
        right = tp2.x;
    }

    // Draw top bit brush - bits that are completely
    // above the tube.
    int iRad = brushDiameter/2;
    int leftBrushX = origFrom->x - iRad;
    int leftBrushY = origFrom->y - iRad;
    int rightBrushX = origTo->x - iRad;
    int rightBrushY = origTo->y - iRad;
    int leftBrushOffset = left - (fromPoint.x - iRad);
    if (capStart) {
	    KeyBlit(brush, 0, 0, left - leftBrushX, brushDiameter, screen,
	        leftBrushX, leftBrushY, 0);
    }

	// Now loop from top of tube to end - copying parts of the
	// top and bottom cap potentially, and certainly filling in
	// the tube connecting the two brushes.
    int x;
    for (x = left; x < right; x+=1) {
        double exactY = fp1.y + yxRatio*(x-fp1.x);
        int y = (int)floor(exactY);
        char *projBuf = bufForFrac(&projection,  exactY - y);
        int yend = y + projHeight - 1;
        int projStart = 0;
        if (fp1.x != fp2.x)  {
            // Let brush be instead of tube on upper left half
            // of brush.
            int topLimit = round(fp2.y + yxSideRatio*(x-fp2.x));
            int bottomLimit = round(tp2.y + yxSideRatio*(x-tp2.x));
            if (yInc < 0) {
                int temp = topLimit;
                topLimit = bottomLimit;
                bottomLimit = temp;
            }
            if (y < topLimit) {
                if (capStart && yInc > 0) {
                    KeyBlit(brush, x - leftBrushX, 0, 
						1, topLimit - leftBrushY + 1,
                        screen, x, leftBrushY, 0);
                } else if (capEnd && yInc < 0) {
                    KeyBlit(brush, x - rightBrushX, 0,
                        1, bottomLimit - rightBrushY + 1,
                        screen, x, rightBrushY, 0);
                }
                projStart += topLimit - y;
                y = topLimit;
            }
            if (yend > bottomLimit) {
                int brushY;
                if (capStart && yInc < 0) {
                    brushY = bottomLimit + 1 - leftBrushY;
                    KeyBlit(brush, x - leftBrushX, brushY,
                        1, brushDiameter - brushY,
                        screen, x, bottomLimit + 1, 0);
                } else if (capEnd && yInc > 0 ) {
                    brushY = bottomLimit + 1 - rightBrushY;
                    KeyBlit(brush, x - rightBrushX, brushY,
                        1, brushDiameter - brushY,
                        screen, x, bottomLimit+1, 0);
                }
                yend = bottomLimit;
            }
        }
       if (y <= yend)
           SetBlock(screen, projBuf+projStart,x,y,1,yend-y+2);            
    }
    if (capEnd) {
        KeyBlit(brush,  right - rightBrushX, 0,
            rightBrushX + brushDiameter - right, brushDiameter,
            screen, right, rightBrushY, 0);
    }
    cleanupFracSample(&projection);
}



static void softLine(Screen *screen, Screen *brush, int brushDiameter, 
    CDoublePoint *pp1, CDoublePoint *pp2, BOOL capFirst)
// Draw a line with the soft-edged brush into mask.
{ 
    // Ok, some kludges cause Poco can't pass structures by value.
    CDoublePoint p1 = {pp1->x, pp1->y};
    CDoublePoint p2 = {pp2->x, pp2->y};

    int iRad = brushDiameter/2;
    if (p1.x == p2.x && p1.y == p2.y) {
        KeyBlit(brush, 0, 0, brushDiameter, brushDiameter, screen, 
            p1.x-iRad, p1.y-iRad, 0);
        return;
    }

	// Figure out difference between end points.
    int dx = p2.x - p1.x;
    if (dx < 0) 
        dx = -dx;
    int dy = p2.y - p1.y;
	if (dy < 0)
		dy = -dy;

    // Right now I'm just exploring one case - the mostly
    // vertical one...
    if (dy >= dx)  { 
        mostlyVerticalSoftLine(screen, &p1, &p2, brush, brushDiameter, 
			capFirst, TRUE);
    } else {
		mostlyHorizontalSoftLine(screen, &p1, &p2, brush, brushDiameter,
			capFirst, TRUE);
	}
}

// Global brush size for interactive part of program.
int gBrushSize;
Screen *gBrush;

void setBrushSize(int size)
// Allocate a brush...
{
    if (gBrush != NULL) 
        FreeScreen(&gBrush);

    ErrCode err = AllocScreen(&gBrush, size, size);
    if (err < 0) {
        Qerror(err, "Couldn't allocate %d pixel brush", size);
        exit(err);
    }
    makeCircleBrush(0, 0, size, gBrush);
    gBrushSize = size;
}

void showRow(int max)
// Show a whole row of brushes
{
    int width, height;
    GetSize(&width,&height);
    int x = 0, y = 0;
    int size = 1;
    for (;;) {
        if (size > max)
            break;
        if (x + size > width) {
            y += size;
            x = 0;
        }
        if (y + size > height)
            break;
        makeCircleBrush(x, y, size, GetPicScreen());
        size += 1;
        x += size;
    }           
}

void showLines(int max)
// Fill up screen with lines ranging from vertical to diagonal,
// each "max" height.
{
    Clear();
    int xstart;
    int ystart;
    xstart = ystart = gBrushSize/2 + 4;
    int xmax;
    int ymax;
    GetSize(&xmax, &ymax);
    int xoff = xstart;
    int yoff = ystart;
    int dy = max;
    int dx;
    for (dx=0; dx<=max; ++dx)  {
        int nextx = xoff + gBrushSize + dx + 1;
        if (nextx > xmax) {
            xoff = xstart;
            yoff += dy + gBrushSize + 4;
        }
        CDoublePoint p1 = {xoff,yoff};
        CDoublePoint p2 = {xoff+dx, yoff+dy};   
        softLine(GetPicScreen(), gBrush, gBrushSize, 
            &p1, &p2, TRUE);
        xoff += gBrushSize + dx + 4;
    }
}

void showLine()
// Draw a particularly troublesome line.
{
//    Clear();
    int dx = 3;
    int dy = 4;
    CDoublePoint p1 = {200,200};
    CDoublePoint p2 = {p1.x+dx, p1.y+dy};
    softLine(GetPicScreen(), gBrush, gBrushSize, 
        &p1, &p2, TRUE);
}

static void testFracSample(FracSample *s)
{
	int slope = 10;
	int i;
	for (i=0; i<100; ++i) {
		int r = i%slope;
		int d = i/slope;
		SetBlock(GetPicScreen(), 
			bufForFrac(s, (double)r/slope), 
			d, i, s->integerWidth+1, 1);
    }
}

static void testPolyLine(int x, int y)
{
    int vCount = 1;
    int nextX, nextY;
    for (;;) {
	if (!RubLine(x,y,&nextX, &nextY))
		break;
	CDoublePoint p = {x,y};
	CDoublePoint nextP = {nextX, nextY};
	softLine(GetPicScreen(), gBrush, gBrushSize, &p, &nextP,
		vCount == 1);
	++vCount;
	}
}

void main()
{
    /* Start up default brush size. */
    int size = 1;
    setBrushSize(size);

    int x,y,left,right,key;
    for (;;) {
        int oldSize = size;
        WaitClick(&x,&y,&left,&right,&key);
        key &= 0xff;
        if (key == '+' && size < 100) {
            ++size;
        } else if (key == '-' && size > 1) {
            --size;
        } else if (key == '#') {
            Qnumber(&size, 1, 255, "Set size of brush");
        } else if (key == '?')  {
            showRow(64);
            PicDirtied();
        } else if (key == '/') {
            showLines(4);
            PicDirtied();
        } else if (key == '.') {
            showLine();
            PicDirtied();
        } else if (key == 0x1b) {
            break;
        } else if (key == 'x') {
            Clear();
        } else if (key == 'i') {
            InsertFrames(1);
        } else if (key == 'f') {
            FracSample fs;
            initFracSample(&fs, 25);
            testFracSample(&fs);
            cleanupFracSample(&fs);
        } else if (key == 'p') {
            testPolyLine(x,y);
        } else if (key == 0) {
            if (right)  
                break;
            if (left) {
                int x2,y2;
                if (RubLine(x,y,&x2,&y2)) {
                    CDoublePoint p1 = {x,y};
                    CDoublePoint p2 = {x2,y2};
                    softLine(GetPicScreen(), gBrush, gBrushSize, 
                        &p1, &p2, TRUE);
                    PicDirtied();
                }
            }
        }
        /* If they've changed the size get a new brush. */
        if (size != oldSize) {
            setBrushSize(size);
        }
    }
}

