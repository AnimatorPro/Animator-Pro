**************** input structures:

	typedef short RCOLOR;	/* raster color */

	/* maybe these can values that are not valid colors for specific pens
	 * that are not a real color like RCOL_XOR ? RCOL_CLEAR ? 
	 * in true color all that is needed is one bit that isn't used */

	#define RCOL_CLEAR -1
	#define RCOL_XOR   -2


	typedef struct raster {
		FUNC  *library[]; /* pointer to array of function pointers */
		SHORT type;		
		SHORT width, height;
		SHORT aspect_dx, aspect_dy; /* aspect dx,dy such that dx by dy is a 
									 * a square */
	} Rport;

#define MAX_BITPLANES 1 /* however many we need for outside file conversions */

	typedef struct bitmap {
		Rport rh;  		   /* type always set to bitmap */
		SHORT row_bytes;	   /* bytes per row */
		SHORT num_planes;      /* number of bitplanes 1 if simply a bitplane */
		PLANEPTR bits[MAX_BITPLANES];   /* the data */
	} Bitmap;

#define MAX_BYTEPLANES 1

	typedef struct bytemap {
		Rport rh;  		   /* type always set to bitmap */
		SHORT row_bytes;	   /* bytes per row */
		SHORT num_planes;      /* number of byteplanes */
		PLANEPTR bytes[MAX_BYTEPLANES];	/* the data */
	} Bytemap;

*********** BLIT functions *******************************

Bit plane to raster blits:

	note that on all bitmap bitplane blits it is assumed that plane[0],
	is the one used.

	/* btr for bit to raster  1 for 1 color */

	btr_1blit( Bitmap *bitplane,  /* pointer to bitplane structure */
		       Rport *raster,      /* pointer to raster structure */
			   SHORT width,SHORT height, /* size to blit */
			   SHORT bitx, SHORT bity,   /* bitplane minx and miny */
			   SHORT rastx, SHORT rasty, /* raster minx and miny */
			   RCOLOR on_color,			/* color to put in raster if bit on */ 
			   SHORT invert )           /* inverts sense of bitplane on */
			  
	??? maybe on_color could be RCOL_XOR ???

	/* btr for bit to raster 2 for 2 color */

	btr_2blit( Bitmap *bitplane,  /* pointer to bitplane structure */
		       Rport *raster,      /* pointer to raster structure */
			   SHORT width,SHORT height, /* size to blit */
			   SHORT bitx, SHORT bity,   /* bitplane minx and miny */
			   SHORT rastx, SHORT rasty, /* raster minx and miny */
			   RCOLOR on_color,			/* color to put in raster if bit on */ 
			   RCOLOR off_color )		/* color to put in raster if bit off */ 

	??? maybe on_color or off_color could be RCOL_CLEAR or RCOL_XOR ???

	***********************************

	*** maybe with special colors ???? meaning

	*** RCOL_CLEAR do not insert color
	*** RCOL_XOR   xor destination

	this would allow:
		set raster to color if bits on only
		set raster to color if bits off only
		set raster to color_a if bits off set raster to color_b if bits on
		xor raster bitplane off only
		xor raster bitplane on only
		xor raster if bits off set raster to color_b if bits on
		set raster to color_a if bits off xor raster if bits on


	btr_blit( Bitmap *bitplane,  /* pointer to bitplane structure */
		      Rport *raster,      /* pointer to raster structure */
			  SHORT width,SHORT height, /* size to blit */
			  SHORT bitx, SHORT bity,   /* bitplane minx and miny */
			  SHORT rastx, SHORT rasty, /* raster minx and miny */
			  RCOLOR color_a,
			  RCOLOR color_b )

/********************************************************************/

raster to raster blits: (memory or display) */

/* copys rectangle from source to destination these should handle
 * overlapping by comparing source and dest and branching to routine
 * depending on whether they are the same or not */

blitrect(Rport source,			    /* source raster */
		 SHORT source_x, SHORT source_y, /* source Minx and Miny */
		 Rport dest,   			    /* destination raster */
		 SHORT dest_x, SHORT dest_y, /* destination minx and miny */
		 SHORT width, SHORT height )  /* blit size */  

/* copy all of source that is not tcolor to destination */

tblitrect(Rport source,			      /* source raster */
		  SHORT source_x, SHORT source_y, /* source Minx and Miny */
		  Rport dest,   			  /* destination raster */
		  SHORT dest_x, SHORT dest_y, /* destination minx and miny */
		  SHORT width, SHORT height,  /* blit size */
		  RCOLOR tcolor )			  /* source color to ignore (transparent) */

/* copy source_a to dest unless source_a is tcolor then copy source_b */

abtblit(Rport source_a,			   /* source raster a */
		SHORT srca_x, SHORT srca_y, /* source a Minx and Miny */
		Rport source_b,			   /* source raster b */
		SHORT srcb_x, SHORT srcb_y, /* source b Minx and Miny */
		Rport dest,   			  /* destination raster */
		SHORT dest_x, SHORT dest_y,  /* destination minx and miny */
		SHORT width, SHORT height, /* blit size */  
		RCOLOR tcolor )			  /* source compare color (transparent) */

/* copy all of source to all of destination that is not tcolor */

ublitrect(Rport source,			      /* source raster */
		  SHORT source_x, SHORT source_y, /* source Minx and Miny */
		  Rport dest,   			  /* destination raster */
		  SHORT dest_x, SHORT dest_y, /* destination minx and miny */
		  SHORT width, SHORT height,  /* blit size */  
		  RCOLOR tcolor )	  /* destination color not to ignore (clear) */

		  RCOLOR tcolor )			  /* source color to ignore (transparent) */


/* ???????? additional call ???? will use bitplane mask
 * if source a is null b is moved in when mask off only 
 * if b is null a is moved in when mask is on only 
 * if b and a, a is in when mask is off b is in when mask is on 
 * if a and b are null (no action) */

rr_mask_blit(Rport *dest,             /* destination raster */
		     SHORT dest_x, SHORT dest_y,   /* dest minx and miny */
		     SHORT width, SHORT height, /* size to blit */
			 Rport *source_a,         /* source to move if mask on */ 
		     SHORT srca_x, SHORT srca_y, /* source_a minx and miny */
			 Rport *source_b, 		   /* source to move if mask off */
		     SHORT srcb_x, SHORT srcb_y, /* source_b minx and miny */
			 Bitmap *mask ) 		   	   /* bitplane mask */


/* copy source to destination expanding horizontally by zoom_x 
 * and vertically by zoom_y
 * it will assume destination size is zoom_x * width and zoom_y * height */

rr_zoomblit(Rport dest,   			    /* destination raster */
		    SHORT dest_x, SHORT dest_y, /* destination minx and miny */
		    SHORT width, SHORT height, /* SOURCE blit size */  
			Rport source,			   /* source raster */
		    SHORT src_x, SHORT src_y, /* source Minx and Miny */
		    SHORT zoom_x, SHORT zoom_y )  /* zoom scalers */


***************************************************************************

SHAPES - rectangles, horizontal and vertical lines, dots.  Colors.


	/* these could use a special color RCOL_XOR ???? */

	/* xors a rectangle of raster */

	xor_rect(Rport *raster,
			 SHORT width, SHORT height
			 SHORT rast_x, SHORT rast_y)

	/* sets rectangle to color in raster */

	set_rect(Rport *raster,
			 SHORT width, SHORT height
			 SHORT rast_x, SHORT rast_y,
			 RCOLOR color )

	/* set raster horizontal line to color */

	set_hline(Rport *raster,
			  SHORT minx, SHORT y,  /* origin of line */
			  SHORT width,          /* length of line */
			  RCOLOR color )

	/* set raster vertical line to color */

	set_vline(Rport *raster,
			  SHORT x, SHORT miny,  /* origin of line */
			  SHORT height,         /* length of line */
			  RCOLOR color )


	/* set dot to color */

	set_dot(Rport *raster,
			SHORT x, SHORT y,
			RCOLOR color )

	/* get color of dot */

	RCOLOR get_dot(Rport *raster, SHORT x, SHORT y )

*******************************************************
COMPRESSION - routines used to decompress FLI's in real time.

	/* set colors on lookup table hardware color palette */

	jset_colors(SHORT start, /* first color in palette to load */
				SHORT count, /* number of colors to load */
				void *cmap) /* RGB data.  3 bytes for each color to change. 
	                           Each byte has r g or b value (0 to 63.on vga) */


	/* note that x offset enables decompressing animated cels into frame
	 * while using its raster as a moving or staionary brush */

	/* returns bytes of cline used to load compressed line into raster line */

	SHORT load_cline(void *cline,   /* start of compressed delta buffer */
					Rport *raster, /* raster to load decompressed line into */
					SHORT line,     /* y value of load line */
					SHORT startx)   /* x offset to start line load on */

	/* returns bytes of cdelt used to apply compressed delta to raster line */

	SHORT load_dline(void *cdelt,    /* start of compressed delta buffer */
					 Rport *raster, /* raster to load delta line into */
					 SHORT line,     /* y value of load line */
					 SHORT startx)   /* x offset to start line load on */


	/*	Decompress palette into color registers. returns bytes of buffer used */

	/* loads a compressed color palette into a hardware color map */

	SHORT cset_colors(void *cbuf) /* Compressed color map buffer */






Wish list, questions and comments on display driver(s) and raster definition 
structure



o -	*** definition of a raster structure for driver and other use


		We should have some common structure for all clipped entities.
	Right now Vcel and Vscreen have a common subset and this should
	be thought about.  Is MaxX and MaxY appropriate? or width and height

	struct raster {

		SHORT type;	/* type of raster ie: memory, or hardware type */	

		/* Should this be a separate structure ??
		 * Should the bounds be a struct rectangle??
		 * It is important to have these sub elements to pass to common
		 * geometry (clipping ?) subroutines or macros */

		SHORT MinX, MinY;
		SHORT MaxX, MaxY; /* or width and height ?? */
		SHORT aspect_dx, aspect_dy; /* aspect dx,dy such that dx by dy is a 
									 * square in this raster's environment */

	/* routine calling section */

		void *jumptab;
			or
		SHORT calloset;

	/* for memory type memory raster section */

		SHORT row_bytes;		/* the ubiquitous bytes per row */
		SHORT num_planes;	 	/* number of planes in image */
		PLANEPTR byteplanes[4]; /* 4 for future, RGB? HSV? etc? */
	};

typedef struct raster Rport;


o - ********** Driver Routine calling mechanism *********

		Vector table: Either this could be a  static loaded by the open call,
	or, the open call could allocate the table when open and the first entry
	would be the number of open items using this table and it would be freed
	when the last item is closed and it would only exist in the ByteRast
	structures which themselves would be allocated upon the open call.

		Maybe the open call should be provided with a pointer to an allocator
	and a freer to allocate and free the structures ?? this way it would
	be compatable with whatever code you have attached to it ?? or should
	it have its own internal allocate and free ??  I believe it should
	allocate and free the raster structures dynamicly to avoid the use of
	global statics possibly for multi-tasking, strange architectures or
	what have you.  There could be a re-open call or the open call could be 
	passed the pointer to the extant raster and if NULL would allocate and
	if there would close and re-open.
	
	*/

	static FUNC VdVects[(num_vdcalls * num_vdtypes)];

	/******* a calling mechanism using calls to functions (written in assembler)
	 ******* this has the advantage in it can be used for local jump tables or
	 ******* vectors such as "vecout" and "dotout" in parent local routines 
	 ******* It also allows the "routine cleans up convention" or different
	 ******* stack passing protocalls theso could be put in a library.
	 ******* it could be set up as macros calling a single assembler
	 		 function call_vdriver(int callno, raster, ...) but that wouldn't
			 allow for either prototype checking or for using vectors to 
			 the specific calls. I think it loses. */

	#define CALLNO X

	; ret_type specific_vdcall_for_CALLNO(ByteRast *rast,p1,p2,..pn)

	;	jump to VdVects[CALLNO + raster->calloset];
	;					(or) 
	;	jump to raster->jumptab[CALLNO];
	;


	SPECIFIC_CALL	equ	X



	JUMPVD			MACRO		CALLNO

					; load jump table address into reg
					; Vdvects[0] could be a magic number that
					;	would indicate if this an open driver or
					;	trash.
					; macro setup to accept CALLNO as a constant or 
					; ax register

					( code to setup stack, registers, message or what have you,
					  and jump to video_driver code from jumptable 
					  installed by open call)
					ENDM

	slow_vdcall		; code in JUMPVD but a call for use inside assembler 
					; smaller but slower with callno in return register ?
					; this good to use where the call is a very slow one and
					; speed not critical
					;
					; save registers used by JUMPVD
					JUMPVD	ax
					; restore registers used by JUMPVD
					ret

					public	_specific_vdcall
	_fast_vdcall
					JUMPVD	SPECIFIC_CALL
					ret

					public _slow_small_vdcall
	_slow_small_vdcall
					mov ax, SPECIFIC_CALL
					call slow_vdcall
					ret


