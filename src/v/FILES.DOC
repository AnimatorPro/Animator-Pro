:ts=8  (set tabs right for my editor...)

Picture Files (.GIF)
    GIF stands for Graphics Interchange Format (or something like that).
    It's a format developed by Compuserve Information Services (a division of
    H&R Block).  Considering that the format was developed by a network
    service that caters to all computer users it's not surprising that
    GIF files are as close to computer and resolution independent as
    we're likely to see in the next few years.  There are GIF viewers
    available for the Amiga, the Atari ST and 8 bit line, the Tandy
    Color Computer, the Apple II, the MacIntosh, Sun workstations,
    PC compatibles, and most other computers with any sort of graphics
    display at all.  There are also programs to convert from the
    more 'native' file formats (such as Degas on the ST, IFF on the Amiga,
    and MacPaint on the Mac) to GIF.  Many of these are available free
    on Compuserve.

    GIF files are also fairly densely compressed, using a modified
    Lempel-Zif-Welch 'ladder' compression scheme similar to that used
    in the popular archive programs 'arc' and 'pkarc'.  

    Unfortunately the nitty gritty details of what goes into a GIF file
    are rather complex, and much of the documentation is copywritten by
    Compuserve.  On the bright side the PICS forum (type 'go pics' at any
    exclamation mark prompt) on Compuserve will provide this and much
    else in the way of useful information to graphics programmers willing
    to fill out a simple developer's registration form.

Cel Files (.CEL and .PIC)
    A cel file is a 32 byte header followed by the uncompressed color map
    (768 bytes) followed by the uncompressed pixel image.  
    Here is the header -
	Byte Offset	 Contents
	     0		    Magic Number - 9119 Hexadecimal
	     2		    Width of cel
	     4		    Height of cel
	     6		    Horizontal screen position of upper left corner
	     8		    Vertical screen position
	     10		    How many bits in a pixel - 8 in other words
	     11		    compression type - always 0 for uncompressed
	     12		    size in bytes of cel image - a 4 byte long word
	     16		    16 bytes of zero reserved for future use.
    A .PIC file uses the same format, with width and height 320x200 and
    screen position 0x0.  (PIC files are generated if you supply a .PIC
    file suffix while loading or saving a single frame.  Otherwise a
    GIF file is made.)

Palette Files (.COL)
   A color file is just a binary image of the color palette.  It
   consists of 768 bytes - 3 bytes for each color.  Each byte has
   a value from 0 to 63.  The red byte comes first, then the green,
   then the blue.


Mask Files (.MSK)
   A mask file is is a 8000 byte file.  It contains one bit for each
   pixel of the screen.  It goes from left to right top to bottom.

Text Files (.TXT)
   These are just ordinary ascii files.

Font Files (.FNT)

   Font files are a slightly strange hybrid.  They started out as
   the same type of file that GEM on the ST uses.  Some additions were
   made to make it easier to convert MacIntosh fonts to a format Video
   Paint could use.  My apologies for creating yet another font file
   format for the PC (this only makes about 12 I know of....), especially
   as I don't completely understand this one myself!

   At any rate a font file starts out with an 88 byte header.  This is 
   followed by up to three tables of various sizes.  
	Byte Offset	 Name		Meaning
		0	  id		 Identifier.  Hex 9000 if Mac-converted
		2	  size		 Point size of font.  Not used by
					 Vpaint
		4         facename	 32 byte name of font.  Not used by
					 Vpaint
		36        ADE_lo	 Lowest ascii character in font.  
					 More often than not 20 hex (space)
		38        ADE_hi	 Highest character in font.
		40	  top_dist	 unknown, unused by Vpaint
		42	  asc_dist	 unknown, unused by Vpaint
		44	  hlf_dist	 unknown, unused by Vpaint
		46	  des_dist	 unknown, unused by Vpaint
		48	  bot_dist	 unknown, unused by Vpaint
		50	  wchr_wdt	 widest character width
		52	  wcel_width	 widest 'cell' width (includes distance
					 to next character)
		54	  lft_ofst	 unknown, unused by Vpaint
		56	  rgt_ofst	 if Mac font, is negative of Mac
					 maxKern value.  Else unknown & unused.
		58	  thckning	 How bold is bold? Unused by Vpaint
		60	  undrline	 How far down to underline? Unused by V
		62	  lghtng_m	 Lightening mask. Mask for light style
					 Unused by Vpaint
		64	  skewng_m	 Skewing mask for italics.  Rotate line
					 on a 1 bit.  Unused by Vpaint
		66	  flags		 Will swap bytes of image if bit 2 is
					 non-zero.  (Part of DRI's attempt to
					 make 8086/68000 work together).
		68	  hz_ofst	 Unknown, unused in Vpaint
		72	  ch_ofst	 Unknown, unused in Vpaint
		76	  fnt_dta	 Unknown, unused in Vpaint
		80	  frm_wdt	 Byte width of bitmap
		82	  frm_hgt	 Pixel height of bitmap
		84	  nxt_fnt	 Unknown, unused in Vpaint

   The first table is a series of 16 bit words containing the horizontal 
   offset into the font bitmap image of the start of each letter.  The 
   width of the letter is calculated by subtracting the offset of the next 
   character from the offset of current character.  There's one offset for 
   each character in the font, plus an extra one to give the width of the 
   last character.  This table is always present.

   The second table contains the font image.  This is a single bit-map
   for the whole font (as opposed to a series of bitmaps one for each
   character).   This table is always present.

   The third table is only present in fonts we've translated from the
   MacIntosh.   It is present if the id field in the header is hexadecimal
   9000.  There are two bytes for each character in the font.  If both
   bytes are FF hexidecimal it is a 'missing character', and will not
   be drawn.  The first byte is added to the rgt_ofst field of the header
   to tell us how many pixels to move to the right (or left if the result
   is negative) before drawing this character.  The second byte is how many 
   pixels to move to the right after drawing this character.



Polygon and Path files (.PLY)
   A polygon file is  an 8 byte header followed by 6 bytes for each point
   of the polygon (2 bytes each x,y,z with z always zero currently).
   Here is the header -
	Byte Offset	 Contents
	     0		    16 bit point count
	     2		    4 bytes of zero
	     6		    1 if polygon closed, 0 otherwise
	     7		    Magic number - hex 99


Optics Files (.OPT)
   An optics file is a 4 byte header followed by a series of optical
   moves records of 50 bytes each.  Each time you click on 'continue move'
   in the optics menu another record is generated. Here's the format 
   for the header:
	Byte Offset	 Contents
	     0		    Magic Number - 1A3F Hexadecimal
	     2		    # of moves in this file.  16 bit count
   Here's the format for an individual record
	Byte Offset	 Contents
	     0		    4 bytes of zero (room for pointer to next record
	     		    when it's loaded into memory)
	     4		    Spin center.  x/y/z location 16 bits for each
	     10		    Spin axis.  x/y/z location 16 bits each
	     16		    Spin turns  x/y/z 16 bits each
	     22		    Intermediate turns.  Two 16 bit words.  Values
	     		    for conjugation matrix that corresponds to spin
			    axis
	     26		    Size center x/y/z location 16 bits each
	     32		    x multiplier - together with x divisor determines
	     		    how to stretch along x (horizontal) dimension
	     34		    x divisor
	     36		    y multiplier
	     38		    y divisor
	     40		    both multiplier - applied to both x and y 
	     		    dimensions
	     42		    both divisor
	     44		    linear move x/y/z offset 16 bits each



Record Files (.REC)
   A record file is a 16 byte header followed by any number of 
   8 byte input records.  The header format is:
	Byte Offset	 Contents
	     0		    Magic Number - 0713 Hexadecimal
	     2	  	    long word (4 byte) count of # of input records
	     6		    4 bytes of 0 
	     10		    1 if real-time macro, 0 otherwise
	     11		    5 bytes of 0

   The format of a input record is:
	Byte Offset	 Contents
	     0		    Time (in 70th of second) from last record
	                    if real-time, 0 otherwise.
	     1		    Mouse button state.  Bit 0 is left button, 
	      		    bit 1 is right button.  (ie value is 3 if
			    both buttons down, 1 if only left button,
			    0 if no buttons down.)
	     2		    16 bit keyboard code if key pressed, 0 otherwise.
	     4		    16 bit mouse horizontal position
	     6		    16 bit mouse vertical position


Settings Files  (.SET)
	I've decided to keep this file type proprietary, mostly because
	it changes with every version of the program.   Contains about
	500 little flags telling how to arrange the menus, which buttons
	are hilit, and various other state/mode information.


Flic Files (.FLI)
	A FLI file is a 128 byte header followed by a sequence of frames.
	The first frame is compressed using a simple-minded byte-run-length
	compression scheme, or occassionally stored uncompressed.  Subsequent
	frames are stored as the difference from the previous frame (or
	again occassionally uncompressed).  There is one extra frame at the
	end of a FLI which contains the difference between the last frame and
	the first frame.

	Though the details of a FLI are moderately complex, the key idea
	behind it is simple: don't bother storing the parts of a frame that
	are the same as the last frame.  Not only does this save space, but
	it's very quick - for it's faster to leave a pixel alone than to
	set it.

	(God, Gary, and AutoDesk willing) source code for a simple program
	in Turbo C and Assembler that plays a FLI is in the quickfli folder
	of your VPaint disk.   However there follows an attempt to explain
	the format in English and numbers for people allergic to C or
	terminally curious.

	The FLI header:

	byte offset	size	name	meaning
	0		4	size	Length of file, for programs that want
					to read FLI all at once if possible.
	4		2	magic   Set to hex AF11.  Pretty please use
					another value here if you change format
					(even to a different resolution) so
					Video Paint won't crash trying to
					read it.
	6		2	frames	Number of frames in FLI.  FLI's
					longer than 4000 frames will 
					do bad things to Vpaint.
	8		2	width	Screen width.  320.
	10		2	height  Screen height. 200.
	12		2	depth	Depth of a pixel.  8.
	14		2	flags	Set this to 0 please.
	16		2	speed	How many video ticks between frames
	18		4	next	Set to 0
	22		4	frit	Set to 0
	26		102	expand  All zeroes - for future enhancement.

	Next we come to the frames.  Each frame has a header too:

	byte offset	size	name	meaning
	0		4	size    Bytes in this frame.  Vpaint 
					demands this be less than 64K.
	4		2	magic   Always hexadecimal F1FA
	6		2	chunks  Number of 'chunks' in frame.
	8		8	expand  Space for future enhancements.  All 0.

	After the frame header comes the chunks that make up the frame.  
	First comes a color chunk if the color map has changed from last
	frame.  Then comes a pixel chunk if the pixels have changed.  If
	the frame is absolutely identical to the last frame there will be
	no chunks at all.

	A chunk itself has a header, followed (at long last) by the
	data.  The chunk header is fortunately pretty minimal:

	byte offset	size	name	meaning
	0		4	size    Bytes in this chunk.
	4		2	type    What sort of chunk is this?

	There are currently 5 types of chunks you'll see in a FLI
	file.  (We went through about 10 more types in the quest for the
	perfect video compression scheme).

	number	name		meaning
	11	FLI_COLOR	compressed color map
	12	FLI_LC		'line compressed' - the most common type
				for any but the 1st frame.  Pixel difference
				from previous frame.
	13	FLI_BLACK	set whole screen to color 0 (rare first frame)
	15	FLI_BRUN	byte-run-length compression - first frame only
	16	FLI_COPY	indicates uncompressed 64000 bytes soon to
				follow.  For those times when compression
				just doesn't work!

	The compression schemes are all byte-oriented.  If the compressed
	data ends up being an odd length a single pad byte is inserted
	so that the FLI_COPY's always start at an even address for
	faster DMA.

	FLI_COLOR Chunks -
	The first byte says how many packets are in this chunk.
	This is followed directly by the packets.  The first byte
	of a packet says how many colors to skip.  The next byte
	says how many colors to change.  If this byte is zero it is
	interpreted to mean 256.  Next follows 3 bytes
	for each color to change (one each for red green blue).


	FLI_LC Chunks - 
	This is the most common, and alas, most complex chunk.  
	The first WORD (16 bits) is the number of lines starting from
	the top of the screen that are the same as the previous frame.
	(If there is motion only on the bottom line of screen you'd
	have a 199 here.)  The next WORD is the number of lines
	that do change.  Next there is the data for the changing lines
	themselves.  Each line is compressed individually (which makes
	it much easier to play back the FLI 1/4 size among other things.)

	The first byte of a compressed line is the number of packets
	in this line.  If the line is unchanged from the last frame this
	is zero.  The format of an individual packet is:
		skip_count	size_count	data
	The skip count is a single byte.  If more than 255 pixels are
	to be skipped it must be broken into 2 packets.
	The size-count is also a byte.  If it is positive then that many
	bytes of data follow, and are copied to the screen.  If it's 
	negative a single byte follows, and is repeated -skip_count times.

	In the worst case a FLI_LC frame can be about 70K.  If it comes
	out to be 60000 bytes though Vpaint decides it's not worth it
	to compress, and saves the frame as FLI_COPY.

	FLI_BLACK Chunks
	These are very simple.  There is no data associated with them at all.
	In fact they are only generated for the first frame in Vpaint after
	you select 'video/new'.

	FLI_BRUN  Chunks
	These are much like FLI_LC chunks without the skips.  They start
	immediately with the data for the first line, and go line by
	line from there.  The first byte contains the number of packets
	in that line.  The format for a packet is:
		size_count	data
	If size_count is positive the data consists of a single byte
	which is repeated size_count times.
	If size_count is negative there is -size_count bytes of data
	which is copied to the screen.
	If the 'compressed' data shows signs of exceeding 60000 bytes
	the frame is stored as FLI_COPY instead.

	FLI_COPY Chunks
	These are 64000 bytes of data suitable for direct reading onto
	the screen.








