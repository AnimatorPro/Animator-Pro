
Autodesk Animator Graphics Primitives.

BLITS - all the blit routines clip to the destination which is assumed to
        be screen sized.

a1blit - a1blit.asm
	Blit from single bit-plane source to byte-a-pixel destination.
	1's in source are set to color in destination.  0's in source 
	have no effect on destination.  Used to implement menu icons,
	most text, and the cursor.  
a1blit(width, height, sx, sy, sp, sline_bytes, dx, dy, dp, dline_bytes, color)
int width;		/* width of blit in pixels */
int height;		/* height of blit in pixels */
int sx, sy;		/* coordinates of upper left corner of source */
UBYTE *sp;		/* pointer to source bit-plane */
int sline_bytes; /* How many bytes from one line of source to next */
int dx, dy;		/* coordinates of upper left corner of destination */
UBYTE *dp;		/* pointer to destination byte-plane */
int dline_bytes; /* How many bytes from one line of destination to next */
int color;		/* Color 1's in source are set to in destination */



a2blit - a2blit.asm
	Blit from single bit-plane source to byte-a-pixel destination.
	1's in source are set to foreground color in destination.  0's in source 
	are set to background color in destination.  Used to implement text
	in string requestors and in places where one message writes over another.
a2blit(width, height, sx, sy, sp, sline_bytes, dx, dy, dp, dline_bytes, 
	fore_color, back_color)
int width;		/* width of blit in pixels */
int height;		/* height of blit in pixels */
int sx, sy;		/* coordinates of upper left corner of source */
UBYTE *sp;		/* pointer to source bit-plane */
int sline_bytes; /* How many bytes from one line of source to next */
int dx, dy;		/* coordinates of upper left corner of destination */
UBYTE *dp;		/* pointer to destination byte-plane */
int dline_bytes; /* How many bytes from one line of destination to next */
int fore_color;		/* Color 1's in source are set to in destination */
int back_color;		/* Color 0's in source are set to in destination */



blit8 - blit8.asm
	This blits from a byte-plane source to a byte-plane destination.
	It does not handle overlapping source and destination.  This is
	used all over the place:  to save and restore what is under the 
	cursor or under a menu,  to paste the cel when key color clear is
	turned off,  etc.
blit8(width, height, sx, sy, sp, sline_bytes, dx, dy, dp, dline_bytes) 
int width;		/* width of blit in pixels */
int height;		/* height of blit in pixels */
int sx, sy;		/* coordinates of upper left corner of source */
UBYTE *sp;		/* pointer to source byte-plane */
int sline_bytes; /* How many bytes from one line of source to next */
int dx, dy;		/* coordinates of upper left corner of destination */
UBYTE *dp;		/* pointer to destination byte-plane */
int dline_bytes; /* How many bytes from one line of destination to next */



tblit8 - tblit8.asm
	Blit from byte-plane source to byte-plane destination with a transparent
	color.  (Pixels that are transparent color in source are not copied.)
	This is used to paste the cel when key color clear is turned on.
	Also by the optics, etc.
tblit8(width, height, sx, sy, sp, sline_bytes, dx, dy, dp, dline_bytes,
	tcolor) 
int width;		/* width of blit in pixels */
int height;		/* height of blit in pixels */
int sx, sy;		/* coordinates of upper left corner of source */
UBYTE *sp;		/* pointer to source byte-plane */
int sline_bytes; /* How many bytes from one line of source to next */
int dx, dy;		/* coordinates of upper left corner of destination */
UBYTE *dp;		/* pointer to destination byte-plane */
int dline_bytes; /* How many bytes from one line of destination to next */
int tcolor;		/* transparent color in source */



ublit8 - ublit8.asm
	Blit from byte-plane source under byte-plane destination.
	(Only pixels in destination that are transparent are changed.)
	This is used by paste below.
ublit8(width, height, sx, sy, sp, sline_bytes, dx, dy, dp, dline_bytes,
	tcolor) 
int width;		/* width of blit in pixels */
int height;		/* height of blit in pixels */
int sx, sy;		/* coordinates of upper left corner of source */
UBYTE *sp;		/* pointer to source byte-plane */
int sline_bytes; /* How many bytes from one line of source to next */
int dx, dy;		/* coordinates of upper left corner of destination */
UBYTE *dp;		/* pointer to destination byte-plane */
int dline_bytes; /* How many bytes from one line of destination to next */
int tcolor;		/* transparent color in destination */



tmove8 - tmove8.asm
	Blit from byte-plane source to byte plane destination if the source
	is not clear color, if it is clear color copy pixel from undo buffer
	instead.  This is used to interactively move the cel around without
	there being too much flickering.
tmove8(width, height, sx, sy, sp, sline_bytes, dx, dy, dp, dline_bytes,
	tcolor, up) 
int width;		/* width of blit in pixels */
int height;		/* height of blit in pixels */
int sx, sy;		/* coordinates of upper left corner of source */
UBYTE *sp;		/* pointer to source byte-plane */
int sline_bytes; /* How many bytes from one line of source to next */
int dx, dy;		/* coordinates of upper left corner of destination */
UBYTE *dp;		/* pointer to destination byte-plane */
int dline_bytes; /* How many bytes from one line of destination to next */
int tcolor;		/* transparent color in source */
UBYTE *up;		/* pointer to undo byte-plane.  Assumed same format as
                   source plane.  Restore transparent pixels from here. */


ZOOM BLITS - used to make fat bits.  Beware the width parameter in source
  terms and the height parameter in destination terms.  Has some '320's
  hard coded in when I was brain-dead.   No clipping done here.

zoomblit - zoomblit.asm
	Move a rectangular area, expanding pixels in source to 2x2 pixel blocks
	in destination.  Currently this routine is only used and tested for 
	source width equal to half screen (dest width full screen).
zoomblit(swidth, dheight, sx, sy, sp, sline_bytes, dx, dy, dp, dline_bytes)
int swidth;		/* width of source in pixels */
int dheight;	/* height of destination in pixels */
int sx, sy;		/* coordinates of upper left corner of source */
UBYTE *sp;		/* pointer to source byte-plane */
int sline_bytes; /* How many bytes from one line of source to next */
                 /* Routine currently uses 320 some places instead.  Yuck! */
int dx, dy;		/* coordinates of upper left corner of destination */
                /* If dy is odd, 1st line is not doubled. */
UBYTE *dp;		/* pointer to destination byte-plane */
int dline_bytes; /* How many bytes from one line of destination to next */



zoom4blit - zoom4bli.asm
	Move a rectangular area, expanding pixels in source to 4x4 pixel blocks
	in destination.  Currently this routine is only used and tested for 
	source width equal to quarter screen (dest width full screen).
zoom4blit(swidth, dheight, sx, sy, sp, sline_bytes, dx, dy, dp, dline_bytes)
int swidth;		/* width of source in pixels */
int dheight;	/* height of destination in pixels */
int sx, sy;		/* coordinates of upper left corner of source */
UBYTE *sp;		/* pointer to source byte-plane */
int sline_bytes; /* How many bytes from one line of source to next */
                 /* Routine currently uses 320 some places instead.  Yuck! */
int dx, dy;		/* coordinates of upper left corner of destination */
                /* If dy is not divisible by 4, 1st line partial. */
UBYTE *dp;		/* pointer to destination byte-plane */
int dline_bytes; /* How many bytes from one line of destination to next */


SHAPES - rectangles, horizontal and vertical lines, dots.  Colors.

xorblock - cblock.asm
	Exclusive or a rectangle with color.  Clipped to fit 320x200 screen.
	Used for text cursor.
xorblock(screen, x, y, width, height, color);
UBYTE *screen;	/* Byte plane to draw on */
int x,y;		/* Upper left corner of rectangle */
int width, height;  /* dimensions of rectangle in pixels */
int color;		/* Color to xor with block */


cblock - cblock.asm
	Draw a rectangle in a solid color.  Clipped to fit 320x200 screen.
	Used heavily by menu drawing routines.
cblock(screen, x, y, width, height, color)
UBYTE *screen;	/* Byte plane to draw on */
int x,y;		/* Upper left corner of rectangle */
int width, height;  /* Dimensions of rectangle in pixels */
int color;		/* Color to set block */


chli - cblock.asm
	Draw a horizontal line in a solid color.  Not clipped.  Used by
	menu routines.
chli(screen, x, y, width, color)
UBYTE *screen;	/* Byte plane to draw on */
int x,y;		/* Left end of line */
int width;  	/* Width of line */
int color;		/* Color of line */


cvli - cblock.asm
	Draw a vertical line in a solid color.  Not clipped.  Used by
	menu routines.
cvli(screen, x, y, height, color)
UBYTE *screen;	/* Byte plane to draw on */
int x,y;		/* Upper end of line */
int height;  	/* Height of line */
int color;		/* Color of line */



cdot - cblock.asm
	Draw a single pixel dot.  Clipped to 320x200.
cdot(screen, x, y, color)
UBYTE *screen;	/* Byte plane to draw on */
int x,y;		/* Screen position */
int color;		/* Dot color */



getd - cblock.asm
	Return color of pixel.   Not clipped.
getd(screen, x, y)
UBYTE *screen;	/* Byte plane to read from */
int x,y;		/* Screen position */



jset_colors - int.asm
	Set a bunch of colors in the palette (usually all 256).
jset_colors(start, count, data)
int start;	/* First color in palette to effect */
int count;  /* Number of colors to change */
UBYTE *data; 	/* RGB data.  3 bytes for each color to change.  Each
                   byte has values from 0 to 63. */


COMPRESSION - routines to decompress FLI's in real time.

unlccomp - comp.asm
	Used to decompress all but the first frame.  It's a 'delta' scheme
	where pixels that are the same as the last frame are skipped over.
unlccomp(cbuf, screen)
UBYTE *cbuf;	/* compressed source.  See fli.doc for details. */
UBYTE *screen;	/* Byte-plane to update. */



fcuncomp - comp.asm
	Decompress palette into a buffer in memory.
fcuncomp(cbuf, palette)
UBYTE *cbuf;	/* Compressed color source.  See fli.doc for details. */
UBYTE *palette;	/* Destination buffer.  256*3 bytes long. */



cset_colors - comp.asm
	Decompress palette into color registers.
cset_colors(cbuf)
UBYTE *cbuf;	/* Compressed color source.  Same as fcuncomp. */



unbrun - unbrun.asm
	Decompress 1st frame full size.
unbrun(cbuf, screen, linect)
UBYTE *cbuf;	/* Compressed source.  See fli.doc for details. */
UBYTE *screen;  /* Byte plane to decompress onto. */
int linect;		/* Number of lines of screen (always 320 now.) */



