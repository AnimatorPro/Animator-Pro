int otoobig(void);
int default_center(Vertex *v);
int iscale_theta(void);
int ado_xyz_slider(Flicmenu *m);
int xyz_zero_sl(Flicmenu *m);
int mado_preview(void);
int mauto_ado(void);
int qload_a3d(void);
int qsave_a3d(void);
int mview_path(void);
int edit_path(void);
int move_along(Flicmenu *m);
int go_ado(void);
int a3d_disables(void);
int arrange_a3d_menu(void);
int set_ado_asterisks(void);
int a3d_pull_disables(void);
int free_alt(void);
int grab_alt(void);
int swap_alt(void);
int arctan(int x,int y);
int arcnorm(int t);
int pmhmpauto(Vector what);
int hmpauto(Vector what);
int uzauto(Vector what);
int clear_pic(void);
int auto_blue_nums(void);
int auto_trails(void);
int greys_only(void);
int auto_engrave(void);
int auto_dither(void);
int auto_put(void);
int auto_set(void);
int crop_video(void);
int auto_shrink(void);
int quantize(void);
int auto_expand(void);
int dauto(Vector rvec,int frame_mode);
int clip_tseg(void);
int find_seg_range(void);
int find_range(void);
int calc_time_scale(int ix,int intween);
int auto_apply(Vector rvec,int ix,int intween);
int dopreview(Vector rvec);
int doauto(Vector rvec);
int dseg(Vector rvec);
int qsave_backwards(void);
int bclose(Bfile *bf);
int bopen(char *name,Bfile *bf);
int bcreate(char *name,Bfile *bf);
int bflush(register Bfile *bf);
int bseek(Bfile *bf,long offset,int mode);
int bputbyte(register Bfile *bf,unsigned char c);
int bwrite(register Bfile *bf,unsigned char *buf,int count);
int bgetbyte(register Bfile *bf);
int bread(register Bfile *bf,unsigned char *buf,int count);
int qblue_pic(void);
int qunblue_pic(void);
int insert_tween(void);
int clean_tween(void);
int qget_changes(void);
int qnext_changes(void);
int qnext_blue(void);
char *browse_files(char *say,char *button);
int go_browse(void);
int free_cel(Vcel *c);
Vcel *alloc_cel(unsigned w,unsigned h,unsigned x,unsigned y);
Vcel *clone_cel(Vcel *s);
int show_cel_a_sec(void);
int load_cel(char *name);
int find_clip(Vscreen *screen,int tcolor);
int clip_cel(void);
int dupe_cel(void);
int set_zero_clear(void);
int cmaps_same(UBYTE *s1,UBYTE *s2);
int cfit_cel(Vcel *c,PLANEPTR dcmap);
int need_fit_cel(Vcel *c);
int make_ccc(void);
int free_ccc(void);
int move_cel(void);
int paste_cel(void);
int upaste_cel(void);
int move_tool(void);
int vmask_cel(void);
int free_cfont(void);
int load_install_font(char *fname);
int grab_usr_font(void);
int qchoice(char *header,char **choices,int ccount);
int qmenu(char *header,char **choices,int ccount,Vector *feelers);
int ccircle(int xcen,int ycen,int rad,Vector dotout);
int config_ints(void);
int unconfig_ints(void);
int old_video(void);
int uninit_sys(void);
int cline(int x1,int y1,int x2,int y2,Vector dotout);
int cmap_to_cluster(unsigned char *cmap,int ccount);
unsigned char *cluster_to_cmap(void);
int ccycle(void);
int cl_cut(void);
int feel_pp(Flicmenu *m);
int get_a_end(Vector dfunc);
int cl_paste(void);
int cl_blend(void);
int some_cmod(Vector f,int scale);
int ctint(void);
int cneg(void);
int force_ramp(void);
int cclose(void);
int cluster_invert(void);
int cluster_reverse(void);
int cluster_line(void);
int cunused(void);
int qselect_bundle(void);
int find_ramp(void);
int mselect_bundle(Flicmenu *m);
int change_cluster_mode(Flicmenu *m);
int see_powell_palette(Flicmenu *m);
int ping_cluster(void);
int cl_swap(void);
int right_click_pp(Flicmenu *m);
short gif_compress_data(int min_code_size);
int path_temps(char c);
int rewrite_config(void);
int new_config(void);
int pack_cmap(PLANEPTR source,long scount,PLANEPTR dest,int dcount);
int cpack(void);
int csort(void);
int cthread(void);
int cspec(void);
int rthread_cmap(PLANEPTR gotit,PLANEPTR scmap,PLANEPTR dcmap,int inertia,int ccount);
int dumptofile(char *name,unsigned char *pt,int count);
int gif_decoder(int linewidth);
int init_de(void);
int venetian_tween(Vscreen *s2,Vscreen *d,int tix,int tcount);
int dissolve_tween(Vscreen *s2,Vscreen *d,int tix,int tcount);
int diskd_tween(Vscreen *s2,Vscreen *d,int tix,int tcount);
int change_dev(int newdev);
int change_dir(char *name);
int get_device(void);
int get_devices(void);
int valid_device(int d);
int make_current_drawer(void);
int make_dir(char *name);
long dfree(int d);
char *ink_word(void);
int force_opaque(Flicmenu *m);
int see_cur_ink(Flicmenu *m);
int ovalf_tool(void);
unsigned *fccomp(char *s1,char *s2,unsigned *cbuf,unsigned count);
int hang_child(Flicmenu *m);
int clip_rmove_menu(Flicmenu *m,int dx,int dy);
int rmove_menu(Flicmenu *m,int dx,int dy);
int bottom_menu(Flicmenu *m);
int move_menu(Flicmenu *m);
int repeat_on_pdn(Vector v);
int close_menu_bad(void);
int close_menu(void);
int do_pmenu(Flicmenu *m,Flicmenu *s);
int hfs_do_menu(Flicmenu *m);
int do_menu(Flicmenu *m);
int nod_do_menu(Flicmenu *m);
int upc_char(unsigned char c);
int menu_keys(Flicmenu *m);
int sub_menu_loop(Vector selit,Vector penfunc);
int in_menu(Flicmenu *m);
int rsel(register Flicmenu *m);
int toggle_group(Flicmenu *m);
int change_mode(Flicmenu *m);
int tog_pen(void);
int toggle_pen(Flicmenu *m);
int new_dev(Flicmenu *m);
int go_rootdir(Flicmenu *m);
int go_updir(Flicmenu *m);
int type_file_name(Flicmenu *m);
int undo_file(Flicmenu *m);
int undo_drawer(Flicmenu *m);
int fsel_name(Flicmenu *m);
int fq_drawer_stringq(Flicmenu *m);
int fq_toggle_wild(Flicmenu *m);
int fq_wild_stringq(Flicmenu *m);
int fq_ok(void);
int build_wild_list(void);
int make_path_name(char *drawer,char *file,char *path);
int got_suffix(char *f);
int remove_suffix(char *s);
int fq_ok_plus(void);
int hook_devices(Flicmenu *m,int buttons);
char *get_filename(char *prompt,char *suffix);
int go_files(int type);
long add_up_frames(void);
long flx_file_hi(void);
long ff_tflx(long size,int xcount,Flx *xpt);
long find_free_tflx(long size);
int notafli(char *name);
int not_fli_frame(void);
int uncompfli(Vscreen *f,struct fli_frame *frame,int colors);
int gb_unfli(Vscreen *f,int ix,int wait,struct fli_frame *frame);
int unfli(Vscreen *f,int ix,int wait);
int read_fli_head(char *title,struct fli_head *flih);
int check_fli(char *title);
int gb_read_next_frame(char *fname,int fd,Vscreen *fscreen,struct fli_frame *fliff,int colors);
int read_next_frame(char *fname,int fd,Vscreen *fscreen,int colors);
int load_fli(char *title);
int wrap_frame(int frame);
int check_loop(void);
int advance_frame_ix(void);
int mlast_frame(void);
int prev_frame(void);
int mprev_frame(void);
int first_frame(void);
int mfirst_frame(void);
int next_frame(void);
int mnext_frame(void);
int playit(void);
int mplayit(void);
int flip_range(void);
int loop_range(void);
int flip5(void);
int gb_fli_tseek(Vscreen *screen,int cur_ix,int new_ix,char *fbuf);
int fli_tseek(Vscreen *screen,int cur_ix,int new_ix);
int fli_abs_tseek(Vscreen *screen,int new_ix);
int fill(unsigned x,unsigned y);
int flood(unsigned x,unsigned y,unsigned endcolor);
int fake_push(void);
int push_screen(void);
int load_temp_cel(void);
int push_cel(void);
int pop_screen(void);
int pop_cel(void);
int push_most(void);
int push_pics(void);
int pop_most(void);
int pop_pics(void);
int check_loaded_screen(void);
int maybe_push_most(void);
int maybe_pop_most(void);
int push_inks(void);
int ink_push_cel(void);
int ink_pop_cel(void);
int pop_inks(void);
int gel_tool(void);
int find_conjugates(struct ado_setting *function);
int see_cmap(void);
int copy_form(Vscreen *s,Vscreen *d);
int xor_form(Vscreen *s,Vscreen *d);
int exchange_form(Vscreen *s,Vscreen *d);
int color_form(Vscreen *f,int color);
int zero_lots(register char *pt,long size);
int clear_form(Vscreen *f);
int draw_frame(int color,int x0,int y0,int x1,int y1);
int sscale_by(int x,int p,int q);
int uscale_by(unsigned x,unsigned p,unsigned q);
int rscale_by(int x,int p,int q);
long count_cused(register PLANEPTR c,register long i);
int make_cused(PLANEPTR p,PLANEPTR c);
int exchange_bytes(char *a,char *b,int count);
int gif_get_byte(void);
int gif_out_line(unsigned char *pixels,int linelen);
int load_gif(char *name,Vscreen *screen);
int save_gif(char *name,Vscreen *screen);
int qgrid(void);
int rgb_to_hls(int r,int g,int b,int *h,int *l,int *s);
int hls_to_rgb(int *r,int *g,int *b,int h,int l,int s);
int init_input(void);
int init_sys(void);
int visible_cmap(void);
int uncheck_cmap(void);
int find_colors(void);
int init_hr(void);
int reuse_input(void);
int hide_mouse(void);
int show_mouse(void);
int get_gridxy(void);
int c_input(void);
int check_input(void);
int vsync_input(int count);
int timed_input(int count);
int wait_input(void);
int wait_penup(void);
int wait_click(void);
int mouse_int(int fcn);
int ucursor(void);
long get80hz(void);
int wait_sync(void);
int wait_a_jiffy(int j);
int wait_til(long time);
int jexists(char *title);
int jdelete(char *title);
int jrename(char *oldname,char *newname);
int jcreate(char *title);
int jopen(char *title,int mode);
int jclose(int f);
int gentle_close(int f);
long jreadwrite(int f,void *buf,long size,int ah);
int copy_in_file(int file,long bytes,long soff,long doff);
int jcopyfile(char *source,char *dest);
long jseek(int f,long offset,int mode);
long jtell(int f);
int read_gulp(char *name,void *buf,long size);
int write_gulp(char *name,void *buf,long size);
int cant_create(char *name);
int cant_find(char *name);
int truncated(char *filename);
int overwrite_old(char *name);
int mangled(char *name);
int check_abort(unsigned frame,unsigned of);
int really_delete(char *name);
unsigned *lccomp(char *s1,char *s2,unsigned *cbuf,unsigned width,unsigned height);
unsigned *brun(char *s1,char *s2,int *cbuf,int width,int height);
int start_macro(void);
int realtime_macro(void);
int use_macro(void);
int repeat_macro(void);
int close_macro(void);
int get_macro(void);
int put_macro(int click);
int save_macro(void);
int load_macro(void);
int macrosync(void);
int main(int argc,char *argv[]);
int disables(void);
int copydot(int x,int y);
int sdot(int x,int y);
int marqidot(int x,int y);
int swap_box(void);
int rub_line(void);
int some_frame(int x0,int y0,int x1,int y1,Vector dotout);
int cut_cursor(void);
int r_in_place(int x0,int y0,int x1,int y1);
int rub_in_place(int x0,int y0,int x1,int y1);
int rub_box(void);
int gcut_out(void);
int rs_box(void);
int msome_vector(Point *pts,int count,Vector dotout,void *data,int open);
int marqi_poly(Point *pts,int count);
int undo_poly(Point *pts,int count);
int box_coors(int x,int y,int ox,int oy);
int move_box(int *x0,int *y0,int w,int h);
int cut_out(void);
int rub_circle_diagonal(void);
int pti_input(void);
int center_rad(void);
int rub_circle(void);
int quad9(int x,int y,int w,int h);
int save_mask(char *name);
int load_mask(char *name);
int quse_mask(void);
int qstencil(void);
int mgo_stencil(void);
unsigned largest_frag(void);
void *long_to_pt(unsigned long l);
int outta_memory(void);
int freememory(unsigned int *pt);
void *laskmem(long size);
void *askmem(unsigned size);
void *lbegmem(long size);
void *begmem(unsigned size);
int gentle_freemem(void *pt);
int multimenu(Vector v);
int go_multi(void);
int to_upper(register unsigned char *s);
int ustrcmp(register char *as,register char *bs);
int tr_string(register char *string,register char in,register char out);
int cut_suffix(char *title,char *suffix);
int suffix_in(char *string,char *suff);
int el_ix(Name_list *list,Name_list *el);
void *list_el(register Name_list *list,int ix);
int els_in_list(register Name_list *list);
void *sort_list(register Name_list *list,Vector cmp);
Name_list *sort_name_list(register Name_list *list);
int sort_array(Name_list **array,int count,Vector cmp);
Name_list *name_in_list(char *name,Name_list *list);
char *clone_string(char *s);
int free_list(register Name_list *lst);
int free_name_list(register Name_list *lst);
int longest_string(char **strings,int count);
int intabs(int a);
int intmin(int a,int b);
int reverse_bytes(char *b,int count);
int exchange_buf(register char *s1,register char *s2,int count);
int back_copy_bytes(register char *s,register char *d,int count);
int one_palette(void);
int zero_sl(Flicmenu *m);
int new_percent(int newmode);
int change_ink_mode(Flicmenu *m);
int change_pen_mode(Flicmenu *m);
int mload_text(void);
int qload_text(void);
int qsave_text(void);
int options(Flicmenu *m);
int go_dmmenu(Flicmenu *m);
int qtools(void);
int qinks(void);
int minks(void);
int qload_overlay(void);
int qload_palette(void);
int refit_screen(Vscreen *c,PLANEPTR ncmap,PLANEPTR ocmap,int cpnum);
int in_cmap(register PLANEPTR rgb,register PLANEPTR cmap,int count);
int qsave_palette(void);
int refit_1c(int scale,unsigned char *p,int ccolor,int cix,int ccount);
int refit_vf(void);
int cdefault(void);
int cuse_cel(void);
int redraw_ccolor(void);
int rampit(unsigned char *r1,unsigned char *r2,unsigned char *dr,int ccount,int dc);
int a_break_key(void);
int get_menu_colors(void);
int crestore(void);
int ppalette(void);
int palette(void);
int pal_disables(void);
int pal_checks(void);
int palette_selit(int menu,int sel);
int box_tool(void);
int fill_tool(void);
int flood_tool(void);
int edge_tool(void);
int drizl_tool(void);
int streak_tool(void);
int draw_tool(void);
int spray_tool(void);
int circle_tool(void);
int line_tool(void);
int poly_nopoints(Poly *poly);
int dot_poly(register Poly *poly,Vector dotout);
int some_poly(Poly *poly,Vector vector);
LLpoint *poly_last_point(Poly *p);
int render_poly(Poly *wply,int filled);
int rado_poly(Point *ado_s,int ptcount,int filled,int curved);
int poly_grad_dims(Poly *p);
int finish_polyt(int filled);
int maybe_finish_polyt(int filled);
LLpoint *poly_add_point(void);
LLpoint *start_polyt(void);
int polyf_tool(void);
int make_poly(void);
int curve_tool(void);
int shapef_tool(void);
int make_sp_wpoly(int x0,int y0,int rad,register int theta,int points,int star,int sratio);
int rpolyf_tool(void);
int starf_tool(void);
int petlf_tool(void);
int load_working_poly(void);
int load_poly(char *name);
int save_poly(char *name,Poly *poly);
int is_closedp(void);
int rub_wpoly(void);
int undraw_wpoints(void);
int move_poly_points(void);
int linkup_poly(Poly *p);
int postage_stamp(int x,int y,char *name);
int in_pblock(int x,int y,register Pull *p);
int pull_block(int x,int y,register Pull *p);
int pull_oblock(int x,int y,register Pull *p);
int pull_text(int x,int y,Pull *p);
int draw_mp(void);
int hide_mp(void);
int interp_pull(void);
int see_pull(register int x,register int y,register Pull *p);
int xonflag(register Pull *p,int flag);
int enable_pulls(register struct pull *p);
int pull_keys(Pull *p);
int qreq_number(char *hailing,int *inum,int min,int max);
int see_pen(Flicmenu *m);
int predraw(void);
int random(void);
int render_grad_twin(void);
int render_xy(int x0,int y0,int x1,int y1);
int render_xywh(int x,int y,int w,int h);
int render_full_screen(void);
int transpblit(register Vcel *tcel,int clearcolor,int clear,int tinting);
int make_brender_cashes(void);
int free_brender_cashes(void);
int rblit_cel(register Vcel *c);
int cfit_rblit_cel(Vcel *c);
int render_blit(int w,int h,int sx,int sy,PLANEPTR s,int sbpr,int dx,int dy,PLANEPTR d,int dbpr,unsigned char tcolor,PLANEPTR scmap);
int render_dot(int x,int y);
int render_bitmap_blit(int w,int h,int sx,int sy,PLANEPTR spt,int sbpr,int dx,int dy);
int render_hline(register int y,register int x0,int x1);
int render_disk(int cenx,int ceny,int rad);
int render_frame(int x0,int y0,int x1,int y1);
int render_box(int x,int y,int xx,int yy);
int r_box(int x,int y,int xx,int yy);
int render_brush(int x,int y);
int render_outline(Point *pt,int count);
int render_opoly(Poly *poly);
int render_circle(int cenx,int ceny,int rad);
int render_separate(PLANEPTR ctable,int ccount,int x0,int y0,int x1,int y1);
int intel_swap(register char *pt,int count);
int systext(register char *s,int x,int y,int color,Vector tblit,...);
int gftext(Vscreen *screen,register struct font_hdr *f,register unsigned char *s,int x,int y,int color,Vector tblit,int bcolor);
int fchar_width(register struct font_hdr *f,unsigned char *s);
long fnstring_width(struct font_hdr *f,register unsigned char *s,int n);
long fstring_width(struct font_hdr *f,unsigned char *s);
int widest_char(struct font_hdr *f);
int font_cel_height(struct font_hdr *f);
int sq_poly(int w,int h,int x,int y,register int *dest);
int raster_transform(Vcel *b,Point *dpoly,int first);
int vrotate_cel(void);
int dirties(void);
int cleans(void);
int scrub_cur_frame(void);
int noroom(void);
long write_tflx(char *cbuf,long size);
long fli_comp1(char *cbuf,char *this_screen,char *this_cmap);
int f_tempflx(void);
int sub_cur_frame(void);
int sv_fli(char *name);
int save_fli(char *name);
int save_pic(char *name,Vscreen *screen,int squawk);
int load_some_pic(char *name,Vscreen *screen);
int load_pic(char *name,Vscreen *screen);
int find_pminmax(register Poly *poly);
int fill_concave(register Poly *poly);
int free_screen(Vscreen *s);
Vscreen *alloc_big_screen(int w,int h);
Vscreen *alloc_screen(void);
Vscreen *clone_screen(Vscreen *s);
int screen_to_cel(Vscreen *s,Vcel *c);
int calc_scroll_pos(register Name_scroller *scroll,register Flicmenu *scroll_sel);
int iscroller(register Name_scroller *scr,Name_list *names,Flicmenu *scroll_sel,register Flicmenu *list_sel,int ycount,Vector redraw);
int scroll_ycount(Flicmenu *list_sel);
int redraw_scroller(register Flicmenu *scroll_sel,register Flicmenu *list_sel);
int end_clip_scroll(void);
int ffeelscroll(Flicmenu *m);
int fflscr(register Flicmenu *m,int realtime);
int print_list(Flicmenu *m);
int see_scroll(Flicmenu *m);
void *which_sel(Flicmenu *m);
char *sel_name(Flicmenu *m);
int fincup(Flicmenu *m);
int fincdown(Flicmenu *m);
int *sunder_menu(Flicmenu *m);
int sdraw_menu(Flicmenu *m);
int runder_menu(Flicmenu *m,int *pt);
int qdraw_a_menu(Flicmenu *m);
int hilit(Flicmenu *m);
int a_block(int color,Flicmenu *m);
int a_frame(int color,Flicmenu *m);
int box_diag_corner(int x0,int y0,int w,int h,int color);
int mb_ccorner(Flicmenu *m,int color);
int mb_isquare(Flicmenu *m,int color);
int blacktext(Flicmenu *m);
int greytext(Flicmenu *m);
int menu_text(Flicmenu *m,int color);
int ccorner_text(Flicmenu *m);
int dcorner_text(Flicmenu *m);
int move_tab_text(Flicmenu *m);
int ncorner_text(Flicmenu *m);
int ncorner_int(Flicmenu *m);
int ncorner_number(Flicmenu *m);
int ncorner_cursor(Flicmenu *m);
int ccorner_cursor(Flicmenu *m);
int gary_see_title(Flicmenu *m);
int gary_menu_back(Flicmenu *m);
int gbnumber_plus1(Flicmenu *m);
int left_text(Flicmenu *m);
int ccolor_box(Flicmenu *m);
int color_block1(int color,Flicmenu *m);
int m2color_block(Flicmenu *m,int fcolor,int bcolor);
int white_block(Flicmenu *m);
int black_block(Flicmenu *m);
int grey_block(Flicmenu *m);
int see_num(register Flicmenu *m,int xoff,int yoff,int fore);
int menu_cursor(Flicmenu *m,int color,struct cursor *c);
int bcursor(Flicmenu *m);
int hilight(Flicmenu *m);
int draw_sel(Flicmenu *m);
int see_cluster(Flicmenu *m);
int f_cbun(Flicmenu *m);
int feel_cluster(Flicmenu *m);
int draw_menus(register Flicmenu *m);
int unhi_group(register Flicmenu *m,int *mgroup);
int hi_group(register Flicmenu *m,int *mgroup);
int set_pbrush(void);
int edge1(int ecolor);
int separate(void);
int sep_tool(void);
int isin(short t);
int icos(short t);
int itmult(int trig,int x);
int polar(short theta,short rad,short *xy);
int rotate_points(int theta,int cx,int cy,int *spt,int *dpt,int count);
int see_qtslider(register Flicmenu *m);
int see_qslider(register Flicmenu *m);
int in_left_arrow(Flicmenu *m);
int in_right_arrow(Flicmenu *m);
int feel_qslider(Flicmenu *m);
int spiral_tool(void);
int qload_splice(void);
int some_spline(Poly *poly,Vector dotout,Vector vecout,int closed,int ir);
int make_sp_poly(Poly *poly,Poly *dpoly,int closed,int ir);
int filled_spline(Poly *poly);
int hollow_spline(Poly *poly);
int sqr_root(long i);
int calc_distance(short x1,short y1,short x2,short y2);
int status(void);
int about(void);
int finish_stretch_rot(Vector v);
int vstretch_cel(void);
int feel_string_req(Flicmenu *m);
int see_string_req(Flicmenu *m);
int init_stq_string(register Stringq *stq);
int undo_stringq(Flicmenu *m,Flicmenu *stq_item);
int upd_stringq(register char *name,register Stringq *stringq);
int init_summa(void);
int summa_get_input(void);
int cleanup_summa(void);
int close_tflx(void);
int empty_tempflx(void);
int otempflx(void);
int open_tempflx(void);
long write_tflx_start(long tablesize);
long frame_to_tflx(int sfile,char *name,struct fli_frame *frame,long acc,int ix);
int make_tempflx(char *name);
int finish_tflx(void);
int ring_tflx(char *cbuf);
long frame1_foff(void);
int continu_line(char *line);
int continu_box(char *lines[]);
int yes_no_box(char *lines[]);
int yes_no_line(char *line);
int qedit_text(void);
int qplace_text(void);
int qpwt(int paste);
int ttool(int paste);
int text_tool(void);
int qfont_text(void);
int dtextcel(void);
int rub_twin(void);
int free_text(void);
int render_line(int x,int y,int xx,int yy);
int render_1_line(int x,int y,int xx,int yy);
int qinsert_frames(void);
int delete_some(int x);
int qdelete_frames(void);
int qmake_frames(void);
int insert_frames(int count,int where);
int redraw_range_buttons(void);
int do_time_menu(void);
int go_time_menu(void);
int do_title_menu(void);
int make_bhash(void);
int is_bhash(void);
int cycle_ccolor(void);
int make_render_cashes(void);
int free_bhash(void);
int free_render_cashes(void);
int color_dif(char *rgb,char *c);
int bclosest_col(register unsigned char *rgb,int count);
int desaturate(unsigned char *rgb,unsigned char *d);
int brighten_ccomp(int c);
int rclosest_color(unsigned char *oldc,int underc);
int tclosest_color(int underc);
int true_blend(unsigned char *c1,unsigned char *c2,unsigned char percent,unsigned char *d);
int true_blends(unsigned char *c1,unsigned char *c2,int p,int q,unsigned char *d,int count);
int true_fades(unsigned char *c1,unsigned char *rgb,int p,int q,unsigned char *d,int count);
int nz_fitting_cmap(PLANEPTR scm,PLANEPTR dcm,PLANEPTR ctable);
int fitting_cmap(PLANEPTR scm,PLANEPTR dcm,PLANEPTR ctable);
int compromise_cmap(PLANEPTR s1,PLANEPTR s2,PLANEPTR d);
int redraw_tseg(void);
int change_time_mode(Flicmenu *m);
int edit_poly(void);
int edit_curve(void);
int do_tween(void);
int tween_poly(void);
int tween_curve(void);
int get_color(void);
int qload_defaults(void);
int qsave_defaults(void);
int qload_mask(void);
int qsave_mask(void);
int qload_cel(void);
int qsave_cel(void);
int qload_pic(void);
int qsave_pic(void);
int qload(void);
int qsave(void);
int check_cel_options(void);
int dokeys(void);
int config_scratch(void);
int check_dfree(void);
int selit(int menu,int select);
int cluster_count(void);
unsigned char *cluster_bundle(void);
int rethink_settings(void);
int default_settings(void);
int in_ctable(unsigned char color,unsigned char *table,int count);
int restore(void);
int mundo_pic(void);
int undo_pic(void);
int init_seq(void);
int kill_seq(void);
int flush_tempflx(void);
int outofhere(void);
int toggle_menu(void);
int defrag(void);
int interp_range(int c1,int c2,int i,int divi);
int in_control_space(void);
int make_dw(void);
int dwdot(int x,int y,int color);
int make_wi_list(void);
int swap_undo(void);
int save_undo(void);
int unundo(void);
int zoom_it(void);
int upd_zoom_dot(int x,int y,int c);
int restore_top_bar(void);
int ltop_text(char *s);
int top_text(char *s);
char *wwnext_line(struct font_hdr *f,char *s,int w,char *buf,int sub_cr);
int wwcount_lines(struct font_hdr *f,char *s,int w);
int wwtext(Vscreen *screen,struct font_hdr *f,char *s,int x,int y,int w,int h,int color,Vector blit,int skiplines,int justify);
int justify_line(Vscreen *screen,struct font_hdr *font,char *linebuf,int x,int y,int w,int color,Vector blit,int color2,int just);
int load_text(char *name);
int save_text(char *name);
long fli_comp_frame(char *comp_buf,char *last_screen,char *last_cmap,char *this_screen,char *this_cmap,int type);
int fli_first_frame(char *cbuf,char *name,char *frame2,char *colors2,char *frame1,char *colors1,int speed);
int fli_next_frame(char *cbuf,char *last_screen,char *last_cmap,char *this_screen,char *this_cmap);
int fli_last_frame(char *cbuf,int *last_screen,int *last_cmap,int *first_screen,int *first_cmap);
int set_zoom_level(void);
int unset_zoom(void);
int toggle_zoom(Flicmenu *m);
int ktoggle_zoom(void);
int unzoom(void);
int rezoom(void);
int init_zoom(void);
