FLC - Animator Pro Flic Files


This is the main animation file format created
by Animator Pro.  The file contains a 128-byte
header, followed by an optional prefix chunk,




followed by one or more frame chunks.  

The prefix chunk, if present, contains Animator
Pro settings information, CEL placement
information, and other auxiliary data.

A frame chunk exists for each frame in the
animation.  In addition, a ring frame follows
all the animation frames.  Each frame chunk
contains color palette information and/or pixel
data.

The ring frame contains delta-compressed
information to loop from the last frame of the
flic back to the first.  It can be helpful to
think of the ring frame as a copy of the first
frame, compressed in a different way.  All flic
files will contain a ring frame, including a
single-frame flic.


The FLC file header


A FLC file begins with a 128-byte header,
described below.  All lengths and offsets are
in bytes.  All  values stored in the header
fields are unsigned.

Offset  Length  Name            Description

		 0      4     size      The size of the
								entire
								animation file,
								including this
								file header.

		 4      2     magic     File format
								identifier. 
								Always hex
								AF12.

		 6      2     frames    Number of
								frames in the
								flic.  This
								count does not
								include the
								ring frame. 
								FLC files have
								a maximum
								length of 4000
								frames.

		 8      2     width     Screen width in
								pixels.

		10      2     height    Screen height
								in pixels.

		12      2     depth     Bits per pixel
								(always 8).





		14      2     flags     Set to hex 0003
								after ring
								frame is
								written and
								flic header is
								updated.  This
								indicates that
								the file was
								properly
								finished and
								closed.

		16      4     speed     Number of
								milliseconds to
								delay between
								each frame
								during
								playback.

		20      2     reserved  Unused word,
								set to 0.

		22      4     created   The
								MSDOS-formatted
								date and time
								of the file's
								creation.

		26      4     creator   The serial
								number of the
								Animator Pro
								program used to
								create the
								file.  If the
								file was
								created by some
								other program
								using the
								FlicLib
								development
								kit, this value
								is hex 464C4942
								("FLIB").

		30      4     updated   The
								MSDOS-formatted
								date and time
								of the file's
								most recent
								update.

		34      4     updater   Indicates who
								last updated
								the file.  See
								the description
								of creator.

		38      2     aspectx   The x-axis
								aspect ratio at
								which the file
								was created.





		40      2     aspecty   The y-axis
								aspect ratio at
								which the file
								was created. 
								Most often, the
								x:y aspect
								ratio will be
								1:1.  A 320x200
								flic has a
								ratio of 6:5.

		42     38     reserved  Unused space, set to zeroes.

		80      4     oframe1   Offset from the
								beginning of
								the file to the
								first animation
								frame chunk.

		84      4     oframe2   Offset from the
								beginning of
								the file to the
								second
								animation frame
								chunk.  This
								value is used
								when looping
								from the ring
								frame back to
								the second
								frame during
								playback.

		88     40     reserved  Unused space,
								set to zeroes.


The FLC prefix chunk


An optional prefix chunk may immediately follow
the animation file header.  This chunk is used
to store auxiliary data which is not directly
involved in theanimation playback.  The prefix
chunk starts with a 16-byte header (identical
in structure to a frame header), as follows:

Offset  Length  Name            Description

		 0      4     size      The size of the
								prefix chunk,
								including this
								header and all
								subordinate
								chunks that
								follow.

		 4      2     type      Prefix chunk
								identifier. 
								Always hex
								F100.





		 6      2     chunks    Number of
								subordinate
								chunks in the
								prefix chunk.

		 8      8     reserved  Unused space,
								set to zeroes.

To determine whether a prefix chunk is present,
read the 16-byte header following the file
header.  If the type value is hex F100, it's a
prefix chunk.  If the value is hex F1FA it's
the first frame chunk, and no prefix chunk
exists.

Note

			Programs other than Animator Pro
			should never need to create flic
			files that  contain a prefix chunk.
			Programs reading a flic file should
			skip the prefix chunk by using the
			size value in the prefix header to
			read and discard the prefix, or by
			seeking directly to the first frame
			using the oframe1 field from the
			file header.


The FLC frame chunks


Frame chunks contain the pixel and color data
for the animation.  A frame chunk may contain
multiple subordinate chunks, each containing a
different type of data for the current frame. 
Each frame chunk starts with a 16-byte header
that describes the contents of the frame:

Offset  Length  Name            Description

		 0      4     size      The size of the
								frame chunk,
								including this
								header and all
								subordinate
								chunks that
								follow.

		 4      2     type      Frame chunk
								identifier. 
								Always hex
								F1FA.

		 6      2     chunks    Number of
								subordinate
								chunks in the
								frame chunk.

		 8      8     reserved  Unused space,
								set to zeroes.





Immediately following the frame header are the
frame's subordinate data chunks.  When the
chunks count in the frame header is zero, it
indicates that this frame is identical to the
previous frame.  This implies that nochange is
made to the screen or color palette, but the
appropriate delay is still inserted during
playback.

Each data chunk within a frame chunk is
formatted as follows:

Offset  Length  Name            Description

		 0       4    size      The size of the
								chunk,
								including this
								header.

		 4       2    type      Data type
								identifier.

		 6   (size-6) data      The color or pixel data.


The type values in the chunk headers indicate
what type of graphics data the chunk contains
and which compression method was used to encode
the data.  The following values (and their
associated mnemonic names) are currently found
in frame data chunks:

	  Value  Name             Description

		4    FLI_COLOR256     256-level color palette info
		7    FLI_SS2          Word-oriented delta compression
	   11    FLI_COLOR        64-level color palette info
	   12    FLI_LC           Byte-oriented delta compression
	   13    FLI_BLACK        Entire frame is color index 0
	   15    FLI_BRUN         Byte run length compression
	   16    FLI_COPY         No compression
	   18    FLI_PSTAMP       Postage stamp sized image

The following sections describe each of these
data encoding methods in detail.


Chunk Type  4 (FLI_COLOR256) - 256-Level Color


The data in this chunk is organized in packets.
The first word following the chunk header is a
count of the number of packets in the chunk. 

Each packet consists of a one-byte color index
skip count, a one-byte color count and three
bytes of color information for each color
defined.

At the start of the chunk, the color index is
assumed to be zero.  Before processing any
colors in a packet, the color index skip count
is added to the current color index.  The
number of colors defined in the packet is
retrieved.  A zero in this byte indicates 256
colors follow.  The three bytes for each color
define the red, green, and blue components of
the color in that order.  Each component can
range from 0 (off) to 255 (full on).  
The data to change colors 2,7,8, and 9 would
appear as follows:

			2                       ; two packets 
			2,1,r,g,b               ; skip 2, change 1 
			4,3,r,g,b,r,g,b,r,g,b   ; skip 4, change 3


Chunk Type 11 (FLI_COLOR) - 64-Level Color

This chunk is identical to FLI_COLOR256 except
that the values for the red, green and blue
components are in the range of 0-63 instead of
0-255.


Chunk Type 13 (FLI_BLACK) - No Data


This chunk has no data following the header. 
All pixels in the frame are set to color index
0.


Chunk Type 16 (FLI_COPY) - No Compression


This chunk contains an uncompressed image of
the frame.  The number of pixels following the
chunk header is exactly the width of the
animation times the height of the animation. 
The data starts in the upper left corner with
pixels copied from left to right and then top
to bottom.  This type of chunk is created when
the preferred compression method (SS2 or BRUN)
generates more data than the uncompressed frame
image; a relatively rare situation.


Chunk Type 15 (FLI_BRUN) - Byte Run Length
Compression


This chunk contains the entire image in a
compressed format.  Usually this chunk is used
in the first frame of an animation, or within a
postage stamp image chunk. 

The data is organized in lines.  Each line
contains packets of compressed pixels.  The
first line is at the top of the animation,
followed by subsequent lines moving downward. 
The number of lines in this chunk is given by
the height of the animation.

The first byte of each line is a count of
packets in the line.  This value is ignored, it
is a holdover from the original Animator.  It
is possible to generate more than 255 packets
on a line.  The width of the animation is now
used to drive the decoding of packets on a
line; continue reading and processing packets
until width pixels have been processed, then
proceed to the next line.

Each packet consist of a type/size byte,
followed by one or more pixels.  If the packet
type is negative it is a count of pixels to be
copied from the packet to the animation image. 
If the packet type is positive it contains a
single pixel which is to be replicated; the
absolute value of the packet type is the number
of times the pixel is to be replicated.


Chunk Type 12 (FLI_LC) - Byte Aligned Delta
Compression


This chunk contains the differences between the
previous frame and this frame.  This
compression method was used by the original
Animator, but is not created by Animator Pro. 
This type of chunk can appear in an Animator
Pro file, however, if the file was originally
created by Animator, then some (but not all)
frames were modified using Animator Pro.  

The first 16-bit word following the chunk
header contains the position of the first line
in the chunk.  This is a count of lines (down
from the top of the image) which are unchanged
from the prior frame.  The second 16-bit word
contains the number of lines in the chunk.  The
data for the lines follows these two words.

Each line begins with two bytes.  The first
byte contains the starting x position of the
data on the line, and the second byte the
number of packets for the line.  Unlike BRUN
compression, the packet count is significant
(because this compression method is only used
on 320x200 flics).

Each packet consists of a single byte column
skip, followed by a packet type/size byte.  If




the packet type is positive it is a count of
pixels to be copied from the packet to the
animation image.  If the packet type is
negative it contains a single pixel which is to
be replicated; the absolute value of the packet
type gives the number of times the pixel is to
be replicated.

							   Note

			The negative/positive meaning of
			the packet type bytes in LC
			compression is reversed from that
			used in BRUN compression.  This
			gives better performance during
			playback.


Chunk Type  7 (FLI_SS2) - Word Aligned Delta
Compression


This format contains the differences between
consecutive frames.  This is the format most
often used by Animator Pro for frames other
than the first frame of an animation.  It is
similar to the line coded delta (LC)
compression, but is word oriented instead of
byte oriented.  The data is organized into
lines and each line is organized into packets.

The first word in the data following the chunk
header contains the number of lines in the
chunk.  Each line can begin with some optional
words that are used to skip lines and set the
last byte in the line for animations with odd
widths.  These optional words are followed by a
count of the packets in the line.  The line
count does not include skipped lines.

The high order two bits of the word is used to
determine the contents of the word.

			Bit 15  Bit 14    Meaning

			  0       0       The word contains
							  the packet count.
							  The packets
							  follow this word.
							  The packet count
							  can be zero; this
							  occurs when only
							  the last pixel on
							  a line changes.

			  1       0       The low order
							  byte is to be
							  stored in the
							  last byte of the
							  current line. 
							  The packet count
							  always follows




							  this word.

			  1       1       The word contains
							  a line skip
							  count.  The
							  number of lines
							  skipped is given
							  by the absolute
							  value of the
							  word.  This word
							  can be followed
							  by more skip
							  counts, by a last
							  byte word, or by
							  the packet count.

The packets in each line are similar to the
packets for the line coded chunk.  The first
byte of each packet is a column skip count. 
The second byte is a packet type.  If the
packet type is positive, the packet type is a
count of words to be copied from the packet to
the animation image.  If the packet type is
negative, the packet contains one more word
which is to be replicated.  The absolute value
of the packet type gives the number of times
the word is to be replicated.  The high and low
order byte in the replicated word do not
necessarily have the same value.


Chunk Type 18 (FLI_PSTAMP) - Postage Stamp
Image


This chunk type holds a postage stamp -- a
reduced-size image -- of the frame.  It
generally appears only in the first frame chunk
within a flic file.  

When creating a postage stamp, Animator Pro
considers the ideal size to be 100x63 pixels. 
The actual size will vary as needed to maintain
the same aspect ratio as the original.

The pixels in a postage stamp image are mapped
into a six-cube color space, regardless of the
color palette settings for the full frame
image.  A six-cube color space is formed as
follows:

			start at palette entry 0
			for red = 0 thru 5
				  for green = 0 thru 5
						for blue = 0 thru 5
							  palette_red   = (red   * 256)/6 
							  palette_green = (green * 256)/6
							  palette_blue  = (blue  * 256)/6
							  move to next palette entry
						end for blue
				  end for green
			end for red

Any arbitrary rgb value (where each component
is in the range of 0-255) can be mapped into
the six-cube space using the formula:

 
((6*red)/256)*36 + ((6*green)/256)*6 + ((6*blue
)/256)

When a frame data chunk has been identified as
a postage stamp, the header for the chunk
contains more fields than just size and type. 
The full postage stamp chunk header is defined
as follows:

Offset  Length  Name            Description

		 0      4     size      The size of the
								postage stamp
								chunk,
								including this
								header.

		 4      2     type      Postage stamp
								identifier;
								always 18.

		 6      2     height    Height of the
								postage stamp
								image, in
								pixels.

		 8      2     width     Width of the
								postage stamp
								image, in
								pixels.

		10      2     xlate     Color
								translation
								type;  always
								1, indicating
								six-cube color
								space.

Immediately following this header is the
postage stamp data.  The data is formatted as a
chunk with standard size/type header.  The type
will be one of:

	  Value  Name             Description

	   15    FPS_BRUN         Byte run length compression
	   16    FPS_COPY         No compression
	   18    FPS_XLAT256      Six-cube color xlate table

The FPS_BRUN and FPS_COPY types are identical
to the FLI_BRUN and FLI_COPY encoding methods
described above.

The FPS_XLAT256 type indicates that the chunk
contains a 256-byte color translation table
instead of pixel data.  To process this type of
postage stamp, read the pixel data for the
full-sized frame image, and translate its
pixels into six-cube space using a lookup in
the 256-byte color translation table.  This
type of postage stamp appears when the size of
the animation frames is smaller than the
standard 100x63 postage stamp size.


FLI - Original Animator Flic Files


This animation file format is limited to
320x200 resolution.  It is the main animation
file format of the original Animator, and is
still used by Animator Pro for creating 320x200
animations.  The file structure is very similar
to that of a FLC file.  A FLI file does not
contain a prefix chunk, and does not use
FLI_PSTAMP or FLI_SS2 data encoding in the
frame chunks.


The FLI file header


The file header for a FLI file is a subset of
the FLC file header.  It is defined as follows:

Offset  Length  Name            Description

		 0      4     size      The size of the
								entire
								animation file,
								including this
								file header.

		 4      2     magic     File format
								identifier. 
								Always hex
								AF11.

		 6      2     frames    Number of
								frames in the
								flic.  This
								count does not
								include the
								ring frame. 
								FLI files have
								a maximum
								length of 4000
								frames.

		 8      2     width     Screen width in
								pixels. This is
								always 320 in a
								FLI file.

		10      2     height    Screen height
								in pixels. This
								is always 200
								in a FLI file.

		12      2     depth     Bits per pixel
								(always 8).

		14      2     flags     Always zero in
								a FLI file.

		16      2     speed     Number of
								jiffies to
								delay between
								each frame
								during
								playback.  A
								jiffy is 1/70
								of a second.

		18    110     reserved  Unused space,
								set to zeroes.

The FLI frame chunks


One or more frame chunks immediately follow the
FLI file header.  The frame chunks in a FLI
file are identical to those in a FLC file,
except that postage stamp image (FLI_PSTAMP)
and word-runlength-compression (FLI_SS2) data
chunks never appear in FLI files.

