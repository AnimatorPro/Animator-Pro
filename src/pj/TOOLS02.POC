/* test program by Heidi */

/* Globals */
int x,y;
int screen_w,screen_h;
char *menu_opts[] =
	{
	"Drawing Options",
	"Clear Screen",
	"Special Tools",
	"Text Functions",
	"Set/Check Graphics Modes",
//	"Print Routines",
//	"Qbusy",
	"End",
	};
#define ArrayEls(c) (sizeof(c)/sizeof((c)[0]))

/* Test subroutines. */

test_line()
/* Accept two clicks, then draw a line between the points.  Right click to exit. */
{
int x1,y1;
int x2,y2;
int l,r,k;

for (;;)
	{
	WaitClick(&x1,&y1,&l,&r,&k);
	if (r)
		break;
	Dot(x1,y1);
	WaitClick(&x2,&y2,&l,&r,&k);
	if (r)
		break;
	Line(x1,y1,x2,y2);
	} 
}


test_box()
{
int mx,my;
int w,h;

for (;;)
	{
	if (!RubBox(&mx,&my,&w,&h))
		break;
	Box(mx,my,w,h);
	}
}

test_circle()
{
int cx,cy;
int r;

for (;;)
	{
	if (!RubCircle(&cx,&cy,&r))
		break;
	Circle(cx,cy,r);
	}
}

clear_screen()
{
int temp = GetColor();

SetColor(0);
Box(0,0,screen_w,screen_h);
SetColor(temp);
}

test_poly()
{
	/* Accept dots until right-click, then draw poly */
	/* Probably won't work at max_p, but that's okay for here. */

	#define max_p 100

	int x[max_p], y[max_p];
	int points,i;
	int l,r,k;

	for (;;)
	{
	for (i = 0; i <= max_p; i++)  /* Get points from user. */
		{
		WaitClick(&x[i],&y[i],&l,&r,&k);
		if (r)
			break;
		Dot(x[i],y[i]);
		} /* End for */
	points = i;

	if (points == 0)
		break;
	Poly(points,x,y);
	}
	#undef max_p
}

test_spline()
{ /* Essentially same as Poly. */
	#define max_p 100
	int x[max_p], y[max_p];
	int points,i;
	int l,r,k;

	for (;;)
		{
		for (i = 0; i <= max_p; i++) /* Get points from user. */
			{
			WaitClick(&x[i],&y[i],&l,&r,&k);
			if (r)
				break;
			Dot(x[i],y[i]);
			} /* End for i */
		points = i;

		if (points == 0)
			break;
		Spline (points,x,y);
		} /* End for ;; */
	#undef max_p
} /* End test_spline */

test_oval()
{
	double ang;
	int cx,cy,xrad,yrad;
	int turns = 4;
	int i;

	for (;;)
	{
		if (!RubCircle(&cx,&cy,&xrad))
			break;
		if (!Qnumber(&turns,2,36,"Number of turns?"))
			break;
		yrad = xrad/turns;
		for (i=1;i<=turns;i++)
			{
			ang = (180/turns)*i;
			Oval(ang,cx,cy,xrad,yrad);
			}
	}
} /* End test_oval */

test_star_opts()
{

	int points,ratio;

	points = GetStarPoints();
	ratio = GetStarRatio();
	if (Qnumber(&points,3,32,"Number of points?"))
		SetStarPoints(points);
	if (Qnumber(&ratio,0,100,"Ratio?"))
		SetStarRatio(ratio);
}

test_star()
{
	double ang;
	int cx,cy,rad;
	int iang = 0;

	for (;;)
	{
		printf("Draw circle to position star.");
		if (!RubCircle(&cx,&cy,&rad))
			break;
		if (!Qnumber(&iang,0,360,"Angle of rotation?"))
			break;
		ang=iang;
		test_star_opts();
		Star(ang,cx,cy,rad);
	}
	unprintf();
}

test_petal()
{
	double ang;
	int cx,cy,rad;
	int iang = 0;
	
	for (;;)
	{
		printf("Draw circle to position petal.");
		if (!RubCircle(&cx,&cy,&rad))
			break;
		if (!Qnumber(&iang,0,360,"Angle of rotation?"))
			break;
		ang=iang;
		test_star_opts();
		Petal(ang,cx,cy,rad);
	}
	unprintf();
}

test_rpoly()
{
	double ang;
	int cx,cy,rad;
	int iang=0;

	for (;;)
	{
		if (!RubCircle(&cx,&cy,&rad))
			break;
		if (!Qnumber(&iang,0,360,"Angle of rotation?"))
			break;
		ang=iang;
		Rpoly(ang,cx,cy,rad);
	}
}

test_spiral()
{
	double ang,turns;
	int cx,cy,rad;
	int iang,iturns;

	for (;;)
	{
		if (!RubCircle(&cx,&cy,&rad))
			break;
		if (!Qnumber(&iang,-3600,3600,"Angle of rotation?"))
			break;
		if (!Qnumber(&iturns,0,1000,"Number of turns?"))
			break;
		ang=iang;
		turns=iturns;

		Spiral(ang,cx,cy,rad,turns);
	}
}

test_fill()
{
	int x,y;
	int l,r,k;

	for (;;)
	{
		WaitClick(&x,&y,&l,&r,&k);
		if (r)
			break;
		Fill(x,y);
	}
}

test_fillto()
{
	int x,y;
	int l,r,k;
	int c = 1; /* Should be pink for now. */

	for (;;)
	{
		WaitClick(&x,&y,&l,&r,&k);
		if (r)
			break;
		FillTo(x,y,c);
	}

}

test_edge()
{
	int c = 1; /* Should be pink.*/

	Edge(c);

}

special()
{
char *tools[] =
	{
	"Poly",
	"Spline",
	"Oval",
	"Star",
	"Petal",
	"Rpoly",
	"Spiral",
	"Fill",
	"Fill To",
	"Edge",
	};

int i;
int npos;

for (;;)
	{
	if (!Qlist(&i,tools, ArrayEls(tools), &npos, "Select a tool."))
		break;
//	Qtext("You selected number %i; tool is %s.",i,tools[i]);

	switch(i)
		{
		case 0: /* Polygon */
			test_poly();
			break;
		case 1: /* Spline */
			test_spline();
			break;
		case 2: /* Oval */
			test_oval();
			break;
		case 3: /* Star */
			test_star();
			break;
		case 4: /* Petal */
			test_petal();
			break;
		case 5: /* Rpoly */
			test_rpoly();
			break;
		case 6: /* Spiral */
			test_spiral();
			break;
		case 7: /* Fill */
			test_fill();
			break;
		case 8: /* Fill To */
			test_fillto();
			break;
		case 9: /* Edge */
			test_edge();
			break;
		} /* End switch(i) */

	} /* End for (;;) */

}

test_text()
{
	int x,y;
	int w,h;
	int l,r,k;
	int opt;

	char *buttons[] =
		{
		"Text on Screen",
		"Window for Text",
		"Cancel",
		};

	for (;;)
	{
		opt = Qchoice(buttons,ArrayEls(buttons),"Text to test?")-1;
		if (opt == 2)
			break;
		if (opt == 0)
		{
			for (;;)
			{
				WaitClick(&x,&y,&l,&r,&k);
				if (r)
					break;
				Text(x,y,"Hello World");
			}
		}
		else if (opt == 1)
		{
			for (;;)
			{
				/* This doesn't work. */
				if (RubBox(&x,&y,&w,&h))
				WordWrap(x,y,w,h,"Now is the time to test the word wrap in Poco.");
				else
					break;
			}
		}
	}

} /* End test_text */

test_print()
{
	int x,y;
	int l,r,k;

	printf("Hello World.");
	printf("Press a key to erase.");
	WaitClick(&x,&y,&l,&r,&k);
	unprintf();
}

test_qbusy()
{
	int x,y;
	int l,r,k;

	Qbusy("Hello World.");
	WaitClick(&x,&y,&l,&r,&k);
//	UnQbusy();
}

test_draw()
{
	int r;
	
	char *draw_opts[] =
		{
		"Line",
		"Box",
		"Circle",
		"Clear Screen",
		"Cancel",
		};

	for (;;)
	{
		r = Qmenu(draw_opts,ArrayEls(draw_opts),"Select item to test.");
		if (r == 0)	/* Exit loop on 0 ("End") */
			break;
		switch (r)
			{
			case 1:
				test_line();
				break;
			case 2:
				test_box();
				break;
			case 3:
				test_circle();
				break;
			case 4:
				Clear();
				break;
			}
		}
}

test_inks()
{
	char ink[20];
	ErrCode ink_err = 0;
	int strength;
	Boolean dither;

	GetInk(ink);
	if(Qquestion("Current ink is %s.  Select new?",ink))
		for (;;)
			{
			if (!Qstring(ink,sizeof(ink), "New ink?"))
				break;
			ink_err = SetInk(ink);
			if (!ink_err)
				break;
			Qerror(ink_err,"Not a valid ink; try again.");
			GetInk(ink);
			}

	strength = GetInkStrength();
	if (Qquestion("Ink strength is %i; change it?", strength))
			if (Qnumber(&strength,0,100,"New ink strength?"))
				SetInkStrength(strength);

	dither=GetInkDither();

	if (dither)
		{
		if (Qquestion("Dither is on for this ink; turn it off?"))
			SetInkDither(!dither);
		}
	else
		{
		if (Qquestion("Dither is off for this ink; turn it on?"))
			SetInkDither(!dither);
		}

}

test_set_filled()
{

	Boolean filled;

	filled = GetFilled();

	if (filled)
	{
		if (Qquestion("Filled is on; turn it off?"))
			SetFilled(!filled);
	}
	else
	{
		if (Qquestion("Filled is off; turn it on?"))
			SetFilled(!filled);
	}
}

test_brush()
{
	int brush = GetBrushSize();

	Qnumber(&brush,1,16,"New brush size?");
	SetBrushSize(brush);
}

test_key_mode()
{

	Boolean mode;
	int color;

	mode = GetKeyMode();
	if (mode)
		{
		if (Qquestion("Key mode is on; turn it off?"));
			SetKeyMode(!mode);
		}
	else
		{
		if (Qquestion("Key mode is off; turn it on?"));
			SetKeyMode(!mode);
		}

	color = GetKeyColor();
	if (Qquestion("Key color is %i; change it?"))
		{
		if (Qnumber(&color,0,255,"New key color?"))
			SetKeyColor(color);
		}
}

test_time_select()
{
	Boolean time;

#ifdef timesel
	time = GetTimeSelect();
	if (time)
		{
		if (Qquestion("Time select is on; turn it off?"))
			SetTimeSelect(!time);
		}
	else
		{
		if (Qquestion("Time select is off; turn it on?"))
			SetTimeSelect(!time);
		}
#endif
}

test_fsa()
{
	int fsa;
	char *values[] = 
		{
		"Frame",
		"Segment",
		"All",
		};

#ifdef fsa
	fsa = GetFSA();
	if (Qquestion("FSA value is %s; do you want to change it?",values[fsa]))
		{
		fsa = Qchoice(values,ArrayEls(values),"New fsa value?")-1;
		SetFSA(fsa);
		}
#endif fsa
}

test_modes()
{
	char *mode_list[] =
		{
		"Inks",
		"Filled",
		"Brush",
		"Key Mode/Color",
		"Time",
		"FSA",
		"Mask",
		"Spline TCB",
		"Two Color",
		"Justify",
		"Closed",
		};

	int opt,pos;

	for (;;)
		{
		if (!Qlist(&opt,mode_list,ArrayEls(mode_list),&pos,"Select a mode item."))
			break;
		switch (opt)
			{
			case 0:
				test_inks();
				break;
			case 1:
				test_set_filled();
				break;
			case 2:
				test_brush();
				break;
			case 3:
				test_key_mode();
				break;
			case 4:
				test_time_select();
				break;
			case 5:
				test_fsa();
				break;
			case 6:
				break;
			case 7:
				break;
			case 8:
				break;
			case 9:
				break;
			case 10:
				break;
			}
		}
}

main()
{
	int r;
//	GetScreenSize(&screen_w,&screen_h);

	for (;;)
	{
		r = Qmenu(menu_opts,ArrayEls(menu_opts),"Select item to test.");
		if (r==0)
			break;

		switch (r)
		{
		
		case 1:
			test_draw();
			break;
		case 2:
			Clear();
			break;
		case 3:
			special();
			break;
		case 4:
			test_text();
			break;
		case 5:
			test_modes();
			break;
		case 8:
			test_print();
			break;
		case 9:
			test_qbusy();
			break;
		}
//	Qtext("You selected %s.",menu_opts[r -1]);

	} 

} /* end main. */
