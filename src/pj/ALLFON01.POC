#define TRUE 1
#define FALSE 0
#define Success 0
#define ESC 0x1b

int sw,sh;		/* Screen width and height. */
char abcs[256];	/* Every character. */

make_abcs()
/*
 * Make up an array with all characters from Space to 255
 */
{
int i;

for (i=0x20; i<255; ++i)
	abcs[i-0x20] = i;
}

FILE *rlog;		/* Log file to record messages. */

open_log()
/*
 * Open allfont.log file which will report our progress.
 */
{
char *log_name = "allfont.log";

if ((rlog = fopen(log_name, "w")) == NULL)
	{
	Qtext("Couldn't open log file %s\n", log_name);
	exit(-1);
	}
}

see_font(char *name)
/*
 * Draw font sample on screen. 
 */
{
int fh;
int occolor;

make_abcs();
fh = FontHeight()+2;
occolor = GetColor();
Clear();
Box(0,0,4+StringWidth(name),fh);
SetColor(0);
Text(2,2,name);
SetColor(occolor);
WordWrap(0, fh, sw, sh-fh, abcs);
}

display_font(char *name)
/*
 * Load font, report errors if any, and then display it.
 */
{
fprintf(rlog, "%s\n", name);
fflush(rlog);
if (Qerror(LoadFont(name), "Can't load %s", name) < Success)
	return;
see_font(name);
}

do_all_fonts(Boolean step, Boolean advance)
/*
 * Display all fonts in current font directory.  Optionally advance frame
 * between each font. 
 */
{
char font_dir[80];
char font_name[80];
char ofname[80];
char odir[80];
char **flist;
int fcount;
int i;
int x,y,l,r,k;


GetFontName(ofname);
GetDir(odir);
GetFontDir(font_dir);
SetDir(font_dir);
if ((fcount = DirList(&flist, "*.*", 0)) <= Success)
	return;
if (advance)
	{
	if (GetFrameCount() < fcount)
		SetFrameCount(fcount);
	}
for (i=0; i<fcount; i++)
	{
	display_font(flist[i]);
	if (step)
		WaitClick(&x,&y,&l,&r,&k);
	else
		PollInput(&x,&y,&l,&r,&k);
	if (r || (k&0xff) == ESC)
		if (Qquestion("Stop going through fonts?"))
			break;
	if (advance)
		NextFrame();
	}
FreeDirList(&flist);	
SetDir(odir);
LoadFont(ofname);
}

char *choices[] = 
/*
 * Main menu
 */
	{
	"Step through fonts",
	"Run through fonts",
	"Fonts into flic",
	"See current font",
	"Font Requestor",
	"Exit",
	};

/*** Stuff to save away and restore AniPro state. ***/
typedef struct 
	{
	Screen *oscreen;
	} AniState;

AniState old_state;

Errcode ani_state_save(AniState *this)
/*
 * Save current animator state.
 */
{
ErrCode err;

if ((err = AllocScreen(&this->oscreen,sw,sh)) < Success)
	{
	err = Qerror(err, "Can't save current screen");
	return err;
	}
CopyScreen(GetPicScreen(), this->oscreen);
return Success;
}

void ani_state_restore(AniState *this)
/*
 * Restore animator state.
 */
{
CopyScreen(this->oscreen,GetPicScreen());
FreeScreen(&this->oscreen);
}


main()
{
ErrCode err;
char font_name[80];

open_log();
GetSize(&sw,&sh);
if ((err = ani_state_save(&old_state)) < Success)
	return;
SetAbort(FALSE);
for (;;)
	{
	switch (Qmenu(choices, Array_els(choices), "Quick font tester"))
		{
		case 0:
			goto OUT;
		case 1:
			do_all_fonts(TRUE, FALSE);
			break;
		case 2:
			do_all_fonts(FALSE, FALSE);
			break;
		case 3:
			if (Qquestion("Create new flic containing font samples?"))
				{
				NewFlic();
				do_all_fonts(FALSE, TRUE);
				CopyScreen(GetPicScreen(), old_state.oscreen);
				}
			break;
		case 4:
			GetFontName(font_name);
			see_font(font_name);
			break;
		case 5:
			Qfont();
			GetFontName(font_name);
			see_font(font_name);
			break;
		}
	}
OUT:
ani_state_restore(&old_state);
}
