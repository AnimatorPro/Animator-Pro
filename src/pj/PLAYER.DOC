Player command line startup input:

	Usage: player scriptfile [options]

	Options: -v video_driver mode 
	
		Note, suffix on video driver if not provided will be set to ".drv". 
 		The mode number is required. 

		Defaults to mode in file aa.cfg if that fails it will try the internal
		mcga driver.

	Examples:  

		player my.scr -v mcga 0  

			( Play script my.scr using mcga.drv mode 0 )

		player -v mcga 0

			( Start up player and bring up menu using mcga.drv mode 0 )

	Resources:

		Like pj, the player requires files from a resource directory 
		subordinate to the directory the executable is located in.  The 
		executable may be run via a dos path from any directory, It will create
		the file aa.cfg in the directory it is executed in.  The player creates
		no other files.  If the file aa.cfg already exists it will use the 
		fli loading path, screen, and mouse driver settings in this file.

		The resource files needed are:

			The menu fonts in the font directory.
			The text and message file aa.mu
			Any ".pdr" loaders to be used from the menu or from a script.
			Any screen drivers ".drv" needed for the aa.cfg settings.
			The custom mouse or tablet driver ".idr" if used.

Player pulldown menu:

	Player:
		About 	- Displays info on player program.
		Memory  - Displays info on current memory usage.
		-----
		Quit 	- Exits player program.


	File:
		Load fli 	- loads a fli into ram, (if possible) and prepares it for
					  playing via the menu.  Frees the previous contents of 
					  ram.
		Open fli	- Opens a fli and prepares it for playing off disk.

		Load gif	- Loads a gif picture onto screen.
		Load pcx    - Loads a pcx picture onto screen.
		Load other  - Brings up the PDR menu and asks you to select type of 
					  file to load, then which file to load picture from onto 
					  screen.

		Play script - Opens, scans for errors and starts to execute a script.
					  Frees contents of ram first.

		-------

		Screen size - Brings up selector menu for changing screen driver and 
					  mode, (size).  Frees contents of ram and closes current 
					  fli first.

keyboard and mouse input:

	o - At any time:

		'+'	 add one "jiffy" to speed
		'-'	 subtract one "jiffy" from speed

		fkey 1  set speed to 0
		fkey 2  set speed to 3
		fkey 3  set speed to 6
		fkey 4  set speed to 9
		fkey 5  set speed to 12
		fkey 6  set speed to 18
		fkey 7  set speed to 24
		fkey 8  set speed to 36
		fkey 9  set speed to 48
		fkey 10 set speed to that specified in fli file


	o - During script playback:

	   These keys will perform an action and enter pause mode:

		   NOTE: When seeking backwards it will be very slow when flis
		   		have a lot of frames and the current frame is near the end of
				the fli.

		   (right arrow)  Advances current fli forward by one frame.
		   (left arrow)   Backs up current fli by one frame.
		   (up arrow) or (home key)  Sends current fli to first frame.
		   (end key) 	  Sends current fli to last frame.
		   (down arrow) or spacebar:  does nothing but enter pause mode.
		
			Entering pause mode, fli playing is suspended:

			Keys active during pause mode:

			   Spacebar or (down arrow):  ' ' again exits pause and resumes 
			   							  playback.

			   Control C or Escape:  Will act as when not paused.

			   These keys will position fli as in menu mode:
				   (right arrow)  Advances current fli forward by one frame.
				   (left arrow)   Backs up current fli by one frame.
				   (up arrow) or (home key)  Sends current fli to first frame.
				   (end key) 	  Sends current fli to last frame.

			*** end pause mode text ***

		Mouse left click or Backspace:  If entered during the play of a fli,
										or the pause after a fli's play will
			restart the play of the fli from the Beginning of the fli.  If 
			entered during the fade out after the pause, it will abort the fli
			and go on to the next item in the script.

		Control C.  Aborts script and exits program if started from the 
					command line, or goes back to the menu is started from the 
			interactive menu.

		Escape.    Aborts back to the end of the previous keychoice, if the 
				   current code is subordinate to a keychoice.  If no keychoice
			has occurred prior to the current playing fli, the escape key is
			synonymous to the action of exittodos.

		Mouse right click or any other key.    If during an image fadein it 
											   will abort image file fading 
			in and immediately go to the next image file in the script.

				If during a fli playback, or during the optional pause after 
			the playback, it will abort the play loop or pause and start the 
			fadeout if a fadeout was specified.  If no fadeout was specified 
			it immediately attempts to display the next image file item in the
			script.

	
o - only during menu driven mode:

		'q' or (escape key)  brings up quit requestor.

		' ' (space)  Toggles menu between on and off.

		(right arrow)  Advances current fli forward by one frame.

		(left arrow)   Backs up current fli by one frame.

		(up arrow) or (home key)  Sends current fli to first frame.

		(end key) 	  Sends current fli to last frame.

		(down arrow)  Hides menus and starts current fli playing.

o - during menu mode fli playback:

		Any key click not under "at any time" with the exception of mouse
		left click. will cancel the fli play.

Script file text commands:

	"Token" style:   The player script is a "token" based language.  Each 
					 discrete command, name, and number (word) must be separated 		by white space, (or a ',' a '(' or  a ')' when appropriate) from other 
		words.  Ie: "-s100" for speed of 100, is an error and "-s 100" is ok. 
				
		    A file name or path is one word and may not contain white space.
		or other characters are not allowed between the words in that they 
		will be interpreted as words or will be considered part of any word
		they are contiguous with. Any amount of white space or lines may
		separate the words.

	Comments: 	Comments may be put in script files.  Anything following
				two '/' characters (a "//") will be ignored until the end of 
		the line.  This does mean that the filename "file//.fli" could not be 
		loaded by the script although "file/.fli" could be

		Example:

			this is code // this is a comment
			this is more code // this is
			// another comment

	Commands or items with arguments:   color is an example of a function
									    with arguments contained within
		parentheses.  For this type of command the command must be followed
		by a '(' then the list of required arguments separated by commas ',',
		and a ')' to terminate the list.  The last argument should not have a 
		trailing comma. 

		// example of function with 3 arguments
		color(10, 2.0, 0.4)

	File path descriptions:   File path descriptions are ms-dos file paths.
							  The current directory for any fixed device is
		known about and paid attention to. However it is always assumed the
		current directory for a floppy drive is the root directory.  This is
		true even if the player was run from a floppy (it would be VERY slow).
		The current directory is always the directory the script is found in
		while a script is executing. Calling a script will change the current
		directory to the path of the called script and restore it when the 
		called script returns to the caller. It is always safer to fully 
		specify a path if you are not sure.

		ie:  If before the player is run the current directory of F: is
			 F:\fli then F:myfli.fli is seen as f:\fli\myfli.fli

			 on a floppy:

			 If dos has the current directory for a: as a:\subdir
			 then a:myfli.fli will be searched for as a:\myfli.fli
			 NOT as a:\subdir\myfli.fli

		Files on floppies:

			If flis are loaded from floppies care must be taken to make sure
			that each fli loaded has a unique name.  There is no way for the
			program to know the difference between a:\myfli.fli and
			a:\myfli.fli on another floppy.  only ONE fli for each path may
			be stored in ram at any one time and loading a a:\myfli.fli will
			free any a:\myfli.fli extant before loading the new one.

	Subroutines:  Subroutines are called from code via the gosub command. 
				  Subroutines are declared at the end of a script file after 
		The main script code.  The first subroutine declared will define the
		end of the main script code.  Subroutines are decalred using the words
		"subroutine" and "endsub". A declaration of a subroutine named sub1
		is as follows:

		subroutine sub1
		// subroutine code here

			\mydir\some.fli
			call thiscrip.scr
			\mydir\another.fli

		endsub

		The endsub word defines the end of a subroutine.
		Subroutines may NOT be declared inside other subroutines.

		subroutine sub1
		code code ...
		subroutine sub2
		code code ...
		endsub  // sub2
		endsub  // sub1

		Is not valid.

	Recursion stack:  Each script called has a fixed size recursion stack.
					  The stack is large enough to contain approximately 24 
		Levels of Loop, Gosub, and Keychoice recursion. An "out of stack space"
		error will occurr if too many levels of recursion are attempted.
		Each call command will allocate a separate stack for that script.
		Using a call command can be used to increase the number of recursion 
		levels. But using a call can frag memory for loading flis into ram.
		The memory allocated by a call is freed when that call exits.

	High level commands:

	o - break	If the script is in a loop and break is encountered the 
				loop will be aborted and the script will continue after
		the endloop for that loop.  Its primary purpose is within keychoice
		lists to specify a choice that will terminate a loop.  A break is
		encountered outside of any loop is invalid.

	o - call scriptpath   Call "scriptfile" as a subroutine from the
						  current scriptfile. Returns to the caller
			when the called script terminates.  If an exittodos or exittoplayer
			command is in the called script all scripts are aborted and
			the command's action is taken.


	o - exitscript    It's action is the same as reaching the end of the 
					  current script file.  It will exit the current script
		file and return to the caller.  If this is executed in the entry 
		script or a script executed via the link command exitscript is 
		synonymous with exittodos.  

	o - exittoplayer 	(one word) will abort the script. And return to the 
						player menu.

	o - exittodos   (one word) will abort the script.  If the script was run
					from the command line it will exit the player program.   
		If run from the player menu, it will return to the player menu.

	o - gosub name  Calls the subroutine "name" which must be declared within
					the current script file. See section on subroutines above.

	o - keychoice

			This command will monitor the keyboard during a fli's play and 
		perform the choice for valid keys entered by the user. 

			A keychoice may ONLY immediately follow the list of play 
		controls for a scripted animation and will monitor the keyboard while
		that animation is up. 

		The format of a keychoice is as follows:

		keychoice
			choice 1
				// commands for what to do when the '1' key is hit here
				call choice1.scr
			choice A
				// commands for what to do when the 'A' key is hit here
				gosub choiceA_sub
			choice 2
				// commands for what to do when the '2' key is hit here
				link choice2.scr
			choice escape
				// commands for what to do when the 'escape' key is hit here
				// over-rides other action for escape key.
				exitscript
		endchoice

			The command keychoice is followed by one or more "choice" entries
		which are followed by the symbol for what user input key is supposed
		to cause the script code following it to execute.  The available 
		choices are "escape" for the escape key, 0 to 9, A to Z
		and a to z. The key comparison is case independent, so 'A' will choose
		'a' and vice versa.  A choice may only be specified once for any one
		keychoice list. The keychoice list is ended by an "endchoice".

			If the user strikes a key for a choice while the preceding 
		animation is playing the scrip code following the choice entry for
		the key will begin executing.  When the next "choice" entry or 
		the "endchoice" is encountered then the script will resume immediately
		following the "endchoice" for the keychoice list.  There must be at 
		least one choice entry.

			Other key input checked for during a script play is acknowledged 
		while a keychoices's fli is up and may be locked out with the control
		keys lock, as it can otherwise.  The key lock will not lock out
		keyboard input specified in the choice list.

			If no pause "-p time" is specified for the fli preceding a 
		keychoice the default pause will be set to an infinite pause. If a
		pause is specified then the fli will enter the out transition when the
		pause is satisfied and the out transition is complete the keychoice 
		will exit and the script will continue.

			Keychoices may be nested. The example below is a hierarchial menu
		with 2 levels.  The main menu is brought up and waits for the user to
		choose 1,2 or escape.  1 and 2 bring up other menus that each have 
		their own keychoice waits, and escape will exit the infinite loop via
		a break command which will play epilog.fli and exit the script to dos.

			Each of the subordinate menus has 3 choices 1,2, and escape. 
		1 and 2 will call a specific script and escape will "fall through"
		and go back around the infinite loop to start again with the
		mainmenu.fli.

			The keychoice list is a very powerful way of making menu driven
		presentation displays.


		// beginning of sample script.  The indenting is just a matter of style
		// and is done to make it readable.

		loop 0 // loop back to this from the "endloop" until an exit or break

			mainmenu.fli 
			keychoice
				choice 1      // bring up menu1 and wait for another choice
					menu1.fli
					keychoice
						choice 1
							call script11.scr // play script11 for choice 1
						choice 2
							gosub sub12 // do subroutine sub12 for choice 2

						choice escape // note this choice does nothing
									  // but terminates this choice
					endchoice
				choice 2      // bring up menu2 and wait for another choice
					menu2.fli
					keychoice
						choice 1
							call script21.scr // play script21 for choice 1
						choice 2
							gosub sub22 // do subroutine sub22 for choice 2

						choice escape // Note: this choice does nothing,
									  // but terminates this choice.
					endchoice
				choice escape // exit infinite loop and continue script
					break
			endchoice

		endloop
		epilog.fli
		exittodos
		// end of sample script 

	o - link scriptpath  "chains" to or "jumps" to another script file. 
						 Similar to the call command but exits the
		calling script and jumps to scriptfile it loses all information
		about the caller and can not return back to the caller except via 
		a link or call command coded in scriptfile. All flis in ram are
		freed before the linked script is executed.

	o - loop(count)  Execute script code after this until the next
					 "endloop" command count times.  Count is an integer
		1 or greater and is the number of times to execute the loop. If count
		is the word "forever" the loop is executed until the script is exited.
		Loops may be nested up to 5 levels.

		Example:

			// play intro.scr once,
			// gosub big_play 10 times, and play epilog.fli, twice.

			loop(2)
				call intro.scr
				loop(10)
					gosub big_play
				endloop
				f:\fli\epilog.fli
			endloop

			// The indenting is just a matter of style, but makes a script more
			// readable.

	o - return		If inside a subroutine, the subroutine is returned to the
					Caller.  If not inside a subroutine does the equivalent of
		exitscript.

	o - loadfli flipath 	If the fli is played within the script it will
							load the fli into ram if ram is available. If it is
			from a floppy, it will ask the user to insert the disk in the drive
			and will load after selecting YES or abort the script if NO. If no
			ram is available when loading from floppy the script will be 
			aborted. For floppies the path specified should be the full path 
			for the file. ie a:myfli.fli. will be interpreted as
			a:\myfli.fli,  The current directory for the floppy will be ignored.
			twice once during the script syntax check and again when the fli
			is loaded, and the floppy must be in the drive when the script is 
			started.

				Memory usage can not be fully estimated when the script is 
			scanned during the syntax check pass. The only way to make sure a 
			script will have all the memory it needs is to run the entire thing.

	o - freefli	flipath(s) 	The inverse of loadfli. Will free the fli from ram
							If loaded.	If the fli is not in ram no action 
			will be taken.  All flis in ram will be freed when the script exits
			or another script is linked to. The path used to free must be the 
			same path used to load the fli.
			
			/* maybe if it gets done */
			This may have a "starname" as
			input as in "a:\fli\*.fli" "*.*" "aa*.fli"

	o - Any word not above is interpreted as as the path of the next
			fli or gif file to be displayed or as defined by the defaults or
			by immediately subsequent optional play control options.


Optional image file display controls to immediately follow the file path:

	o   -l (loops) play the fli (loops) times. Ignored for non fli file
			types. default 1 loop.  "-l 0" means loop forever.  
			
				// When playing flifile.fli 2o times,

				flifile.fli -l 20 
				
				// is more efficient than,

				loop(20)
					flifile.fli
				endloop

				// Although both do the same thing.  This is because a fli
				// file has its own internal looping mechanism.  The other way
				// will open and close the file 20 times.

	o   -p (pause) pause after displaying the image or fli (pause) seconds.
			The pause value is specified as a decimal number ie: "-p 1.5"
			is pause for one and one half seconds. "-p 0" means pause forever.
			The default is no pause for multi frame files, 5.0 seconds for 
			single frame image types. 

	o   -s (speed) Set playback speed in jiffies (1/70th sec) for fli files.
			the seed value is specified as a positive integer. "-s 5" means
			play at a speed of 5 jiffies per frame. Any speed specification
			is Ignored for single frame types. The default speed
			used for a fli file is the speed recorded in the file.

	o   -type (pdr load type)  This will specify the type of image to be
							   loaded.  The pdr load type is the prefix of 
			the filename of the ".pdr" picture driver to be used to load the
			image.  The name "fli" is an internal name and an external pdr 
			"fli.pdr" may not be called.  
			
			Example:

				// load and display a picture using the driver in the resource
				// directory named  "myloader.pdr" pausing for 10 seconds and
				// fading in and fading out to default colors.

				\the\full\path\mypic -type myloader -p 10 fadein fadeout


	o   -t Perform a transition on this image followed by either a "in" 
			transition, an "out" transition, or one of each. 

			In transitions:

				fadein [fade options]  	Set screen to the color specified, 
										Load the picture in the background. 
					Fade screen from set color to the loaded image over the 
					time specified. The default fadein color is the color
					of the previous fadeout or black if the previous 
					out transition was a cut.

				cut		 [simple cut, default if unspecified] The image is 
						 loaded directly to the screen.
					Cut has no options.

			Out transitions:

				fadeout [fade options]   After the image has been played 
										 fade the last frame of the image to 
					the color specified over the time specified. The default
					fadeout color is black.
				
				cut		 [simple cut, default if unspecified]
						 Cut has no options.

			Fade transition options:

					Fadein and Fadeout may be followed by one or both of a fade
				time specifier as a decimal number of seconds and a fade color
				specifier.  The default fade time if unspecified is 0.8 seconds.
				A fade time of 0 will specify a "cut" transition.
				
				Fade colors: black, white, or color(red,green,blue).
					color(r,g,b)  has 3 arguments; r, g, and b they are decimal
					numbers from 0 to 255 with 255 being full on and 0 
					being full off white is a synonym for color(255,255,255) 
					black  is the same as color(0,0,0).

			Examples:

				-t fadein 0.8 fadeout 1

					(fade in from white over 0.8 seconds.  fade out to white
					 over 1.0 seconds. this is equivalent to either)

					   -t fadein white .8 fadeout 1
					or -t fadein .8 fadeout 1 white
					or -t fadein fadeout white 1
					or -t fadein color(255,255,255) fadeout white 1

				-t fadein  

					( fade in to white over 0.8 seconds. eqivalent to 
						any of the following )

					-t fadein white 
					-t fadein cut white
					-t fadein white cut
					-t fadein 0.8 
					-t fadein color(255,255,255) .8
					-t fadein 00.8 white cut
					-t fadein white .8 cut

				-t fadein cut  

					(fade in from black over 0.8 seconds cut out)

				-t cut cut

					(the default case if "-t" was not specified)

	o - Any word not interpreted as a play control will terminate the control
		list and will be interpreted as the the next high level command.



