/*---------------------------------------------

   ALLSTAR.POC

   POCO routine to create a moving star field
   allowing the user a number of options as
   to source point for on-coming stars, whether
   the stars come straight on or vear off at
   a use-defined angle, etc.


   Based on the STARFIEL.POC routine.

   Last modification:  1 April 91
   By: PhilD...
  ---------------------------------------------*/




#define TRUE 1
#define FALSE 0

#define ZMAX 500.0              /* Farthest back things get */
#define ZMIN (-100.0)		/* closest things get before perspective blows up */
#define ZDEPTH (ZMAX-ZMIN)	/* length of total Z space */
#define ZSMALL (ZMIN+1.0)	/* fudge factor to keep perspective in bounds */
#define COLORS 256              /* total number of colors */
#define ZCOLS 32                /* Number of colors in ramp of a single star */
#define ZRAMPS (COLORS/ZCOLS)   /* Number of different color ramps */


int scount = 333;               /* number of stars */
double *x, *y, *z;              /* 3-D star positions */
int DispX, DispY;               /* angular displacement components */
double Warp;                    /* user definable speed factor */
int AccelFrames;                /* number of frames to accelerate to full speed */
char *color;                    /* Color of stars */
int sw, sh;
double cenx,ceny;
int total_frames = 50;
typedef struct {int r; int g; int b;} Rgb3;
Rgb3 rtab[ZRAMPS] =
    {
    {255, 255, 255},
    {255, 200, 200},
    {200, 255, 200},
    {200, 200, 255},
    {255, 100, 100},
    {100, 100, 255},
    {100, 255, 100},
    {200, 200, 200},
    };







make_ramp(int start, int colors, int rmax, int gmax, int bmax)
     {
     int i;

     for (i=0; i<colors; ++i)
          SetColorMap(start+i, rmax*i/colors, gmax*i/colors, bmax*i/colors);
     }







/*-----------------------------
  Make a bunch of color ramps
  -----------------------------*/
init_colors()
     {
     int i;

     for (i=0; i<ZRAMPS; ++i)
          make_ramp(ZCOLS*i, ZCOLS, rtab[i].r, rtab[i].g, rtab[i].b);
     }






/*--------------------------------------
   Initialize the data associated
   with a star index to a random value
  --------------------------------------*/
random_star(int starix)
     {
     x[starix] = rnd(2000)-1000;
     y[starix] = rnd(2000)-1000;
     z[starix] = rnd(595)-95;
     color[starix] = rnd(ZRAMPS)*ZCOLS;
     }






/*--------------------------------------
   Allocate star arrays and set all
   stars to a random positions and
   colors
  --------------------------------------*/
init_stars(int count)
     {
     int i;

     if ((x = malloc(count*sizeof *x)) == NULL)
          goto ERROUT;
     if ((y = malloc(count*sizeof *y)) == NULL)
          goto ERROUT;
     if ((z = malloc(count * sizeof *z)) == NULL)
          goto ERROUT;
     if ((color = malloc(count * sizeof *color)) == NULL)
          goto ERROUT;
     scount = count;
     for (i=0; i<scount; ++i)
          random_star(i);
     return(TRUE);

ERROUT:
     Qtext("Not enough memory for star arrays");
     return(FALSE);
     }







/*-------------------------
   Draw all the stars
  -------------------------*/
see_stars()
     {
     int i;
     double zscale,zz;

     for (i=0; i<scount; ++i)
          {
          zz = z[i];                           /* get Z coordinate */
          if (zz > ZSMALL)
               {                               /* set color to match z */
               SetColor(color[i]+(ZMAX-zz)*(ZCOLS/ZDEPTH));
               zscale = -ZMIN/(zz-ZMIN);       /* find perspective shrink factor */
               Dot(cenx+DispX+x[i]*zscale,ceny+DispY+y[i]*zscale);
               }
          }
     }






/*-----------------------------------
  Move all the stars from source
  point to sink point at a speed
  determined by number of frames and
  by the Warp Factor supplied by the
  user.
  -----------------------------------*/
move_stars()
     {
     int i;
     double percent;
     double dist = (ZDEPTH*Warp)/(total_frames);

     if (AccelFrames > 0)                   /* compute acceleration percent */
          if (GetFrame() <= AccelFrames)
               {
               percent = GetFrame() / (AccelFrames*1.0);
               dist = (ZDEPTH*(Warp*percent)/total_frames);
               }

     for (i=0; i<scount; ++i)
          {
          if ((z[i] = z[i]-dist) < ZMIN)
               z[i] += ZDEPTH;
          }
     }






/*--------------------------------
   Do one time initializations
  --------------------------------*/
init()
     {
     GetSize(&sw,&sh);               /* find out screen size */
     cenx = sw/2;                    /* and calculate screen center */
     ceny = sh/2;
     DispX = 0;                      /* no initial left or right displacement */
     DispY = 0;                      /* no initial up or down displacement */
     Warp = 0;                       /* set for default speed */
     AccelFrames=0;                  /* 0 means start at full speed */
     if (!init_stars(scount))
          return(FALSE);             /* set up the arrays holding the stars */
     init_colors();                  /* set up ramped color map */
     return(TRUE);
     }





/*-------------------------------
   main routine for ALLSTAR.POC
  -------------------------------*/
main()
     {
     int i;
     int SourceX, SourceY, DestX, DestY;
     int left, right, key;
     int speed=1;
     int frames;

     if (!Qnumber(&total_frames, 1, 200, "Number of frames for star-field"))
          return;

     if (total_frames < 1)
          return;

     if (SetFrameCount(1) < 0)
          return;

     Clear();

     if (!Qnumber(&scount, 10, 1000, "Number of stars in field"))
          return;

     if (scount < 1)
          return;

     if (!init())
          return;

     if (!Qquestion("Source from screen center?"))
          {
          Qtext("Pick a source point and a sink point");      /* get user's source/sink points for stars */
          WaitClick(&SourceX, &SourceY, &left, &right, &key); /* source point */
          RubLine(SourceX, SourceY, &DestX, &DestY);          /* rubber band line to sink point */
          cenx = SourceX;
          ceny = SourceY;

          if (DestX > SourceX)
               DispX = (DestX / SourceX);
          else
               DispX = (-1 * SourceX / DestX);

          if (DestY > SourceY)
               DispY = (DestY / SourceY);
          else
               DispY = (-1 * SourceY / DestY);
          }

     if (Qnumber(&speed,1,10,"Warp Factor"))
          Warp = (speed / 5.0);


     if (Qquestion("Accelerate from standstill?"))     /* allow user to specify a from-stand-still acceleration */
          {
          frames = total_frames / 5;
          if (Qnumber(&frames,1,total_frames,"Number of frames to accelerate across"))
               AccelFrames = frames;
          }

     if (SetFrameCount(total_frames) < 0)
          return;

     for (i=0;i<total_frames;++i)
          {
          see_stars();
          move_stars();
          NextFrame();
          }
     }
