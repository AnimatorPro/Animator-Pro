#include <ctype.h>
#include <errcodes.h>
#include <stdio.h>

#define TRUE 1
#define FALSE 0
#define ESC 0x1b
#define EOS 0

int sw,sh;
char abcs[256];

make_abcs()
{
int i;

for (i=0x20; i<255; ++i)
	abcs[i-0x20] = i;
}


FILE *log_file;

open_log()
{
char *log_name = "h:\\allfont.log";

if ((log_file = fopen(log_name, "w")) == NULL)
	{
	Qtext("Couldn't open log file %s\n", log_name);
	exit(-1);
	}
}

see_font(char *name)
{
int fh;
int occolor;

if (CanScaleFont())
	ScaleFont(50);
fh = FontHeight()+2;
occolor = GetColor();
Clear();
Box(0,0,4+StringWidth(name),fh);
SetColor(0);
Text(2,2,name);
SetColor(occolor);
WordWrap(0, fh, sw, sh-fh, abcs);
}

display_font(char *name)
{
ErrCode err;

if (log_file == NULL)
	open_log();
fprintf(log_file, "%s\n", name);
fflush(log_file);
if ((err = LoadFont(name)) < Success)
	{
	Qerror(err, "Couldn't load %s", name);
	return;
	}
see_font(name);
}

typedef struct strings
	{
	struct strings *next;
	char *string;
	} Strings;
Strings *strings_new(char *string)
/* Make up a Strings structure with a fresh copy of string in it. */
{
	Strings *new;

	if ((new = malloc(sizeof(*new))) == NULL)
		return NULL;
	if ((new->string = strdup(string)) == NULL)
		{
		free(new);
		return NULL;
		}
	return new;
}
int strings_count(Strings *list)
/* Count up # of strings in list. */
{
	int count = 0;

	while (list != NULL)
		{
		++count;
		list = list->next;
		}
	return count;
}
ErrCode strings_to_array(Strings **plist, char ***parray,  int *pcount)
/* Convert linked list of strings to array of strings.  This will
 * destroy the list in the process. Array will be in reverse order of
 * list (since list is usually read in backwards.) */
{
	Strings *list = *plist;
	Strings *next;
	char **array;
	int count;
	int i;

	*pcount = count = strings_count(list);
	if (count != 0)
		{
		if ((*parray = array = calloc(count, sizeof(array[0]))) == NULL)
			return Err_no_memory;
		for (i=0; i<count; ++i)
			{
			array[count - i - 1] = list->string;
			next = list->next;
			free(list);
			list = next;
			}
		}
	*plist = NULL;
	return Success;
}

int get_space_separated_string(FILE *f, char *string, int max_size)
{
	int size = 0;
	int c;

	for (;;)
		{
		c = getc(f);
		if (c == EOF)
			return 0;
		if (!isspace(c))
			break;
		}
	max_size -= 1;	// Leave room for zero tag.
	for (;;)
		{
		if (c == EOF || isspace(c))
			break;
		string[size] = c;
		if (++size >= max_size)
			break;
		c = getc(f);
		}
	string[size] = EOS;
	return size;
}


Boolean load_strings_from_file(char *filename, char ***plist,  int *pcount)
{
	FILE *f;
	Strings *list = NULL;
	Strings *string;
	char buf[256];
	ErrCode err;
	int string_count = 0;

	if ((f = fopen(filename, "r")) == NULL)
		{
		Qtext("Couldn't find %s\n", filename);
		return FALSE;
		}
	for (;;)
		{
		if (get_space_separated_string(f, buf, sizeof(buf)) == 0)
			break;
		if ((string = strings_new(buf)) == NULL)
			{
			Qerror(Err_no_memory, "Couldn't allocate String %s", buf);
			return FALSE;
			}
		string->next = list;
		list = string;
		++string_count;
		}
	err = strings_to_array(&list,  plist, pcount);
	if (err < Success)
		{
		Qerror(err, "strings_to_array");
		return FALSE;
		}
	return TRUE;
}

do_all_fonts(Boolean step, Boolean advance)
{
char ofname[80];
char **flist;
int fcount;
int i;
int x,y,l,r,k;


GetFontName(ofname);
if (!load_strings_from_file("fontlist.txt", &flist, &fcount))
	return;
if (advance)
	{
	if (GetFrameCount() < fcount)
		SetFrameCount(fcount);
	}
for (i=0; i<fcount; i++)
	{
	display_font(flist[i]);
	if (step)
		WaitClick(&x,&y,&l,&r,&k);
	else
		PollInput(&x,&y,&l,&r,&k);
	if (r || (k&0xff) == ESC)
		if (Qquestion("Stop going through fonts?"))
			break;
	if (advance)
		NextFrame();
	}
LoadFont(ofname);
}

char *choices[] = 
	{
	"Step through fonts",
	"Run through fonts",
	"Fonts into flic",
	"See current font",
	"Font Requestor",
	"Exit",
	};

/*** Stuff to save away and restore AniPro state. ***/
typedef struct 
	{
	Screen *oscreen;
	} AniState;

AniState old_state;

Errcode ani_state_save(AniState *this)
{
ErrCode err;

if ((err = AllocScreen(&this->oscreen,sw,sh)) < Success)
	{
	err = Qerror(err, "Can't save current screen");
	return err;
	}
CopyScreen(GetPicScreen(), this->oscreen);
return Success;
}

void ani_state_restore(AniState *this)
{
CopyScreen(this->oscreen,GetPicScreen());
FreeScreen(&this->oscreen);
}


main()
{
ErrCode err;
char font_name[80];

GetSize(&sw,&sh);
make_abcs();
if ((err = ani_state_save(&old_state)) < Success)
	return;
SetAbort(FALSE);
for (;;)
	{
	switch (Qmenu(choices, Array_els(choices), "Quick font tester"))
		{
		case 0:
			goto OUT;
		case 1:
			do_all_fonts(TRUE, FALSE);
			break;
		case 2:
			do_all_fonts(FALSE, FALSE);
			break;
		case 3:
			if (Qquestion("Create new flic containing font samples?"))
				{
				NewFlic();
				do_all_fonts(FALSE, TRUE);
				CopyScreen(GetPicScreen(), old_state.oscreen);
				}
			break;
		case 4:
			GetFontName(font_name);
			see_font(font_name);
			break;
		case 5:
			Qfont();
			GetFontName(font_name);
			see_font(font_name);
			break;
		}
	}
OUT:
ani_state_restore(&old_state);
}
