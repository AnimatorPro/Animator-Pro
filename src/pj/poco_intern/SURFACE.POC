
int t1 = 0;
int h = 0;
int wire = 20;
int p1,p2;
int screen_x = 0;
int screen_y = 0;

double x = 0;
double y = 0;
double z = 0;
double sx = 0;
double sy = 0;
double xa = 0;
double ya = 0;
double za = 0;
double d = 1200;
double roll = 5.88319;                  /* view orientation */
double pitch = 6.28319;
double yaw = 5.79778;
double Ani_pitch=0.0;
double Ani_yaw=0.0;
double Ani_roll=0.0;
double mx = 0;
double my = 0;
double mz = -150;
double rx = 0;
double ry = 0;
double b11[100][2];
double b12[100][2];
double x1 =-30;
double y01 = 0;
double x4 = 30;
double y4 = 0;
double x2=-10;
double y2 =15;
double x3 = 10;
double y3=-35;
double j01 = 0;
double j2 = 0;
double j3 = 0;
double j4 = 0;
double t = 0;
double t2 = 0;
double t3 = 0;
double sx1 = 0;
double sy1 = 0;
double sx2 = 0;
double sy2 = 0;
double pi = 3.1415926535898;              /* pi to double precision */
double FullCircle = pi * 2;
double OneDegree = FullCircle / 360;







calc_3d()
     {

     x=(-1)*x;
     xa=cos(roll)*x-sin(roll)*z;
     za=sin(roll)*x+cos(roll)*z;
     x=cos(pitch)*xa+sin(pitch)*y;
     ya=cos(pitch)*y-sin(pitch)*xa;
     z=cos(yaw)*za-sin(yaw)*ya;
     y=sin(yaw)*za+cos(yaw)*ya;
     x=x+mx;
     y=y+my;
     z=z+mz;
     sx=d*x/z;
     sy=d*y/z;
     }




window()
     {
     sx=sx+399;
     sy=sy+299;
     rx=screen_x/799.0;
     ry=screen_y/599.0;
     sx=sx*rx;
     sy=sy*ry;
     }



/*----------------------
  calculates any X,Y
  the surface

       -1   3  -3
	3  -6	3
       -3   3	0
  ----------------------*/
freeform()
     {
     j01= x1*  (-1*t3 +  3*t2 + -3*t +1);
     j2 = x2*  ( 3*t3 + -6*t2 +  3*t   );
     j3 = x3*  (-3*t3 +  3*t2 +  0*t   );

     j4= x4*t3;
     x=j01+j2+j3+j4;

     j01= y01* (-1*t3 +  3*t2 + -3*t +1);
     j2 = y2*  ( 3*t3 + -6*t2 +  3*t +0);
     j3 = y3*  (-3*t3 +  3*t2 +  0*t +0);

     j4=y4*t3;
     y=j01+j2+j3+j4;
     }









/*------------------------------------------
  draw the mesh on the screen
  ------------------------------------------*/
DrawMesh()
     {
     int lastx, lasty;

     t=t2=t3=0; 			      /* near edge */
     freeform();
     z=30;
     calc_3d();
     window();
     Dot(sx,sy);
     lastx = sx;
     lasty = sy;
     h=0;
     for (t=0;t<=1.01;t+=(1.00/wire))
	   {
	   t2=t*t;
	   t3=t*t*t;
	   freeform();
	   z=30;
	   calc_3d();
           window();
           Line(lastx,lasty,sx,sy);
           lastx = sx;
           lasty = sy;
	   b11[h][0]=sx;
	   b11[h][1]=sy;
	   h=h+1;
	   }

     t=t2=t3=0;
     freeform();
     z=-30;
     calc_3d();
     window();

     Dot(sx,sy);
     lastx=sx;
     lasty=sy;
     h=0;
     for (t=0;t<1.01;t+=(1.00/wire))
	  {
	  t2=t*t;
	  t3=t*t*t;
	  freeform();
	  z=-30;
	  calc_3d();
          window();
          Line (lastx,lasty,sx,sy);
          lastx = sx;
          lasty = sy;
	  b12[h][0]=sx;
	  b12[h][1]=sy;
	  h=h+1;
	  }

     for (h=(-30+(60/wire));h<=(30-(60/wire));h+=(60/wire))
	  {
	  t=t2=t3=0;
	  freeform();
	  z=h;
	  calc_3d();
          window();
          Dot(sx,sy);
          lastx = sx;
          lasty = sy;
          for (t=0;t<1.01;t+=0.05)
		{
		t2=t*t;
		t3=t*t*t;
		freeform();
		z=h;
		calc_3d();
                window();
                Line (lastx, lasty, sx, sy);
                lastx = sx;
                lasty = sy;
		}
	  }

     for (h=0;h<=wire;h++)
	  {
	  sx1=b11[h][0];
	  sy1=b11[h][1];
	  sx2=b12[h][0];
          sy2=b12[h][1];
          Line(sx1,sy1,sx2,sy2);
	  }
     }






main()
     {
     int MouseX, MouseY, left, right, key;
     int troll, tpitch, tyaw;                   /* temporary values */
     int apitch, ayaw, aroll;                   /* degrees to animate */
     int distance=1200;                         /* viewer's distance from object */
     int adist=0;                               /* distance to animate through */
     int total_frames,i;
     int ppong;

     troll  = roll/(2*pi) * 360.0;
     tyaw   = yaw/(2*pi) * 360.0;
     tpitch = pitch/(2*pi) * 360.0;


     Qtext("This utility models and\nanimates a 3D Surface\nVer 1.0");
     GetSize(&screen_x,&screen_y);
     Clear();
     SetColor(63);

     Qnumber(&troll,0,360,"Roll");
     roll = troll * (2*pi / 360.0);
     Qnumber(&tpitch,0,360,"Pitch");
     pitch = tpitch * (2*pi / 360.0);
     Qnumber(&tyaw,0,360,"Yaw");
     yaw = tyaw * (2*pi / 360.0);
     Qnumber(&distance,0,5000,"Distance");
     d = distance;

     Clear();                                   /* clear the screen */

     if (Qquestion("Animate?"))
          {
          if (!Qnumber(&total_frames, 1, 200, "Number of frames for Surface Animation"))
               return;

          if (total_frames < 1)
               return;

          if (GetFrameCount() < (total_frames + GetFrame()))
               if (SetFrameCount(GetFrame() + total_frames) < 0)
                    return;

          aroll = 360;
          apitch = 0;
          ayaw = 0;
          Qnumber(&aroll,0,360,"Degrees to Roll through");
          Ani_roll = aroll * (2*pi / 360.0);
          Qnumber(&apitch,0,360,"Degrees to Pitch through");
          Ani_pitch = apitch * (2*pi / 360.0);
          Qnumber(&ayaw,0,360,"Degrees to Yaw through");
          Ani_yaw = ayaw * (2*pi / 360.0);
          Qnumber(&adist,-5000,d,"Distance to move From/Toward");
          if (adist != 0)
               if (Qquestion("Ping Pong the Distance Motion?"))
                    ppong = 1;

          for (i=0;i<total_frames;++i)
               {
               DrawMesh();
               NextFrame();
               yaw += Ani_yaw / total_frames;
               pitch += Ani_pitch / total_frames;
               roll += Ani_roll / total_frames;
               if (adist != 0)
                    {
                    if (ppong)
                         if (i >= (total_frames / 2))
                               d -= adist/(total_frames/2);
                         else
                               d += adist/(total_frames/2);
                    else
                         d += adist/total_frames;
                    }
               }
          }
     else
        DrawMesh();                             /* draw the silly mesh */

     return;
     }
