#define Success 0

void make_centered_rectangle(double size, int *x, int *y)
/* Make a rectangle polygon centered.  Size should be between 0.0 and 1.0.
   This 1.0 will make a rectangle that is full screen. */ 
{
int sw,sh;
int w,h;
int xoff,yoff;

/* Calculate width, height and offset of upper left corner. */
GetSize(&sw,&sh);
w = size * sw;
h = size * sh;
xoff = (sw-w)/2;
yoff = (sh-h)/2;

/* Fill in x and y arrays. */
x[0] = xoff;
y[0] = yoff;
x[1] = xoff+w;
y[1] = yoff;
x[2] = xoff+w;
y[2] = yoff+h;
x[3] = xoff;
y[3] = yoff+h;
}

test_cross_links()
{
int rect_x[4], rect_y[4];
int rect_count = 4;
int link_s[2], link_e[2];
int link_count = 2;

make_centered_rectangle(0.5, rect_x, rect_y);
TweenSetStart(rect_count, rect_x, rect_y);
make_centered_rectangle(0.4, rect_x, rect_y);
TweenSetEnd(rect_count, rect_x, rect_y);
link_s[0] = 1;
link_e[0] = 3;
link_s[1] = 3;
link_e[1] = 1;
TweenSetLinks(link_count, link_s, link_e);
TweenTrails(5);
}

display_tween()
/* Show both endpoints of tween and links. */
{
/* This example draws the start and the end shapes as polygons,
 * and then draws lines between the points that are linked.
 * (Not unlike the display at the tween panel, but lacking color. */
int start_count, *start_x, *start_y;        // Start polygon.
int end_count, *end_x, *end_y;              // End polygon.
int link_count, *start_links, *end_links;   // Links.
int i;                                      // Loop counter
int start_ix, end_ix;                       // Position in polys.

	/* First get polys and links from tween system. */
if (!TweenExists())
	return;                                 // Bail out if no tween.
TweenGetStart(&start_count, &start_x, &start_y);
TweenGetEnd(&end_count, &end_x, &end_y);
TweenGetLinks(&link_count, &start_links, &end_links);
	/* Now draw both polys. */
Poly(start_count, start_x, start_y);
Poly(end_count, end_x, end_y);
	/* And loop through links drawing each one. */
for (i=0; i<link_count; ++i)                // Do this for each link
	{
	start_ix = start_links[i];                  // Find start vertex.
	end_ix = end_links[i];                      // Find end vertex.
	Line(start_x[start_ix], start_y[start_ix]   // Draw a line from
	, end_x[end_ix], end_y[end_ix]);            // one to the other.
	}
	/* Now free up everything */
free(start_x); free(start_y);               // Free start polygon.
free(end_x); free(end_y);                   // Free end polygon.
if (link_count)                             // If there were any links
	{
	free(start_links);                      // then free them 
	free(end_links);                        // too.
	}
}

AnotherTweenTrails(int steps)
{
int ptcount, *x, *y;    // Store the polygon here.
double how_far;         // Somewhere between 0 and 1.
int i;                  // Yer basic loop counter.

steps -= 1;             // Don't make me explain this....
for (i=0; i<=steps; ++i)
	{
	how_far = i;                // Do it this way,  not as
	how_far /= steps;           // how_far = i/steps;  (Trust me.)
	TweenMakePoly(how_far, &ptcount, &x, &y);
	Poly(ptcount, x, y);        // Draw the inbetween polygon.
	free(x); free(y);           // Free up coordinates.
	}
}


main()
{ 
ErrCode err; 
int rect_x[4], rect_y[4], rect_count = 4;

Qtext("Welcome to the tween tester.  This will make an 11 frame "
	  "long animation that exercises the tweening system.  At the "
	  "top of each frame will be a text description.");

/* Oh Gosh, there seems to be a bug in Reset(), so instead... */
Reset();
//SetFrameCount(1);
//Clear();
//SetInk("Opaque");

SetFrameCount(11);
SetFilled(FALSE);
SetCycleDraw(TRUE);

Text(0,0,"This is the existing tween");
if (TweenExists())
	{
	TweenTrails(5);
	TweenClear();
	}
NextFrame();

if (TweenExists())
	Qtext("Dang, I thought I got rid of it.");

Text(0,0,"This is testtwee.twe");
err = Qerror(TweenLoad("testtwee.twe"), "Trying to load testwee.twe");
if (err >= Success)
	{
	TweenTrails(5);
	}
NextFrame();

Text(0,0, "This is a tween with no motion");
make_centered_rectangle(0.5, rect_x, rect_y);
TweenClear();		//DEBUG
err = TweenSetStart(rect_count, rect_x, rect_y);
Qerror(err, "TweenSetStart");
TweenTrails(5);
NextFrame();

Text(0,0,"This tween starts big and ends small");
make_centered_rectangle(0.25, rect_x, rect_y);
Qerror(TweenSetEnd(rect_count, rect_x, rect_y), "TweenSetEnd");
TweenTrails(5);
NextFrame();


Text(0,0, "This tween starts small and ends big");
TweenSwapEnds();
TweenTrails(5);
NextFrame();

Text(0,0, "This tween crawls into itself");
TweenEndToStart();
TweenOneLink(0,1);
TweenTrails(10);
NextFrame();

Text(0,0, "This is a home made trail");
AnotherTweenTrails(5);
NextFrame();

Text(0,0,"This rectangle turns inside out and shrinks.");
test_cross_links();
err = Qerror(TweenSave("testtwee.twe"), "Trying to save testwee.twe");
NextFrame();


Text(0,0,"This is both endpoints the links");
display_tween();
NextFrame();

Text(0,0,"This is with the links cleared");
TweenClearLinks();
display_tween();
NextFrame();

Text(0,0, "This is a splined tween");
if (TweenGetSplined())
	Qtext("How unusual, Spline was already set");
TweenSetSplined(TRUE);
if (!TweenGetSplined())
	Qtext("Hmm, I thought spline was just set");
TweenTrails(3);
NextFrame();

if (Qquestion("Render a big rect over all in glass?"))
	{
	SetInk("Glass");
	TweenSetSplined(FALSE);
	make_centered_rectangle(0.5, rect_x, rect_y);
	err = TweenSetStart(rect_count, rect_x, rect_y);
	make_centered_rectangle(1.0, rect_x, rect_y);
	err = TweenSetEnd(rect_count, rect_x, rect_y);
	TweenOneLink(3,2);
	TweenRender();
	}
}
