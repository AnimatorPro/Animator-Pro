// fatsoft.poc - a little test-bed to develop routines to
// draw efficiently with soft-edged brushes.


// Here are some data types used in code that deals with MFC
// and Windows.  Here for portability.
typedef char BYTE;
typedef int BOOL;
typedef struct {int x, y;} CPoint;
typedef struct {double x, y;} CDoublePoint;


int envValueAt(double input)
// Input is between 0 and 1.  Returns color at that position.
{
    static int *cluster = NULL;
    static int clusterSize;
    if (cluster == NULL)
        GetCluster(&clusterSize, &cluster);
    int ix = input*clusterSize;
    if (ix >= clusterSize)
        ix = clusterSize-1;
    return cluster[ix];
}

static void sampleEnvelope(char *buf, int w)
// Put w samples of envelope into buf.  This matches
// the sample that would come from the center of a
// brush.
{
    double x;
    double rad = w/2.0;
    int mid = w/2;
    int mid1;
    double start;
    // Odd and even sizes are handled pretty differently...
    if (w & 1) {
        start = 0;
        mid1 = mid;
    } else {
        start = 0.5;
        mid1 = mid-1;
    }
    int ix = 0;
    for (x = start; x < rad; x += 1.0) {
        BYTE color;
        color = envValueAt(1.0 - x/rad);
        buf[mid+ix] = buf[mid1-ix] = color; 
        ++ix;
    }
}

static void makeCircleBrush(int xoff, int yoff, int diameter, Screen *screen)
// Make a circle brush of given size on screen.
// 
// This routine only actually calculates 1/4 of the points, and then
// reflects these into the other 3 quadrants.
// In the case of an odd-diameter the middle line just gets 
// reflected onto itself.
{
    if (diameter == 1){  // One pixel brush
        SetPixel(screen, envValueAt(1.0), xoff, yoff);
    } else {
        // The 16 bit arithmetic and the line buffer will both blow
        // if diameter is more than 255.

        // ASSERT(diameter <= 255);
        BYTE lineBuf[255];

        double x, y;
        int mid = diameter/2;
        int mid1;
        double start;
        // Odd and even sizes are handled pretty differently...
        if (diameter & 1) {
            start = 0;
            mid1 = mid;
        } else {
            start = 0.5;
            mid1 = mid-1;
        }
        double rad = diameter/2.0;
        double radSquared = rad*rad;
        int iy = 0;
        for (y = start; y < rad;  y += 1.0) {
            double y2 = y*y;
            int ix = 0;
            for (x = start; x < rad; x += 1.0) {
                double distSquared = y2 + x*x;
                BYTE color;
                if (distSquared <= radSquared) {
                    double dist = sqrt(distSquared);
                    color = envValueAt(1.0 - dist/rad);
                } else {
                    color = 0;
                }                            
                lineBuf[mid+ix] = lineBuf[mid1-ix] = color; 
                ++ix;
            }
            SetBlock(screen, lineBuf, xoff, yoff+mid+iy, diameter, 1);
            SetBlock(screen, lineBuf, xoff, yoff+mid1-iy, diameter, 1);
            ++iy;
        }                
    }
}

// A little function/macro to round a double into an int.

//static inline int round(double d) { return (int)(d + 0.5); }
#define round(d) ((int)((d)+0.5))

void scalePointTo(CDoublePoint *p, double newSize)
// Change length of vector to newSize without changing
// it's direction.
{
    double size = sqrt(p->x*p->x + p->y*p->y);
    p->x = p->x * newSize/size;
    p->y = p->y * newSize/size;
}

static void fillInnerQuad(Screen *screen, CDoublePoint *pfromPoint, 
    CDoublePoint *ptoPoint,  int brushWidth)
// Draw the tube connecting the two brushes at the ends of a line.
{   
    // Ok, some kludges cause Poco can't pass structures by value.
    CDoublePoint fromPoint;
    fromPoint.x = pfromPoint->x;
    fromPoint.y = pfromPoint->y;
    CDoublePoint toPoint;
    toPoint.x = ptoPoint->x;
    toPoint.y = ptoPoint->y;

    // Odd/even brushes are effectively offset a half pixel
    if ((brushWidth & 1) == 0) {
        fromPoint.x -= 0.5;
        fromPoint.y -= 0.5;
        toPoint.x -= 0.5;
        toPoint.y -= 0.5;
    }

    // Radius is basically half of diameter.  The 0.999 helps
    // with the integer rounding, especially when in the exactly
    // vertical case.
    double radius = (brushWidth*0.999) * 0.5;
    double radSquared = radius*radius;

    //CDoublePoint dir = toPoint - fromPoint;
    CDoublePoint dir;
    dir.x = toPoint.x - fromPoint.x;
    dir.y = toPoint.y - fromPoint.y;

    //dir.scaleTo(radius);
    scalePointTo(&dir, radius);

    //CDoublePoint v1(-dir.y, dir.x); // left perpendicular
    //CDoublePoint v2(dir.y, -dir.x); // right perpendicular
    CDoublePoint v1 = {-dir.y, dir.x};
    CDoublePoint v2 = {dir.y, -dir.x};

    //CDoublePoint fp1 = fromPoint + v1;
    //CDoublePoint fp2 = fromPoint + v2; 
    //CDoublePoint tp1 = toPoint + v1;
    //CDoublePoint tp2 = toPoint + v2;

    // Calculate tangent points. 
    CPoint fp1 = {round(fromPoint.x + v1.x), round(fromPoint.y + v1.y)};
    CPoint fp2 = {round(fromPoint.x + v2.x), round(fromPoint.y + v2.y)};
    CPoint tp1 = {round(toPoint.x + v1.x), round(toPoint.y + v1.y)};
    CPoint tp2 = {round(toPoint.x + v2.x), round(toPoint.y + v2.y)};

    // Tangent may be slightly outside of brush.  This little "dink"
    // will bring it back inside.
    double dx = fp2.x - fromPoint.x;
    double dy = fp2.y - fromPoint.y;
    if (dx*dx + dy*dy > radSquared) {
        fp2.x -= 1;
        fp1.x += 1;
        tp1.x += 1;
        tp2.x -= 1;
    }

    // Figure out how wide the tube connecting the two brushes
    // is going to be.
    double hf = ((double)fp2.y - fp1.y)/(tp1.y - fp1.y);
    int beforeX = round(fp1.x + (tp1.x - fp1.x) * hf);
    int projWidth = fp2.x - beforeX + 1;

    // Fill a scan-line with the projection of the envelope at
    // that width.
    char *projBuf = malloc(projWidth);
    sampleEnvelope(projBuf, projWidth);

    // Calculate the slope of the line sides and the slope
    // of the top (and bottom).
    double xyRatio = ((double)tp1.x - fp1.x)/(tp1.y - fp1.y);
    if (fp1.y != fp2.y) {
        double xyTopRatio = ((double)fp1.x - fp2.x)/(fp1.y - fp2.y);
    }

    int y;
    for (y = fp2.y; y<tp1.y; y+=1) {
        int x = round(fp1.x + xyRatio*(y-fp1.y));
        int xend = x + projWidth - 1;
        int projStart = 0;
        
        if (fp1.y != fp2.y)  {
            // Let brush be instead of tube on upper left half
            // of brush.
            int xlimit = round(fp2.x + xyTopRatio*(y-fp2.y));
            if (x < xlimit) {
                projStart += xlimit - x;
                x = xlimit;
            }
            // Likewise let brush be on lower right half of bottom brush.
            xlimit = round(tp2.x + xyTopRatio*(y-tp2.y));
            if (xend > xlimit)
                xend = xlimit;
        }

        if (x < xend)
            SetBlock(screen, projBuf+projStart,x,y,xend-x+1,1);            
    }
}


static void softMaskLine(Screen *screen, Screen *brush, int brushWidth, 
    CDoublePoint *pp1, CDoublePoint *pp2, BOOL capLast)
// Draw a line with the soft-edged brush into mask.
{ 
    // Ok, some kludges cause Poco can't pass structures by value.
    CDoublePoint p1 = {pp1->x, pp1->y};
    CDoublePoint p2 = {pp2->x, pp2->y};

    int iRad = brushWidth/2;
    if (p1.x == p2.x && p1.y == p2.y) {
        KeyBlit(brush, 0, 0, brushWidth, brushWidth, screen, 
            p1.x-iRad, p1.y-iRad, 0);
        return;
    }

    // Make sure  we're drawing from top to bottom.
    if (p1.y > p2.y) {
        CDoublePoint swap;
        swap.x = p1.x;
        swap.y = p1.y;
        p1.x = p2.x;
        p1.y = p2.y;
        p2.x = swap.x;
        p2.y = swap.y;
    }        
    
    int dx = p2.x - p1.x;
    int dy = p2.y - p1.y;
    if (dx < 0) 
        dx = -dx;
    
    // Right now I'm just exploring one case - the mostly
    // vertical one...
    if (dy >= dx)  { 
        KeyBlit(brush, 0, 0, brushWidth, brushWidth, screen, 
            p1.x-iRad, p1.y-iRad, 0);
        if (capLast)
            KeyBlit(brush, 0, 0, brushWidth, brushWidth, screen, 
                p2.x-iRad, p2.y-iRad, 0);
        fillInnerQuad(screen, &p1, &p2, brushWidth);
    }
}

// Global brush size for interactive part of program.
int gBrushSize;
Screen *gBrush;

void setBrushSize(int size)
// Allocate a brush...
{
    if (gBrush != NULL) 
        FreeScreen(&gBrush);

    ErrCode err = AllocScreen(&gBrush, size, size);
    if (err < 0) {
        Qerror(err, "Couldn't allocate %d pixel brush", size);
        exit(err);
    }
    makeCircleBrush(0, 0, size, gBrush);
    gBrushSize = size;
}

void showRow(int max)
// Show a whole row of brushes
{
    int width, height;
    GetSize(&width,&height);
    int x = 0, y = 0;
    int size = 1;
    for (;;) {
        if (size > max)
            break;
        if (x + size > width) {
            y += size;
            x = 0;
        }
        if (y + size > height)
            break;
        makeCircleBrush(x, y, size, GetPicScreen());
        size += 1;
        x += size;
    }           
}

void showLines(int max)
// Fill up screen with lines ranging from vertical to diagonal,
// each "max" height.
{
    Clear();
    int xstart;
    int ystart;
    xstart = ystart = gBrushSize/2 + 4;
    int xmax;
    int ymax;
    GetSize(&xmax, &ymax);
    int xoff = xstart;
    int yoff = ystart;
    int dy = max;
    int dx;
    for (dx=0; dx<=max; ++dx)  {
        int nextx = xoff + gBrushSize + dx + 1;
        if (nextx > xmax) {
            xoff = xstart;
            yoff += dy + gBrushSize + 4;
        }
        CDoublePoint p1 = {xoff,yoff};
        CDoublePoint p2 = {xoff+dx, yoff+dy};   
        softMaskLine(GetPicScreen(), gBrush, gBrushSize, 
            &p1, &p2, TRUE);
        xoff += gBrushSize + dx + 4;
    }
}

void showLine()
// Draw a particularly troublesome line.
{
    Clear();
    CDoublePoint p1 = {50, 50};
    CDoublePoint p2 = {60, 64};
    softMaskLine(GetPicScreen(), gBrush, gBrushSize, 
        &p1, &p2, TRUE);
}

void main()
{
    /* Start up default brush size. */
    int size = 63;
    setBrushSize(size);

    int x,y,left,right,key;
    for (;;) {
        int oldSize = size;
        WaitClick(&x,&y,&left,&right,&key);
        key &= 0xff;
        if (key == '+' && size < 100)
            ++size;
        else if (key == '-' && size > 1)
            --size;
        else if (key == '#') {
            Qnumber(&size, 1, 255, "Set size of brush");
        }
        else if (key == '?')  {
            showRow(64);
            PicDirtied();
        }
        else if (key == '/') {
            showLines(40);
            PicDirtied();
        }
        else if (key == '.') {
            showLine();
            PicDirtied();
        }
        else if (key == 0x1b)
            break;
        else if (key == 0) {
            if (right)  
                break;
            if (left) {
                int x2,y2;
                if (RubLine(x,y,&x2,&y2)) {
                    CDoublePoint p1 = {x,y};
                    CDoublePoint p2 = {x2,y2};
                    softMaskLine(GetPicScreen(), gBrush, gBrushSize, 
                        &p1, &p2, FALSE);
                    PicDirtied();
                }
            }
        }
        /* If they've changed the size get a new brush. */
        if (size != oldSize) {
            setBrushSize(size);
        }
    }
}

