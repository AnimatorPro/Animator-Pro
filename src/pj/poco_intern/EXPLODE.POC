#include "optics.h"

typedef struct {
   XyzPoint pnt;
   int tframes;
   int xpos, ypos, width, height, xcol, ycol;
   } CelPoint;

typedef struct {
   int scrw, scrh, celw, celh, tcelx, tcely, xoff, yoff, el_count;
   int framest, frameend, frameoff;
   double z_clip, max_z;
   Screen *source;
   } Environ;

int screenx, screeny, celx, cely, xcount, ycount;
int celcount, framecount;
ErrCode gerr;
CelPoint *movelist;
Environ workspace;

char *zero;
int i, celsize;

#define CAM_2_PXL (-1.3)
#define MAX_X 100
#define MAX_Y 100
#define CAM_2_MAX 2.0
#define MAXSPIN 180.0

void CpCelPoint(CelPoint *a, CelPoint *b)
{
   a->pnt.x = b->pnt.x;
   a->pnt.y = b->pnt.y;
   a->pnt.z = b->pnt.z;
   a->tframes = b->tframes;
   a->xpos = b->xpos;
   a->ypos = b->ypos;
   a->width = b->width;
   a->height = b->height;
   a->xcol = b->xcol;
   a->ycol = b->ycol;
}

int GetWorkSize(Environ *ws)

{
   Screen *cel;
   Screen *cur;
   cel = GetCelScreen();
   cur = GetPicScreen();
   GetScreenSize(cur, &ws->scrw, &ws->scrh);
   GetScreenSize(cel, &ws->celw, &ws->celh);

   printf("Setting Environment Parameters");

   if (AllocScreen(&ws->source, ws->scrw, ws->scrh) != 0) return(FALSE);
   CopyScreen(cur, ws->source);
   ws->tcelx = ws->scrw / ws->celw;
   if ((ws->scrw % ws->celw) > 0) ws->tcelx+=2;
   ws->tcely = ws->scrh / ws->celh;
   if ((ws->scrh % ws->celh) > 0) ws->tcely+=2;
   ws->xoff = (ws->scrw % ws->celw) / 2;
   ws->yoff = (ws->scrh % ws->celh) / 2;
   ws->el_count = ws->tcelx * ws->tcely;

   if (ws->scrw > ws->scrh) ws->z_clip = CAM_2_PXL * ws->scrw;
   else ws->z_clip = CAM_2_PXL * ws->scrh;
   ws->max_z = CAM_2_MAX * ws->z_clip;

   ws->framest = ws->frameend = GetFrame()+1;
   if(! Qnumber(&ws->framest, 1, GetFrameCount(),"Starting Frame?")) return(FALSE);
   if(! Qnumber(&ws->frameend, 1, GetFrameCount(), "Ending Frame?")) return(FALSE);
   ws->frameoff = ws->framest;
   if(! Qnumber(&ws->frameoff, ws->framest, ws->frameend, "Minimum Escape Frame?")) return(FALSE);
   ws->frameoff = fabs(ws->frameoff - ws->framest);
   ws->framest--;
   ws->frameend--;


   return(TRUE);
}

void CalcCelPos(Environ *ws, CelPoint *ptarray)
{
   int index, xloc, yloc, xcol, ycol;
   printf("Calculating Tiles");
   for (index = 0, xloc = ws->xoff, yloc = ws->yoff;
        index < ws->el_count; index++)
   {
//      Qtext("Calculating Tiles %i of %i A1\n %i", index, ws->el_count, ws->tcelx);
        xcol = index % ws->tcelx;
//      Qtext("Calculating Tiles %i of %i A1", index, ws->el_count);
        ycol = index / ws->tcelx;
//      Qtext("Calculating Tiles %i of %i A1", index, ws->el_count);
        xloc = ws->xoff+((xcol-1) * ws->celw);
        if (xloc < 0) xloc = 0;
//      Qtext("Calculating Tiles %i of %i A1", index, ws->el_count);
        yloc = ws->yoff+((ycol-1) * ws->celh);
        if (yloc < 0) yloc = 0;

      printf("Calculating Tiles %i of %i B",index, ws->el_count);
      ptarray[index].xpos = xloc;
      ptarray[index].ypos = yloc;
      ptarray[index].xcol = xcol;
      ptarray[index].ycol = ycol;
//      Qtext("Calculating Tiles %i of %i C", index, ws->el_count);
      if ((xcol == 0) || (xcol == (ws->tcelx - 1)))
         {if (ws->xoff > 0)
              {ptarray[index].width = ws->xoff;}
         else {ptarray[index].width = ws->celw;}
         }
      else {ptarray[index].width = ws->celw;}
//      Qtext("Xcol = %i, celw= %i, width = %i", xcol, ws->celw, ptarray[index].width);
 //     Qtext("Calculating Tiles %i of %i D", index, ws->el_count);
      if ((ycol == 0) || (ycol == (ws->tcely - 1)))
         {if (ws->yoff > 0)
             {ptarray[index].height = ws->yoff;}
         else {ptarray[index].height = ws->celh;}
         }
         else {ptarray[index].height = ws->celh;}
//       Qtext("ycol = %i, celh = %i, height = %i", ycol, ws->celh, ptarray[index].height);
 //     Qtext("Calculating Tiles %i of %i E", index, ws->el_count);
   }
}

void RenderBoxes(Environ *ws, CelPoint *ptarray)
{
   int index;
   for (index = 0; index < ws->el_count; index++)
   {
      Box(ptarray[index].xpos, ptarray[index].ypos, ptarray[index].width, ptarray[index].height);
   }
}

double frnd()
{
   return(rand() / 65535.0);
}

void RandomPoint(Environ *ws, CelPoint *ptarray)
{
   int index, midx, midy;
   double min_z, max_z, z_off, z_scale;

   printf("Generating Random Points");
   min_z = 0;
   max_z = ws->max_z;
   midx = ((ws->scrw-ws->celw) / 2);
   midy = ((ws->scrh-ws->celh) / 2);
   for (index = 0; index < ws->el_count; index++)
   {
      printf("Generating Random Points %i of %i", index, ws->el_count);

      ptarray[index].pnt.x = midx - ptarray[index].xpos;
      if (ptarray[index].xpos > midx) ptarray[index].pnt.x -= frnd()*MAX_X else ptarray[index].pnt.x += frnd()*MAX_X;
//      ptarray[index].pnt.x = 0;
      ptarray[index].pnt.y = midy - ptarray[index].ypos;
      if (ptarray[index].ypos > midy) ptarray[index].pnt.y -= frnd()*MAX_Y else ptarray[index].pnt.y += frnd()*MAX_Y;
 //     ptarray[index].pnt.y = 0;
      ptarray[index].pnt.z = frnd() * (ws->max_z-ws->z_clip);
      if (ptarray[index].pnt.z < min_z) min_z = ptarray[index].pnt.z;
      if (ptarray[index].pnt.z > max_z) max_z = ptarray[index].pnt.z;
   }
   z_off = -max_z;
   z_scale = (ws->max_z-ws->z_clip) / (min_z + z_off);
   for (index = 0; index < ws->el_count; index++)
   {
      printf("Scaling Random Points %i of %i", index, ws->el_count);

      ptarray[index].pnt.z += z_off;
      ptarray[index].pnt.z *= z_scale;
      ptarray[index].pnt.z += ws->z_clip
   }
}



void ZPointSort(Environ *ws, CelPoint *ptarray)
{
   int index;
   CelPoint temp;
   int NoBubbles;
   NoBubbles = FALSE;
   printf("Sorting Points By Z");
   while (! NoBubbles)
   {
      NoBubbles = TRUE;
      for (index = 0; index < (ws->el_count-1); index++)
      {
         if (ptarray[index].pnt.z < ptarray[index+1].pnt.z)
         {
            CpCelPoint(&temp, &(ptarray[index]));
            CpCelPoint(&(ptarray[index]), &(ptarray[index+1]));
            CpCelPoint(&(ptarray[index+1]), &temp);
            NoBubbles = FALSE;
         }
      }
   }
}

void CalcZClip(Environ *ws, CelPoint *ptarray)
{
   int index, tf;
   double fraction;
   printf("Calculating Z Clipping Planes");

   tf = fabs(ws->frameend - ws->framest) - ws->frameoff;
   for (index = 0; index < ws->el_count; index++)
   {
      fraction = fabs(ws->z_clip / ptarray[index].pnt.z);
      ptarray[index].tframes = ((tf * fraction)+ws->frameoff)+1;
 //     ptarray[index].tframes = tf;
      ptarray[index].pnt.z = ptarray[index].pnt.z * fraction;
   }

}

int UpdateCel(int index, CelPoint *ptarray, Environ *ws)
{
   Screen *cel;
   int xoff, yoff,centerx, centery, terr;

   cel = GetCelScreen();
   if (cel == NULL) return(FALSE); /* this should not happen! */
   SetBlock(cel, zero, 0, 0, ws->celw, ws->celh);
//   CopyScreen(zero, cel);
   if (ptarray[index].width == ws->celw) {xoff = 0;} else {
       if(ptarray[index].xcol == 0) xoff = (ws->celw - ws->xoff);
       if(ptarray[index].xcol == (ws->tcelx-1)) xoff = 0;
   }
 
   if (ptarray[index].height == ws->celh) {yoff = 0;} else {
      if(ptarray[index].ycol == 0) yoff = (ws->celh - ws->yoff);
      if(ptarray[index].ycol == (ws->tcely-1)) yoff = 0;
   }
//   Qtext("pts = %i, %i\ncelw = %i, %i\n pti = %i, %i\n off = %i, %i", ptarray[index].width, ptarray[index].height, ws->celw, ws->celh, ptarray[index].xcol, ptarray[index].ycol, xoff, yoff);
//   Qtext("%i\n, %i, %i\n%i, %i\n%i, %i", index, ptarray[index].xpos, ptarray[index].ypos, ptarray[index].width, ptarray[index].height, xoff, yoff); 
   Blit(ws->source, ptarray[index].xpos, ptarray[index].ypos, ptarray[index].width,  ptarray[index].height,
        cel, xoff, yoff);
   centerx = ptarray[index].xpos+(ws->celw / 2);
   if(ptarray[index].xcol == 0) centerx -= xoff;
//   if(ptarray[index].xcol == (ws->tcelx-1)) centerx += (ws->celw /2);
   centery = ptarray[index].ypos+(ws->celh / 2);
   if(ptarray[index].ycol == 0) centery -= yoff;
 //  if(ptarray[index].ycol == (ws->tcely-1)) centery += (ws->celh /2);
   CelMoveTo(centerx, centery);
}


ErrCode RenderCel(Environ *ws, CelPoint *ptarray)
{
   int index, start, stop;
   ErrCode terr;
   OptPos optic;
   printf("Rendering Cels");

   OptClearState();
   OptSetElement(EL_THECEL);

   for (index = 0; index < ws->el_count; index++)
   {
      printf("Rendering Cel %i of %i from %i, %i, 0 to %4.0f, %4.0f, %4.0f for %i frames",(index+1), ws->el_count, ptarray[index].xpos, ptarray[index].ypos, ptarray[index].pnt.x, ptarray[index].pnt.y, ptarray[index].pnt.z, ptarray[index].tframes);
      OptClearPos();
      UpdateCel(index, ptarray, ws);
      OptDefaultCenters();
      OptGetPos(&optic);
      optic.move.x = ptarray[index].pnt.x;
      optic.move.y = ptarray[index].pnt.y;
      optic.move.z = ptarray[index].pnt.z;
     optic.spin_angle.x = rnd(2 * MAXSPIN) - MAXSPIN;
      optic.spin_angle.y = rnd(2 * MAXSPIN) - MAXSPIN;
      optic.spin_angle.z = rnd(2 * MAXSPIN) - MAXSPIN;
      OptSetPos(&optic);
//      Qtext("Rendering from %i to %i for %i frames", ws->framest, ws->frameend, ptarray[index].tframes);	
      if (ws->framest < ws->frameend)
        { terr = OptToSegment(ws->framest, ws->framest+ptarray[index].tframes-1);
           if (terr != 0) return(terr);}
      else
        { if(terr = OptToSegment(ws->framest, ws->framest-ptarray[index].tframes) != 0) return(terr);}
   }
   Qtext("Exiting Normally");
   return(0);
}



void main()
{
// Find out the working area
   GetWorkSize(&workspace);
// Allocate memory for the random xyz points.
   celsize = (workspace.celw)*(workspace.celh);
   zero = malloc(celsize);   
   for (i = 0; i < celsize; i++)  zero[i] = 0;
   Qtext("Elements = %i Size = %i\n Tcelx %i Tcely %i",workspace.el_count, sizeof(CelPoint), workspace.tcelx, workspace.tcely);
   movelist = calloc(workspace.el_count, sizeof(CelPoint));
   CalcCelPos(&workspace, movelist);
//   RenderBoxes(&workspace, movelist);
   RandomPoint(&workspace, movelist);
   ZPointSort(&workspace, movelist);
   CalcZClip(&workspace, movelist);
   gerr = RenderCel(&workspace, movelist);
   if (gerr != 0) Qerror(gerr, "While Rendering");
   free(movelist);
}



