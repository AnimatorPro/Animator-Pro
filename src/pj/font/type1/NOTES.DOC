Notes comparing at1.c (3D Studio version) and Carey's readfont.c/interp.c
code.  Both ostensably read Postscript Type 1 code.

The at1.c file seems to have a more complete isomap[].

at1's inbyte looks a little more robust too.  (Handles zero bytes
better I imagine...)

at1.c and readfont.c disagree on how to tell a binary format font from
a hex format font.  Specifically whether the first byte after "eexec"
can be a '\r' in a binary font.  The spec say's it's the at1.c way.
But comments in both files indicate that Adobe Helvetica Bold Narrow Oblique
file from Adobe Type Manager for Windows violates this.

at1.c handles /FontBBox.  readfont.c handles /ItalicAngle.
Note there's a bug in at1.c's /FontBBox handling that will make it
reset the bounding box to 0,0,1000,1000 unless the /FontBBox is the last
/command in the header section.

I don't really trust the way they both handle /Encoding.  If somehow the
/Encoding section were to contain another /command (probably illegal though)
there'd be trouble.

The way they handle deciding whether it's a binary or hex font is
awkward.  They maintain a 1-4 character buffer so that they can
have enough data to determine the format,  but then once they've decided
the format they immediately burn 4-8 characters of data.  Not so bad
except the buffer gets checked for full/empty every byte of the file.
Easier faster and simpler to read in 4 characters,  sniff around,  and
if hex burn 4 more characters - and then eliminate all the buffer
logic from inbyte().  Actually I just saw why this wouldn't work - the
decryption.  Oh my!

