/* Warbler.poc - an adaptation of the warblers Pogo video game to
 * Poco.  You try to cover the pulsating circles before they cover
 * you.
 */

#include "pogo.h"



typedef struct
/* Mouse following creature. */
	{
	CC_ALL
	} Mouse;
void evolve_mouse(Mouse *m);
Creature_class mouse_class = {sizeof(Mouse), NULL, evolve_mouse,};

typedef struct
/* The pulsating circle creature */
	{
	CC_ALL
	int csize,dsz,cmax,cmin,color;
	} Warbler;
void init_warbler(Warbler *w);
void evolve_warbler(Warbler *w);
Creature_class warbler_class = {sizeof(Warbler), init_warbler, evolve_warbler,};


Mouse *mouse;
int mouserad;
int warbler_count;
int mouse_x, mouse_y, key, mouse_left, mouse_right;


int wrapx(int x)
/* Check X coordinate to see if it's way off screen.  Wrap it around
 * if necessary. */
{
if (x > 320+50)
	x = -50;
if (x < -50)
	x = 320+50;
return(x);
}

int wrapy(int y)
/* Check Y coordinate to see if it's way off screen.  Wrap it around
 * if necessary. */
{
if (y > 200+50)
	y = -50;
if (y < -50)
	y = 200+50;
return(y);
}

void draw_spoked_wheel(int color,int x,int y,int rad,int theta,int spokes)
/* Draw a bunch of lines coming out from a center.  */
{
int i;
double t;
double s,c;

theta = theta % 360;
SetColor(color);
for (i=1; i<spokes; ++i)
	{
	t = theta + i * 360/spokes;
	s = sin(t);
	c = cos(t);
	Line(x,y,x+c*rad,y+s*rad);
	}
}

void init_warbler(Warbler *w)
/* Set up a single warbler creature with random initial values. */
{
w->cmin = rnd(5)+2;		/* min radius */
w->cmax = rnd(16)+5;	/* max radius */
w->dsz	= rnd(3)+1;		/* speed or radius change */
if (rnd(1))
	w->dsz = -w->dsz;			/* make some of them start out shrinking */
w->csize = (w->cmin + w->cmax)/2;
w->color = rnd(4)+1;
}

void evolve_warbler(Warbler *w)
/* Update warbler to next frame. */
{
int md;

if (!(w->age&0x1f))	/* every 32 ticks inc max radius size  */
	w->cmax = w->cmax+1;
SetColor(0);
Circle(w->x,w->y,w->csize);	/* undraw old position */
w->csize = w->csize + w->dsz;	/* calculate new size */
if (w->csize > w->cmax || w->csize < w->cmin) 
/* if hit min or max reverse delta radius */
	w->dsz = -w->dsz;
w->x = wrapx(w->x + w->dx);
w->y = wrapy(w->y + w->dy);
if (mouse != NULL)		/* if mouse creature still alive... */
	{
	/* ;find mouse distance */
	md = distance(mouse->x,mouse->y, w->x, w->y);
	/* ;if inside mouse suicide */
	if (md+w->csize < mouserad)
		{
		//mouserad = mouserad+1;
		SetColorMap(0,0,0,255);	/* ;flash blue */
		kill(w);
		warbler_count = warbler_count - 1;
		return;
		}
	/* ;if mouse inside us kill it */
	if (md+mouserad < w->csize)
		{
		SetColorMap(0,255,0,0);	/* ;flash red */
		draw_spoked_wheel(1,mouse->x,mouse->y,2*mouserad,0,16);
		kill(mouse);
		mouse = NULL;
		}
	}
SetColor(w->color);
Circle(w->x,w->y,w->csize); /* Draw new position */
}


void evolve_mouse(Mouse *m)
/* Update mouse to next frame. */
{
SetFilled(TRUE);
SetColor(0);
Circle(m->x,m->y,mouserad);
m->x = mouse_x;
m->y = mouse_y;
SetColor(13);
Circle(m->x,m->y,mouserad);
SetFilled(FALSE);
}

void play_game()
/* Play game until they quit. */
{
for(;;)
/* Each time through this loop play one game. */
	{
	/* Get rid of anything left from old game. */
	Clear();
	kill_all();
	/* Create mouse creature and all the warblers. */
	mouserad = 13;
	PollInput(&mouse_x, &mouse_y, &mouse_left, &mouse_right, &key);
	mouse = spawn(&mouse_class, mouse_x,mouse_y,mouse_x,mouse_y);
	for (warbler_count = 0; warbler_count < 20; ++warbler_count)
		{
		int ix,iy;

		ix = rnd(6)-3;
		if (ix == 0)
			ix = 1;
		iy = rnd(6)-3;
		if (iy == 0)
			iy = 1;
		spawn(&warbler_class, rnd(320)-160, rnd(200)-100, ix, iy);
		}
	while (mouse != NULL && warbler_count>0)
		{
		PollInput(&mouse_x, &mouse_y, &mouse_left, &mouse_right, &key);
		evolve();
		SetColorMap(0,0,0,0);
		if (mouse_right || key)
			if (Qquestion("Quit this round?"))
				break;
		}
	if (mouse == NULL)
		{
		printf("Ouch!");
		WaitClick(&mouse_x, &mouse_y, &mouse_left, &mouse_right, &key);
		}
	Clear();
	if (warbler_count <= 0)
		printf("You won!!!");
	else
		printf("%d warblers left", warbler_count);
	if (!Qquestion("Play again?"))
		break;
	unprintf();
	}
}

/*** Stuff to save away and restore AniPro state. ***/
typedef struct 
	{
	int ccolor;
	Boolean filled;
	Boolean two_color;
	Boolean brush_size;
	char ink[20];
	} AniState;

void ani_state_save(AniState *this)
{
this->ccolor = GetColor();
this->filled = GetFilled();
this->two_color = GetTwoColor();
this->brush_size = GetBrushSize();
GetInk(this->ink);
}

void ani_state_restore(AniState *this)
{
SetColor(this->ccolor);
SetFilled(this->filled);
SetTwoColor(this->two_color);
SetBrushSize(this->brush_size);
SetInk(this->ink);
CopyScreen(GetUndoScreen(), GetPicScreen());
}


Boolean abort_handler(void *old_state)
/* This function will get called if user aborts us. */
{
ani_state_restore(old_state);
return TRUE;
}


main()
{
AniState old_state;


if (!Qquestion(
	"Warblers is a video game in Poco.  Each warbler is a pulsating "
	"circle.  If you cover a warbler with your mouse "
	"disk you kill it.  If it "
	"covers your mouse disk while it is bigger than you, you die. "
	"The object of the game is to kill all the warblers.  This game "
	"works best in 320x200 screen resolution.  Would you like to play?"))
	return;
ani_state_save(&old_state);						/* Save system state. */
SetAbortHandler(abort_handler, &old_state);		/* Restore state if aborted. */
HideCursor();		/* Don't want to see mouse cursor */
SetAbort(FALSE);	/* Handle abort ourselves... */
SetFilled(FALSE);
SetInk("Opaque");
SetBrushSize(0);
SetColorMap(1,255,0,0);
SetColorMap(2,255,80,0);
SetColorMap(3,255,80,80);
SetColorMap(4,255,150,150);
play_game();
ani_state_restore(&old_state);
}

