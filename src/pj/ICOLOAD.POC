/***************************************************************************
 *	Ico.poc - a program for reading in,  cataloging, and creating
 *  Microsoft Window's compatable .ICO (Icon) files.
 ***************************************************************************/

#include <errcodes.h>
#include <limits.h>


/***************************************************************************
 * Description of MicroSoft Windows .ICO file format: 
 *
 * Alas I can't find any documentation at the moment, so the following
 * is reverse engineered from looking at a couple of sample .ico files.
 *
 * Here is an overview of the file structure:
 *
 *	Ico_file_header    ........................ 6 bytes
 *		Ico_file_dir   ........................16 bytes
 *		Ico_file_dir
 *			...
 *		ico_head       ........................28 bytes
 *			color-map
 *				b g r reserved..................4 bytes
 *				b g r reserved
 *			pixel-data
 *			mask-data
 *		ico_head
 *			color-map
 *			pixel-data
 *			mask-data
 *			...
 *
 * A .ICO file can contain several images.  The file starts out with a
 * six byte header that says how many icons are in the file.  This is
 * followed by a "directory" entry of 16 bytes for each icon.  The directory
 * entry among other things includes the offset of the icon proper.
 *
 * An Icon starts with a header.  This may be variable size because the
 * size of the header (or is it the offset to the color map?) is the
 * first word of the icon header.  The icon header among other things
 * says how many colors are in the icon.  I've seen this be either 2, 8,
 * or 16 - though I'm sure on some systems it can be 32.  The curious
 * thing is that 8 color pixels still seem to be allocated 4 bits of
 * data in the image bits proper.  There is a field I'm pretty sure
 * says how many bits are used per pixel in storage.
 *
 * Anyway following the image header is the color-map in RGB? format.
 * The 4th byte seems to be zero.  The number of color map entries
 * seems to be related to the storage bits per pixel rather than the
 * number of colors.
 *
 * After the color map is the color image which seems to
 * be stored in packed pixel format (ie 2 pixels to the byte in 16 & 8 color
 * modes,  1 per byte in 256 color mode, 8 per byte in 2 color.
 * Finally there's a transparency mask for the image.  It is one
 * bit per pixel.  
 ***************************************************************************/

typedef struct ico_file_head
	{
	short u0_0;	/* Unknown, contents 0? */
	short u2_1;  /* Unknown, contents 1? */
	short image_count;	/* # of Icons in this file */
	} Ico_file_head;

typedef struct ico_file_dir	/* One of these for each icon in file */
	{
	char  width;  		/* Pixel width - usually 32 */
	char height;  		/* Pixel height - 16 or 32  */
	short num_colors;	/* Number of colors - 2, 8, 16, 256? */
	short u4_0;			/* Unknown, contents 0? */
	short u6_0;			/* Unknown, contents 0? */
	long icon_size;	/* Size of icon image */
	long icon_offset;	/* Individual icon start position in file */
	} Ico_file_dir;

typedef struct ico_head
/* This structure looks much like a BITMAPINFOHEADER in
 * windows.h, except the Height field isn't accurate. */

	{
	long  head_size;	/* Header size? Always 0x28 though */
	long  width;		/* Accurate?  Always 0x20? */
	long  height;		/* Accurate?  0x20 when it *is* 0x10! */
	short planes;		/* Number of planes of image - usually 1. */
	short bits_per_pixel;	/* Number of bits/pixel in each plane. */
	long  compression;	/* 0 for uncompressed. 1 & 2 are run-length. */
	long image_size;	/* Size if image - mask and pixels together? */
	short reserved[8];		/* Unknown - 0's? */
	} Ico_head;

typedef struct ico_rgb
	{
	unsigned char b,g,r,reserved;	/* Values from 0 to 255 */
	} Ico_rgb;

/* Number of colors in AniPro color map. */
#define COLORS 256

/* Macro to figure out how many bytes are needed to store
 * width bits.  (Basically divide by 8 but round up.) */
#define MASK_LINE_BYTES(width) (((width)+7)>>3)

/* fseek() mode parameter defines - really should be in stdio.h... */
#define FSEEK_START 0
#define FSEEK_CURRENT 1
#define FSEEK_END 2


ErrCode read_buf(FILE *f, void *buf, int size)
/* Read a buffer of a certain size */
{
if (fread(buf, size, 1, f) != 1)
	return(Err_truncated);
else
	return(Success);
}

#define read_var(f,s) read_buf(f,&s,sizeof(s))
/* Read a variable from file. */

ErrCode alloc_and_read(FILE *f, void **pbuf, int size)
/* Allocate a buffer and fill it with next bits from file. */
{
if ((*pbuf = malloc(size)) == NULL)
	return(Err_no_memory);
return(read_buf(f,*pbuf,size));
}

long distance_squared(int *a, int *b, int dimensions)
/* Returns distance squared between points a & b */
{
long acc = 0;	/* Accumulate result here. */
long diff;		/* Difference between a single component of a and b. */

while (--dimensions >= 0)
	{
	diff = *a++ - *b++;
	acc += diff*diff;
	}
return(acc);
}

int closest_color_except(
	int *cmap, 		/* This should point to COLORS rgb triples */
	int *rgb,		/* A single rgb triple to match */
	int except_ix)	/* Don't match this one... */
/* Return the closest color in color map to the r,g,b values  except
 * for except_ix.  (Useful if trying to find closest non-transparent
 * color.  Set except_ix to -1 to search all.) */
{
long distance;
int closest_ix;
long closest_distance = LONG_MAX;	/* Impossibly huge value from limits.h */
int i;

for (i=0; i<COLORS; ++i)
	{
	if (i != except_ix)
		{
		distance = distance_squared(cmap,rgb,3);
		if (distance < closest_distance)
			{
			closest_distance = distance;
			closest_ix = i;
			}
		}
	cmap += 3;
	}
return(closest_ix);
}

int find_close_to_key(Screen *s, int key)
/* Find color in screen color map closest to key color (that isn't
 * key color) */
{
int cmap[COLORS*3];

GetScreenColorMap(s, cmap);
return(closest_color_except(cmap, cmap+key*3, key));
}

void copy_screen_colors(Screen *s, Screen *d)
/* Copy color map from one screen to another. */
{
int cmap[COLORS*3];

GetScreenColorMap(s, cmap);
SetScreenColorMap(d, cmap);
}


ErrCode ico_colors_into_screen(FILE *f, Screen *s, int color_count)
/* Read the ico-color map into the screen's color map.  */
{
int cmap[COLORS*3];
int *pt = cmap;
ErrCode err = Success;
Ico_rgb rgb;
int i;

GetScreenColorMap(s, cmap);
for (i=0; i<color_count; ++i)
	{
	if ((err = read_var(f, rgb)) < Success)
		break;
	*pt++ = rgb.r;
	*pt++ = rgb.g;
	*pt++ = rgb.b;
	}
SetScreenColorMap(s,cmap);
return(err);
}

void bits_to_bytes(char *in, char *out, int in_size, 
	char zero_color, char one_color)
/* Convert 1 bits in "in" to one_color bytes in out,  and likewise
 * zero bits into zero_color bytes.  Out better be in_size*8 big. */
{
int mask;
int source;
while (--in_size >= 0)
	{
	source = *in++;
	for (mask = (1<<7); mask ; mask >>= 1)
		{
		if (source & mask)
			*out++ = one_color;
		else
			*out++ = zero_color;
		}
	}
}

void nibbles_to_bytes(char *in, char *out, int in_size)
/* Convert nibbles (4 bit quantities) to bytes.  Out better be in_size*2 big. */
{
int source;

while (--in_size >= 0)
	{
	source = *in++;
	*out++ = ((source>>4) & 0xf);
	*out++ = source & 0xf;
	}
}

void ico_byte_pack_pixels(char *in, char *out, int bits_per_pixel, int in_size)
/* This routine will unpack the pixels in "in" into "out".
 * Make sure that out is at least in_size * 8/bits_per_pixel long. */
{
switch (bits_per_pixel)
	{
	case 1:
		bits_to_bytes(in,out,in_size,0,1);
		break;
	case 4:
		nibbles_to_bytes(in,out,in_size);
		break;
	case 8:
		memcpy(out,in,in_size);		/* Byte-a-pixel case is real easy... */
		return;
	}
}


void ico_mask_to_key(char *mask, int key_color, int close_to_key,
	char *out, int size)
/* This routine transforms a line of image to form where mask
 * determines transparency to form where key-color determines
 * transparency.   1 bits (transparent ones) in mask get mapped
 * to key color in the output.  0 bits in mask leave output the
 * same (except key color gets transformed to "close_to_key" color,
 * which should be similar in RGB value but different in index.) */
{
int test_bit = 0;
int mask1;

while (--size >= 0)
	{
	if (!test_bit)			/* See if need to go to next char of mask */
		{
		test_bit = 0x80;
		mask1 = *mask++;
		}
	if (test_bit & mask1)
		{
		*out++ = key_color;
		}
	else
		{
		if (*out == key_color)
			*out = close_to_key;
		++out;
		}
	test_bit >>= 1;
	}
}

ErrCode ico_pixels_into_screen(FILE *f, Screen *s, 
	int x, int y, int width, int height,
	int bits_per_pixel, int planes)
/* This routine reads in the pixels in bit, nibble, or byte format, and
 * the mask,  and then updates the screen with the icon image squirted
 * through the mask. */
{
ErrCode err;					/* Returns status */
int i;							/* Generic loop counter */
char *out_pixels;				/* Output line buffer */
char *image_buf, *image_pt;		/* Holds input pixels from file */
char *mask_buf, *mask_pt;		/* Holds input mask from file */
int image_bytes_per_row;		/* Number of bytes per row on input image. */
int mask_bytes_per_row;			/* Number of bytes per row on input mask. */
int key_color;					/* Current key color. */
int close_to_key;				/* Color closest to key color. */
int dest_alloc_size; 			/* Output pad size so low level routines 
								 * can do conversion from bits and nibbles
								 * to bytes without checking for fractional 
								 * last bytes of source. */

/* First check some error conditions */
if (planes > 1 || planes < 0)	
	{
	return(Qerror(Err_wrong_res
		, "This program only supports .ICO files with 1 image plane.  "
		  "This file has %d."
		, planes));
	}
key_color = GetKeyColor();
close_to_key = find_close_to_key(s, key_color);
switch (bits_per_pixel)
	{
	case 1:
		image_bytes_per_row = MASK_LINE_BYTES(width);
		break;
	case 4:
		image_bytes_per_row =  (width+1)/2;	/* round up */
		break;
	case 8:
		image_bytes_per_row = width;
		break;
	default:
		return(Qerror(Err_wrong_res
			, "This program only supports .ICO files with 1, 4, or 8 bits per "
			  "pixel.   This file has %d."
			, bits_per_pixel));
	}
if ((err = alloc_and_read(f, &image_buf, image_bytes_per_row*height)) 
	>= Success)
	{
	mask_bytes_per_row = MASK_LINE_BYTES(width);
	if ((err = alloc_and_read(f, &mask_buf, mask_bytes_per_row*height)) 
		>= Success)
		{
		dest_alloc_size = image_bytes_per_row * (8/bits_per_pixel);
		err = Err_no_memory;	/* if next test fails this is why... */
		if ((out_pixels = malloc(dest_alloc_size)) != NULL)
			{
			y += height;			/* Ico's are stored bottom to top. */
			image_pt = image_buf;
			mask_pt = mask_buf;
			for (i=0; i<height; ++i)
				{
				y -= 1;
				/* Translate image_pt into byte-a-pixel in out_pixels. */
				ico_byte_pack_pixels(image_pt, out_pixels
									, bits_per_pixel, image_bytes_per_row);
				ico_mask_to_key(mask_pt, key_color, close_to_key
									, out_pixels, width);
				SetBlock(s, out_pixels, x, y, width, 1);
				/* Move to next line. */
				image_pt += image_bytes_per_row;
				mask_pt += mask_bytes_per_row;
				}
			err = Success;
			free(out_pixels);
			}
		free(mask_buf);
		}
	free(image_buf);
	}	
return(err);
}

ErrCode ico_into_cel(FILE *f, int width, int height, int dir_colors)
/* This routine reads a single Icon image into the Cel.  Pass it a file
 * which is at the position of an ico_head.  Also pass in width/height
 * since what's stored in the Ico_head seems inaccurate. */
{
ErrCode err;
Ico_head head;
Screen *cel_screen;
int i;
int color_count;

/* Read in the header. */
if ((err = read_var(f,head)) >= Success)
	{
	/* Make sure the header size looks good */
	err = Err_bad_magic;	
	if (head.head_size == 0x28)
		{
		/* Make a Cel the right size */
		if ((err = CelGet(0,0,width,height)) >= Success)
			{
			cel_screen = GetCelScreen();
			color_count = (1<<(head.bits_per_pixel*head.planes));
			/* if color_count looks wierd will return Err_format. */
			err = Err_format;
			if (color_count >= dir_colors)
				{
				if ((err = ico_colors_into_screen(f, cel_screen
									, color_count)) >= Success)
					{
					err = ico_pixels_into_screen(f, cel_screen
						,0, 0, width, height
						, head.bits_per_pixel, head.planes);
					}
				}
			}
		}
	}
return(err);
}

ErrCode ico_file_into_cel(char *name, int *pnum_colors)
{
FILE *f;
ErrCode err;
Ico_file_head head;
Ico_file_dir ico_dir;

/* If can't open file we'll return this */
err = Err_no_file;
if ((f = fopen(name, "rb")) != NULL)
	{
	if ((err = read_var(f, head)) >= Success)
		{
		if ((err = read_var(f, ico_dir)) >= Success)
			{
			if ((err = fseek(f, ico_dir.icon_offset, FSEEK_START)) >= Success)
				{
				err = ico_into_cel(f, ico_dir.width, ico_dir.height,
					ico_dir.num_colors);
				*pnum_colors = ico_dir.num_colors;
				}
			}
		}
	fclose(f);
	}
err = Qerror(err, "Trouble loading icon file %s", name);
return(err);
}


qload_one_ico()
/* Ask the user for ico file name and load it into the cel. */
{
char ico_name[80];
ErrCode err = Success;
int num_colors;

ico_name[0] = 0;
if (Qfile(".ICO", "Load", ico_name, ico_name, TRUE
	, "Load Windows Icon file into Cel?"))
	{
	err = ico_file_into_cel(ico_name,&num_colors);
	if (err >= Success)
		Qtext("Successfully loaded %s into Cel", ico_name);
	}
}

ErrCode ico_files_into_flic(char *dir, char **ico_names, int ico_count,
	int background_color, int text_color)
/* Load a list of .ICO files in dir into current flic. */
{
ErrCode err;
int i;
char *name;
char path_name[PATH_SIZE];
int num_colors;
int pic_width, pic_height;
int cel_width, cel_height;
int text_x, text_y;
int text_height;
int text_width;
Screen *pic,*cel;

if ((err = SetFrameCount(ico_count)) >= Success)
	{
	SetFrame(0);								/* Start at beginning of flic */
	pic = GetPicScreen();						/* Get (constant) Pic screen */
	for (i=0; i<ico_count; ++i)					/* Loop through all icons. */
		{
		name = *ico_names++;
		sprintf(path_name, "%s%s", dir, name);	/* Construct full path name. */
		if ((err = ico_file_into_cel(path_name,&num_colors)) < Success)
												/* Load icon into Cel. */
			break;
		cel = GetCelScreen();					/* Get Cel screen *in* loop */
		GetScreenSize(pic,&pic_width,&pic_height);
												/* Find Flic screen size. */
		GetScreenSize(cel,&cel_width,&cel_height);
												/* Find Cel (Icon) size. */
		copy_screen_colors(cel,pic);			/* Use icon color map. */
		SetColor(background_color);				/* Set background color. */
		Box(0,0,pic_width,pic_height);			/* Clear background. */
		CelMoveTo(pic_width/2,pic_height/2);	/* Center cel. */
		CelPaste();								/* Paste cel. */
		text_y = pic_height/2 + cel_height/2  + FontHeight()/2;
												/* Text is under cel */
		text_x = pic_width/2 - StringWidth(name)/2;
												/* and centered. */
		SetColor(text_color);					/* Set text color. */
		Text(text_x,text_y,name);				/* Draw file name text. */
		NextFrame();							/* Advance flic frame. */
		}
	}
}

int get_dir_list(char *dir, char ***plist, char *wild, Boolean with_dirs)
/* Get a listing of a particular directory
 * (as opposed to just the current directory. */
{
char odir[PATH_SIZE];
int count;

GetDir(odir);
if ((count = SetDir(dir)) < Success)
	{
	SetDir(odir);
	return(Qerror(count, "Couldn't search directory %s", dir));
	}
count = DirList(plist,wild,with_dirs);
SetDir(odir);
return(count);
}

qload_icon_dir(int background_color, int text_color)
/* Ask the user for a directory name and load all .ICO's in
 * that directory into flic. */
{
char base_name[PATH_SIZE];
char dev[4],dir[70],file[10],suff[5];
ErrCode err = Success;
base_name[0] = 0;
char **dir_list;
int dir_count;

if (Qfile(".ICO", "LoadAll", base_name, base_name, TRUE
	, "Load All Icons in directory into Flic?"))
	{
	/* Transform base-name into just the directory parts */
	fnsplit(base_name,dev,dir,file,suff);
	file[0] = 0;
	suff[0] = 0;
	fnmerge(base_name,dev,dir,file,suff);
	if ((dir_count = err = get_dir_list(base_name, &dir_list, "*.ICO", FALSE)) 
		> 0)
		{
		err = ico_files_into_flic(base_name, dir_list
			, dir_count, background_color, text_color);
		FreeDirList(&dir_list);
		}
	Qerror(err, "Trouble loading all icon files in %s", base_name);
	}
}


qload_all_icos()
/* Menu loop when they've selected "Load Icon Directory into Flic" */
{
int choice;
static char *choices[] = {
	"Choose Directory and Go",
	"Choose Background Color",
	"Choose Text Color",
	"Choose Font",
	"Cancel",
	};
static int background_color = 16;	/* Default grey background.*/
static int text_color = 0;			/* Default black text. */
int color;

for (;;)
	{
	choice = Qmenu(choices, Array_els(choices)
		,  "Load Icon Directory into Flic");
	switch (choice)
		{
		case 1:
			qload_icon_dir(background_color, text_color);
			return;
		case 2:
			if ((color = Qcolor()) >= Success)
				background_color = color;
			break;
		case 3:
			if ((color = Qcolor()) >= Success)
				text_color = color;
			break;
		case 4:
			Qfont();
			break;
		default:
			return;
		}
	}
}


qmain_menu()
/* This is the highest level menu loop. */
{
int choice;
static char *choices[] = {
	"Load Icon into Cel",
	"Load Icon Directory into Flic",
	"Exit",
	};

for (;;)
	{
	choice = Qmenu(choices, Array_els(choices),  "Windows .ICO file loader.");
	switch (choice)
		{
		case 1:
			qload_one_ico();
			break;
		case 2:
			qload_all_icos();
			break;
		default:
			return;
		}
	}
}


/*** Stuff to save away and restore AniPro state. ***/

typedef struct 
	{
	int ccolor;
	Boolean filled;
	Boolean two_color;
	char ink[20];
	} AniState;

void ani_state_save(AniState *this)
{
this->ccolor = GetColor();
this->filled = GetFilled();
this->two_color = GetTwoColor();
GetInk(this->ink);
}

void ani_state_restore(AniState *this)
{
SetColor(this->ccolor);
SetFilled(this->filled);
SetTwoColor(this->two_color);
SetInk(this->ink);
}


Boolean abort_handler(void *old_state)
/* This function will get called if user aborts us. */
{
ani_state_restore(old_state);
return TRUE;
}


main()
{
AniState old_state;

ani_state_save(&old_state);						/* Save system state. */
SetInk("Opaque");								/* Normal fast ink. */
SetFilled(TRUE);								/* Shapes drawn filled. */
SetAbortHandler(abort_handler, &old_state);		/* Restore state if aborted. */
qmain_menu();									/* Go to top level menu. */
ani_state_restore(&old_state);					/* Restore state normally. */
}

