/* robocel.poc 
 * This function lets the user set up a path for the Cel to follow.  The
 * cel will turn to follow the path.
 */
#include "errcodes.h"

	/* short-cut for array-allocation */
#define news(pt,count) (pt = calloc(count, sizeof((pt)[0])))

	/* This turns the angle parameters of CelTurn, CelTurnTo,
	 * and CelWhere into degrees.  (Some bug slipped in when
	 * Peter changed the CelTurn units but Poco didn't get updated.
	 * Ack! */
#define CelTurnFix	(16.0*360.0/1024.0)

#define PI		3.14159265358979323846

double RadiansToDegrees(double angle)
{
return(angle * 360.0 / (2 * PI) );
}

freez(void **pt)
/* Release pointer memory and zero pointer. */
{
if (*pt != NULL)
	{
	free(*pt);
	*pt = NULL;
	}
}

typedef struct
	{
	int count;
	int *x;
	int *y;
	} Path;
Path RoboPath;


void FreePath(Path *path)
/* Release memory associated with Path */
{
freez(&path->x);
freez(&path->y);
path->count = 0;
}

ErrCode NewPath(Path *path, int pt_count)
/* Allocate memory for points in path */
{
if (news(path->x,pt_count) == NULL)		/* Get X array */
	return(Err_no_memory);
if (news(path->y,pt_count) == NULL)		/* Get Y array too */
	{
	freez(&path->x);			/* If any troubles free X array */
	return(Err_no_memory);
	}
path->count = pt_count;
return(Success);
}

ErrCode RubPath(Path *path)
/* Get a path from user */
{
if (path->count = RubPoly(&path->x, &path->y))
	return(Success);
else
	return(path->count);
}

ErrCode MakeRoboPath()
/* Get RoboPath from user */
{
FreePath(&RoboPath);
return(RubPath(&RoboPath));
}

ErrCode LoadRoboCel()
/* Query user for file name and then load Cel from it. */
{
static char name[PATH_SIZE];

if (Qfile(".CEL;.FLI.;.FLC", "Load", name, name, FALSE, "Load Cel"))
	return(LoadCel(name));
else
	return(Err_abort);
}

#define POLY_FILE_MAGIC 0x99
typedef struct
	{
	short pt_count;
	long clipped_list;
	char reserved;
	char magic;		/* == POLY_FILE_MAGIC in good files. */
	} PolyFileHead;

typedef struct
	{
	short x,y,z;
	} PolyFilePoint;

ErrCode ReadPath(char *name, Path *path)
/* Reads in path from file.  Format of file is a PolyFileHead followed
 * by a variable number of 3-D 16 bit points.  */
{
FILE *f = NULL;
ErrCode err = Success;
PolyFileHead head;
PolyFilePoint point;
int *x, *y;
int i;

memset(path, 0, sizeof(*path)); 		/* Clear out path for easier error
										 * recovery. */
if ((f = fopen(name, "rb")) == NULL)	/* Open path file in binary mode. */
	{
	err = Err_no_file;
	goto ERROR;
	}
if (fread(&head,sizeof(head),1,f) != 1)	/* Read in file header. */
	{
	err = Err_truncated;
	goto ERROR;
	}
if ((head.magic&0xff) != 0x99)			/* Check magic to make sure it's
	 									 * really a poly/path file. */
	{
	err = Err_bad_magic;
	goto ERROR;
	}
										/* Create a path the right size. */
if ((err = NewPath(path, head.pt_count)) < Success)
	goto ERROR;
x = path->x;							/* Grab the point arrays of path */
y = path->y;
for (i=0; i<head.pt_count; ++i)			/* Loop through reading 16 bit x,y,z
										 * points and converting them to two
										 * separate 32 bit arrays. */
	{
	if (fread(&point, sizeof(point), 1, f) != 1)
		{
		err = Err_truncated;
		goto ERROR;
		}
	*x++ = point.x;
	*y++ = point.y;
	}
ERROR:
if (err < Success)						/* If there was a problem then free
	FreePath(path);						 * up memory used by path so far. */
fclose(f);
										/* Report and return error (if
										 * err != Success) */
return(Qerror(err, "Couldn't load Path %s", name));	
}


ErrCode LoadRoboPath()
/* Query user for file name and then load RoboPath from it. */
{
static char name[PATH_SIZE];

if (Qfile(".PLY", "Load", name, name, FALSE, "Load Robo Path"))
	{
	FreePath(&RoboPath);
	return(ReadPath(name,&RoboPath));
	}
else
	return(Err_abort);
}

ErrCode FlyCelOnPath(Path *p)
/* Paste a Cel along path with cel pointing in the direction it's moving. */
{
int old_filled;
int old_cel_x, old_cel_y;
double old_cel_angle;
ErrCode err = Success;


	/* Save Ani Pro state variables we're going to modify */
CelWhere(&old_cel_x, &old_cel_y, &old_cel_angle);	/* Save old cel position */
old_filled = GetFilled();							/* and old filled flag. */
SetFilled(FALSE);
Poly(RoboPath.count, RoboPath.x, RoboPath.y);

{
int i;
int lx,ly;
int nx,ny;
double rangle;

lx = RoboPath.x[RoboPath.count-1];
ly = RoboPath.y[RoboPath.count-1];
for (i=0; i<RoboPath.count; ++i)
	{
	nx = RoboPath.x[i];
	ny = RoboPath.y[i];
	rangle = RadiansToDegrees(atan2(ly-ny, lx-nx));
	CelMoveTo(nx,ny);
	CelTurnTo(rangle*CelTurnFix);
	CelPaste();
	lx = nx;
	ly = ny;
	}
}

/*
double  atan2(double y, double x);
return(Poly(RoboPath.count, RoboPath.x, RoboPath.y));
*/

OUT:						/* Move everything back where it was and
							 * report error if any. */
CelMoveTo(old_cel_x,old_cel_y);	
CelTurnTo(old_cel_angle);
SetFilled(old_filled);
return(Qerror(err, "Trouble flying cel along path"));
}

ErrCode RenderRoboPath()
/* Make sure that we have a cel and a path,  then call the Cel-flyer */
{
if (!CelExists())
	{
	Qtext("Please load a Cel first.");
	return(Err_reported);
	}
if (RoboPath.count <= 0)
	{
	Qtext("Please Make Path or Load Path first");
	return(Err_reported);
	}
return(FlyCelOnPath(&RoboPath));
}


main()
/* Loop around in main menu until they cancel out. */
{
char *main_choices[] =
	{
	"Make Path",
	"Load Cel",
	"Load Path",
	"Render",
	"Exit",
	};

for (;;)
	{
	switch (Qmenu(main_choices,Array_els(main_choices),"RoboCel Path Finder"))
		{
		case 1:
			MakeRoboPath();
			break;
		case 2:
			LoadRoboCel();
			break;
		case 3:
			LoadRoboPath();
			break;
		case 4:
			RenderRoboPath();
			break;
		default:
			return;
		}
	}
}
