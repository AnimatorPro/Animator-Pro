Errcode pj_delete(char *name)

Boolean pj_exists(char *path)
/* Does file exist? Boolean does not handle.j errors now */

Errcode get_path_device(char *path,char *device)
/* for ms dos: returns device for a path < 0 if error, doesn't include
 * device delimiter */

Errcode pj_ioerr()

Errcode pj_close(Jfl *f)

static Jfl *jopen_it(char *name, int mode, 
					 Doserr (*openit)(int *phandle, char *name,int mode))

Jfl *pj_open(char *name,int mode)

Jfl *pj_create(char *name, int mode)

Errcode pj_is_fixed(char *device)

/* returns 1 if device is fixed 0 if not < 0 if error */

long pj_read(Jfl *f, void *buf, long count)

Errcode pj_rename(char *old, char *new)

int get_jmode(Jfl *t)

long pj_seek(Jfl *f, long offset, int mode)

long pj_file_size(char *title)

void *get_jstdout()

void *get_jstderr()

long pj_tell(Jfl *f)

void *trd_laskmem(long size)

void trd_freemem(void *p)

Errcode set_temp_path(char *path)

long pj_write(Jfl *f, void *buf, long count)

Errcode pj_dset_drive(int d)

long pj_dtell(int f)
/* Reposition file pointer returns file position < 0 if error */

Errcode ffile_error()

void ffclose(FILE **pfp)

Errcode ffopen(char *path, FILE **pfp, char *fmode)

Errcode ffread(FILE *fp,void *buf,LONG size)

Errcode ffreadoset(FILE *fp,void *buf, LONG oset,LONG size)

Errcode ffseek(FILE *fp,LONG oset,int how)

static void clearerr_shell(FILE *fp)

static int feof_shell(FILE *fp)

static int ferror_shell(FILE *fp)

Errcode pj_errno_errcode()

static int *get_perrno()

static int fseek_shell(FILE *fp,long int offset,int whence)

LONG fftell(FILE *fp)

Errcode ffwrite(FILE *fp,void *buf,LONG size)

Errcode ffwriteoset(FILE *fp,void *buf, LONG oset,LONG size)

Errcode add_subpath(char *drawer, char *subpath, char *outpath)
/* puts path and name together to for a concatenated path, record will be
 * truncated to PATH_SIZE outpath may be a drawer input drawer and output 
 * path may be the same buffer */

int _fp_parse_device(char **pfn, char *device)

Errcode _fp_parse_dir(char **pfn, char *dir)

int get_drawer_len(char *path)

/* returns length of drawer part of path errcode */

Errcode full_file_path(char *drawer, char *name, char *fullpath)
/* makes a fully expanded file path */

Errcode get_dir(char *path)

Errcode get_path_device(char *path,char *device)
/* for ms dos: returns device for a path < 0 if error */

int _fp_get_path_devlen(char *path)

/* returns device name length including delimiter of path Error if invalid
 * 0 if no device found */

Errcode get_full_path(char *path, char *fullpath)

/* expands a path to the fully expanded path from device down for the path */

char *pj_get_path_name(char *path)
/* returns pointer to last name in path */

int pj_inc_filename(char *path)

Boolean pj_valid_suffix(char *suff)
/* if it is a valid file suffix containing valid characters may or may not
 * have a leading '.' */

Errcode make_file_path(char *drawer, char *name, char *outpath)

Boolean pj_name_in_path(char *path, char *name)

Errcode fnmerge(char *path, char *device, char *dir, char *file,
	char *suffix)

static Errcode _fp_parse_suffix(char **pfn, char *suff)

static Errcode _fp_parse_file(char **pfn, char *file)

Errcode fnsplit(char *path, char *device, char *dir, char *file,
	char *suffix)
/* split file name into smallest components */

int path_prefix_len(char *path)

/* returns length of path prefix */

void remove_path_name(char *path)
/* truncates last name on path, leaves trailing '\' */

void pj_set_path_name(char *path, char *name)

Errcode split_copy_path(char *file_name, char *path_side, char *file_side)
/* split file path into file name and path sides */

Errcode split_path(char *p1, char *device, char *dir)
/* split a device:dir combination into device and dir */

Boolean suffix_in(char *path, char *suff)

char *fix_suffix(char *path)
/* truncates to max size allowed (maxlen + delimiter) and returns pointer 
 * to suffix which is a pointer to the string's terminating 0 if there is
 * no suffix */

char *pj_get_path_suffix(register char *path)

/* returns *path at start of suffix last name of path */

Boolean has_a_suffix(char *path)

void remove_suffix(char *path)

/* "removes" any suffix from path by null terminating */

Errcode current_device(char *dstr)

/* gets current device name as string, returns string length of
 * device or error code does NOT include device delimitor after device name */

void free_wild_list(Names **pwild_list)

static Errcode add_wild(Wild_data *wd)

static Errcode attr_wild_list(int attr, char *pat, Wild_data *wd) 

/* will return Success if nothing is found */

Errcode alloc_wild_list(Names **pwild_list, char *pat,Boolean get_dirs,
							   int min_name_size, 
							   Nameload load_name )

/* allocate list of files from current directory insuring that each buffer 
 * is the size requested and copying in name with input function does not
 * sort list */

static void load_wild_name(Wild_entry *entry, char *name)

Names *merge_wild_lists(Names *l1, Names *l2)

Errcode build_wild_list(Names **pwild_list, char *pat, Boolean get_dirs)

void unslash_dir(char *dir, char *unslash)
/* Pass in pointer to directory that might have an extra slash at the end and
 * pointer to where to put unslashed version. */

Errcode build_dir_list(Names **pwild_list, char *pat, 
					   Boolean get_dirs, char *dir)
/* get list of files from a specified directory */

Errcode pj_change_device(char *name)

/* Hey dos - I want to go to this device. Accepts device name with or without
 * delimitor e: "A" ir "A:" */

int pj_get_devices(UBYTE *devices)

/* Get list of devices we believe to be real (for drive buttons on
   browse menu and other uses) by doing a request for info DOS call
   on each letter of the alphabet.  Since this is a little slow on 
   floppies, we consult the BIOS equipment list for a count of # of
   floppies to fill in the potential A: and B: devices. 
   Returns count of devices.  If devices array pointer is NULL 
   the only the count is returned. This is slow on the first call but
   subsequent calls are negligible */

Errcode change_dir(char *name)

/* Hey dos - I want to go to this directory.  Actually this changes
   both device and directory at once.  eg name could be
   C:\VPAINT\FISHIES   or C:\VPAINT\FISHIES\ */

Errcode pj_closez(Jfile *pjf)

Errcode pj_copyfile(char *source, char *dest)
/* Make a copy of a (closed) file. Report errors except for
   source file not existing. */

Errcode copy_in_file(Jfile file, LONG bytes, LONG soff, LONG doff)

/* Move a piece of a file from one place to another. */

Errcode pj_copydata_oset(Jfile src, Jfile dest, 
						LONG soset, LONG doset, LONG size)

Errcode pj_cpfile(char *source, char *dest, char **perrfile)

/* pj_cpfile copies source to destination.  Does not report error
   but if there is one returns the error code and sets **perrfile
   to either source or dest (depending where error was). */

Errcode pj_copydata(Jfile src, Jfile dest, LONG size)

/* copys data between two files reading from one writing to the other 
 * at current position for both files */

static Errcode get_doserror(void)
/*
 * Get latest an error code from MS-DOS
 */

static Errcode ddos_open(Jfl *result, char *name, int mode)
/*
 * Pass open request to MS-DOS
 */

static Errcode ddos_create(Jfl *result, char *name, int mode)
/*
 * Pass create request to MS-DOS
 */

static Errcode ddos_close(Jfl *in)
/*
 * Pass close request to MS-DOS
 */

static long ddos_write(Jfl *f, void  *buf, long count)
/*
 * Pass write request through to MS-DOS
 */

static long ddos_read(Jfl *f, void *buf, long count)
/*
 * Pass read request through to MS-DOS
 */

static long ddos_seek(Jfl *f, long offset, int mode)
/*
 * Pass seek request through to MS-DOS
 */

static long ddos_tell(Jfl *f)
/*
 * Pass tell (where am I in file) request to MS-DOS 
 */

static Errcode ddos_rename(char *old, char *new)
/*
 * Pass rename request to MS-DOS 
 */

static Errcode dropen(Jfl *result, char *name, int mode)
/*
 * Pass open request through to internal ramdisk and store result
 * in handle.
 */

static Errcode drcreate(Jfl *result, char *name, int mode)
/*
 * Pass create request through to internal ramdisk and store result
 * in handle.
 */

static Errcode drclose(Jfl *in)
/*
 * Pass close request to internal ramdisk.
 */

static long drwrite(Jfl *f, void  *buf, long count)
/*
 * Pass write request to internal ramdisk.
 */

static long drread(Jfl *f, void *buf, long count)
/*
 * Pass read request to internal ramdisk.
 */

static long drseek(Jfl *f, long offset, int mode)
/*
 * Pass seek request to internal ramdisk.
 */

static long drtell(Jfl *f)
/*
 * Pass tell (whereami) request to internal ramdisk.
 */

Boolean is_ram_file(Jfl *fd)
/*
 * Determine if a file is on ramdisk device.  (A file may be on 
 * tempfile device presently residing on ramdisk.  This test will
 * fail on such a file.  Only determines if file was opened with #:
 */

static Errcode dtopen(Jfl *result, char *name, int mode)
/*
 * Pass open request to temp-file-device and store result in handle.
 */

static Errcode dtcreate(Jfl *result, char *name, int mode)
/*
 * Pass create request to temp-file-device and store result in handle.
 */

static Errcode dtclose(Jfl *in)
/*
 * Pass close request to temp-file-device.
 */

static long dtwrite(Jfl *f, void  *buf, long count)
/*
 * Pass write request to temp-file-device.
 */

static long dtread(Jfl *f, void *buf, long count)
/*
 * Pass read request to temp-file-device.
 */

static long dtseek(Jfl *f, long offset, int mode)
/*
 * Pass seek request to temp-file-device.
 */

static long dttell(Jfl *f)
/*
 * Pass tell (whereami) request to temp-file-device.
 */

static Tdev *dev_for_name(char *name)
/*
 * Given the device name, figure out from it's first character which
 * device it belongs to.
 */

static Jfl *jnew_file(Tdev *dev)
/*
 * Allocate memory for new Jfl struct and initialize it with magic number,
 * device and zeroes.
 */

static Jfl *pj_open_or_create(Boolean do_create, char *name, int mode)
/*
 * Open or create a jfile.  (which one depends on do_create passed
 * in.)   Since open are identical except for whether the device
 * specific open or the device specific create is called - we have this
 * function.
 */

Jfl *pj_open(char *name, int mode)
/*
 * Open a previously existing file.  Mode indicates whether it's
 * read or write or both.  (See filemode.h for definitions of
 * acceptable modes.)
 */
 
Jfl *pj_create(char *name, int mode)
/*
 * Create a new file.  Can be write or read/write as determined by the
 * mode parameter (see filemode.h for acceptible mode values).  
 */

Errcode pj_close(Jfl *f)
/*
 * Close a file handle 
 */

long pj_read(Jfl *f, void *buf, long count)
/*
 * Read in a bunch of bytes from a file 
 */

long pj_write(Jfl *f, void *buf, long count)
/*
 * Write out a bunch of bytes to a file 
 */

long pj_seek(Jfl *f, long offset, int mode)
/*
 * Move to a new place in a file.  Offset can be from current location
 * beginning or end of file depending on mode.  See filemode.h.
 */

long pj_tell(Jfl *f)
/*
 * Return current position in file
 */

Errcode pj_delete(char *name)
/*
 * Delete a file.
 */

Errcode pj_ioerr()
/*
 * Return last i/o error code.
 */

int get_jmode(Jfl *t)
/*
 * Return mode file was opened with.
 */

Errcode pj_rename(char *old, char *new)
/*
 * Rename a file.  Generally will only work if both old and new name are
 * on the same device.
 */

Boolean pj_exists(char *title)
/* Does file exist? Boolean does not handle errors now */

long pj_file_size(char *title)
/*
 * Return size of a (closed) file.
 */

Errcode pj_is_fixed(char *device)
/* returns 1 if device is fixed 0 if not < 0 if error */

void *get_jstdout()
/*
 * Return pointer to standard output.
 */

void *get_jstderr()
/*
 * Return pointer to standard input.
 */

Errcode pj_insert_space(Jfile f,LONG offset, LONG gapsize)

/* increases file size by gapsize, and copys all data in file at offset
 * toward end of file by gapsize, leaves current
 * position at offset start of gap unless there is
 * an error */

Errcode pj_pathdev_is_fixed(char *path)
/* returns 1 if device is fixed 0 if not < 0 if error */

Errcode read_gulp(char *name, void *buf, long size)
/* Read in a file of known size all at once. */

Errcode pj_read_ecode(Jfile f, void *buf, LONG size)
/* jread that returns errorcode */

Errcode pj_readoset(Jfile f,void *buf, LONG oset,LONG size)

/* combo seek and read */

Errcode pj_write_zeros(Jfile file,LONG oset, LONG bytes)

Errcode pj_write_ecode(Jfile f, void *buf, LONG size)
/* jwrite that returns errorcode */

Errcode pj_writeoset(Jfile f,void *buf, LONG oset,LONG size)

/* combo seek and read */

Errcode write_gulp(char *name, void *buf, long size)
/* Write out a file of known size all at once returns Ecode */

lfgetc(LFILE *f)

char *lfgets(char *buf,int max, LFILE *f)

static LFILE *_lfopen(char *filename, char *mode, LFILE *f)
/*
 *	Attempt to open <filename> in the given
 *	<mode> and attach it to the stream <f>
 *  Return LFILE * on success, NULL on error.  On error 
 *  further info is stored in lerrno;
 */

LFILE *lfopen(char *name, char *mode)

static long untext(LFILE *f, char *buf, long count)
/* Translate text from ms-dos to unix representation.  If encounter
   control-z make file appear at end-of-file.  Filter out '\r' chars. */

static void retext(char *in, char *out, long count)
/* move count bytes of in to out, expanding <lf>'s in in to
   <cr><lf>'s in out */

static long _lf_uread(LFILE *f, char *buf, long count)
/* Read in count.   If in text mode do <cr/lf>  translation.
 * Beware that return may be less than count even before end of
 * file because of stripped <cr>'s */

static long count_lf(char *buf, long count)
/* cont the number of <lf>'s in buf */

long _lf_uwrite(LFILE *f, char *buf, long count)
/* write out count.   If in text mode do <cr/lf>  translation */

Errcode _lf_wflush(LFILE *f)
/* do pending writes. */

Errcode _lf_rflush(LFILE *f)

Errcode lfclose(LFILE *f)

Errcode lfflush(LFILE *f)

int lfprintf(LFILE *f, char *format, ...)
/* will break on large strings.  Not production code, just testing... */

int lfprintf(LFILE *f, char *fmt, ...)

lfputc(int c, LFILE *f)

lfputs(char *s,LFILE *f)

unsigned lfread(void *buf, unsigned size, unsigned count, LFILE *f)
/* fread - optimized for size > count.  If size is larger than
   file buffer size this will effectively turn into a direct unbuffered
   series of count reads.  Otherwise memcpy size bytes from file buffer
   count times, _lf_rflushing as necessary */

void lrewind(LFILE *f)

lfseek(LFILE *f, long offset, int whence)

int lprintf(char *format,...)

init_stdfiles()

cleanup_lfiles()

long lftell(LFILE *f)

lungetc(int c,LFILE *f)

int lvfprintf(LFILE *f, char *fmt, va_list args)

unsigned lfwrite(void *buf, unsigned size, unsigned count, LFILE *f)
/* This one isn't optimized yet.   Just in terms of lputc */

void *slist_el(register Slnode *list, int ix)

/* given pointer to first element of a list and index returns pointer to 
 * element. NULL if not there */

int slist_ix(register Slnode *list, Slnode *el)

/* given pointer to element and pointer to first in list returns
 * "index" or count away from list element is -1 if not found */

int slist_len(register Slnode *list)

void *join_slists(Slnode *s1, Slnode *s2)

void init_list(list)

Dlheader *list;

void add_head(list,node)

Dlheader *list;
Dlnode *node;

void add_tail(list,node)

Dlheader *list;
Dlnode *node;

void insert_after(node,lnode)

register Dlnode *node; /* node to insert after */
register Dlnode *lnode; /* attached node */

void insert_before(node,lnode)

register Dlnode *node; /* node to insert before */
register Dlnode *lnode; /* attached node */

Dlnode *get_head(register Dlheader *list)

Dlnode *see_head(register Dlheader *list)

Dlnode *get_tail(register Dlheader *list)

Dlnode *see_tail(register Dlheader *list)

void rem_node(register Dlnode *node)

void safe_rem_node(register Dlnode *node)

void list_tohead( register Dlheader *fromlist, register Dlheader *tolist)

void list_totail(Dlheader *fromlist, Dlheader *tolist)

LONG listlen(Dlheader *list)

Dlheader *find_header(register Dlnode *node)

Boolean isin_list(register Dlnode *testnode,Dlheader *list)

/* returns 1 if node found in list 0 if not */

void insert_compare(register Dlnode *node,
					Dlheader *list,
					FUNC compare)
/* FUNC a function that is called given *node A and *node B
 * compare(Dlnode *nodea Dlnode *nodeb) returns 0 if
 * A == B, < 0 if A < B, > 0 if A > B */

void isort_list(Dlheader *list, FUNC compare)

/* a function that is called given *node A and *node B
 * compare(Dlnode *nodea Dlnode *nodeb) returns 0 if
 * A == B, < 0 if A < B, > 0 if A > B */

void sort_indarray(void **array, LONG count, FUNC cmp, void *cmpdat)

/* a little shell on an array of indirect pointers to things.
 * takes a function that is like strcmp() to compare things pointed to */

pj_dmake_dir(char *s)

pj_dget_err()

long
pj_ddfree(d)
int d;

void *tflush_alloc(long size)

old_video()
void pj_free(void *p)

void *
pj_malloc(long size)

int pj_mserror(void)
/* return last Jfileio error from dos_open(), dos_create(), or dos_readrwite() */

int txtcmp(register char *as, register char *bs)

Errcode errline(int err, char *s, ...)

tprint_stats()

copy_to_tempfile(char *inname, char *outname)

print_tempfile(char  *name)

err_peep(char *name, int mode)

test_open_err()

make_rshort(char *name, short size)

make_jshort(char *name, short size, int pri, int losable)

test_tempfile()

testit()

test_seek()

test_lots()

test_rfile()

print_jfile(char  *name)

Errcode  test_jfile()

test_two()

test_test()

main(int argc, char *argv[])

void rstats(long *alloc, long *free)
/* Find out the number of bytes allocated to ram-disk, and the amount
 * currently in use. */

static int new_blocks_avail(int max)
/* See how many blocks we can allocate up to max then free them.  Return
 * the # of blocks we allocated. */

void rdisk_set_max_to_avail()
/* set to max ram available for disk */

static long div_next_up(long p, long q)
/* This returns the next integer higher or equal to p/q */

long rdos_dfree()
/* Hopefully returns amount of ram disk available for a new file. */

Errcode rerror()
/* Return the last ram-disk error */

static tfree_sector(void *v)
/* Add a sector to the free list */

static Boolean tmore_sectors()
/* Allocate a block of memory,  divide it into sectors, and put the
 * sectors on the free list.   
 */

static void *tget_sector()
/* Return an unused sector.   Search free list first.  If empty allocate
 * another block.   If block alloc fails return NULL */

static void *tget_clear()
/* Return an unused sector initialized to all zeroes. */

long rwrite(Rfile tpf, void *buf, long count)
/* Write a buffer to an open ram-disk file. */

long rread(Rfile tpf, void *buf, long count)
/* Read a buffer from an open ram-disk file. */

static Rfile find_empty_slot()
/* Find an empty directory slot. */

static Rfile find_named(char *name)
/* Return directory entry of a named file if it exists, NULL otherwise. */

Errcode rexists(char *name)
/* Return Success if a file is on the ram-disk. */

static int flags_for_mode(int mode)
/* Calculate the temp_file.flags value for a given msdos/jfile file open/create
 * mode. */

Rfile ropen(char *name, int mode)
/* Open a file on ram-disk */

long rtell(Rfile tpf)
/* Return current file position on ram-disk. */

long rseek(Rfile tpf, long offset, int mode)
/* Seek to a position in ram-disk */

Rfile rcreate(char *name,int mode)
/* Create a file on ram-disk. */

rclose(Rfile tpf)
/* Close an open ram-disk file */

rdelete(char *name)
/* Delete a (closed) file from ram-disk. */

Errcode rrename(char *old, char *new)
/* Rename a file on ram-disk */

static int tcs_cmp(Tcs_block *a, Tcs_block *b)
/* See if the block pointer is lower or higher in memory than
 * the other block pointer.  Used in compacting ramdisk. */

static void attatch_frees(Tcs_block *tcs, Sector_list **pfree)
/* Move free sectors within block from *pfree to "frees" list of tcs.
 * This is called repeatedly for blocks that are in ascending order
 * in memory.
 * This is one stage of compacting the ram-disk. */

static void merge_frees(Tcs_block *tcs, Sector_list **pfree)
/* Append tcs->frees to end of list in *pfree.
 * This is one stage of compacting the ram-disk. */

static Sector_list *next_frees(Tcs_block **ptsc)
/* Return next free sector from an array of Tcs_blocks.  
 * This sector will be detatched from the tsc->frees list
 * that it is on.
 * This is one stage of compacting the ram-disk. */

static void move_sec(Tcs_block **ptsc, void **psec, long cut_at)
/* If sector is at least as high as cut_at in memory,  move it to
 * a free sector in lower memory. 
 * This is one stage of compacting the ram-disk. */

static void tsq_one(
	Tcs_block **tcs, int bcount, 		/* alloced block lists */
	long cut_at,						/* # of blocks needed */
	Temp_file *tpf)						/* temp file */
/* Move all the sectors used by one file to be below "cut_at" in
 * high memory.
 * This is one stage of compacting the ram-disk. */

static void tsqueeze(
	Tcs_block *tcs, int bcount, 		/* alloced block lists */
	int needed,							/* # of blocks needed */
	Temp_file *gtpf,					/* temp file dir */
	int tpf_count)						/* temp file dir count */
/* Having figured out how many sectors are needed to hold ram-disk,
 * move sectors used by each file into the lower memory blocks. */

Errcode rcompact()
/* Master routine to compact the ram-disk.  This will move files into
 * the lower blocks in memory,  and free unused blocks in high memory. */

tprint_dir()

Errcode rget_dir(Rdir **plist)
/* Return directory of ram-disk (file-names only) in a singly linked
 * list. */

void rfree_dir(Names **pdir)
/* Free up directory returned by rget_dir() */

ncmp(char **a, char **b)

main()

Errcode copy_parsed_chunk(Chunkparse_data *pd, Jfile dest)

/* copys to dest the parsed chunk including it's leading Chunk_id 
 * this prefers to seek. It might be better to do two writes */

Errcode read_parsed_chunk(Chunkparse_data *pd,void *buf,LONG maxsize)

/* reads in parsed chunk including it's leading Chunk_id if maxsize < 0
 * it will read the entire chunk no matter what. if >= 0 it will only read 
 * that size in NOTE you will always get at least a Fat_chunk worth of 
 * data */

EOF
*/

#endif /* BIG_COMMENT */



#include "errcodes.h"
#include "ptrmacro.h"
#include "unchunk.h"

#define Nextoset error




void init_chunkparse(Chunkparse_data *pd, Jfile fd, 
					 LONG root_type, LONG root_oset, 
					 LONG head_size, LONG root_size)
/*********************************************************************
 * Initializes a control structure for parsing chunks subordinate to
 * a Chunk_id containing sub chunks.
 *
 * Input args are:
 *
 * pd 			The cunkparse data to initialize
 * fd			The file to read chunks from
 * root_type  	The type expected, If set to -1 it will not read or verify
 *				the existence of the root chunk and will assume the root
 *				chunk is size provided.
 * root_oset	Offset to root chunk in file. If < 0 (DONT_SEEK_ROOT)
 				set offset to current position.
 * head_size    Size of any header data in the root chunk before the
 *				first subordinate chunk. inclusive of root sizeof(Chunk_id). 
 *				( head_size <= sizeof(Fat_chunk) means no head data).
 * root_size    The root chunk size provided if root_type is -1
 *
 ********************************************************************/

Boolean get_next_chunk(Chunkparse_data *pd)
/************************************************************************
 *     Returns TRUE if chunk is valid FALSE if error or end of root chunk. The 
 * error code for a FALSE return can be found in cp->error.  It will be 
 * Err_no_chunk if the root chunk was not found. Success if all parsed ok and 
 * it ended at the root chunks length. or other errors from file system or data 
 * is corrupted.
 * 
 *     If init_chunkparse() has other than DONT_READ_ROOT as the root_type 
 * get_next_chunk() will attempt to read the root chunk and verify that it has 
 * the type input on the first call after the init, and will place 
 * ROOT_CHUNK_TYPE (-1) in the pd->chunk_type field.
 * 
 *     If a valid chunk is found it leaves the file position at the first byte 
 * after the Fat_chunk of the chunk and has the Fat_chunk data in pd->fchunk.  
 * pd->chunk_offset is set to the offset of the Fat_chunk in the file 
 * copy_next_chunk() read_parsed_chunk() will only copy or read the head data.
 ************************************************************************/

Errcode update_parsed_chunk(Chunkparse_data *pd, void *buf)

/* rewrites but does not alter size of parsed chunk must have same type and
 * size fields This depends on the version field following the size and type
 * fields in the Fat_chunk */

Errcode jwrite_chunk(Jfile f, /* file to write to */
					 void *data, /* chunk data */
					 LONG size, /* sizeof chunk data not including 
								* chunk header */
					 SHORT type) /* chunk_id type */

/* writes a "chunk" record to a file, returns error code */

Boolean has_dir_chars(char *path)
/* Returns TRUE if there is a directory in the path name. */

Errcode full_path_name(char *drawer,char *subpath,char *fullpath)
/* makes fully expanded concatenation of a drawer and subpath */

char *get_temp_path()

Boolean is_tdrive(char *device)
/*
 * Returns true if first letter of device is one of those non-alphabetic
 * temporary or ram devices.
 */

static void print_parts(char *print_head, Dlheader *list)

static Errcode init_part(Path_part **ppart, char *pname)
/*
 * Allocate memory for a path_part struct and initialize it.  Return
 * result in *ppart.
 */

static void free_parts(Dlheader *pparts)
/*
 * Free a doubly linked list of path parts
 */

static letter_to_device(char letter)
/*
 * Convert from ascii to numerical representation of device
 */

static Errcode path_to_parts(char *path, Dlheader *pparts)
/*
 * Chop up a string of multiple directories separated by semicolons
 * into a doubly linked list of "path_parts".
 */

Errcode set_temp_path(char *tp)
/*
 * Input is a semicolon separated list of directories.   This function
 * will assign this list to the temp_path,  and create any directories
 * contained within it that don't already exist.
 */

void get_temp_path_head(char *head)
/*
 * Return the first directory in path (excluding the internal ramdisk
 * into head.
 */

static void make_tname(char *result, char *name, char *ppref)
/*
 * Input temp name including device (eg >:aatemp.flx) and
 * path prefix (eg c:\paat\).
 * Output ms-dos name (eg c:\paat\aatemp.flx)
 */

static Errcode tfind(char *name, char *pname)
/*
 * Find a file that's somewhere on the temp-path.  
 * Return ms-dos file-name in pname[]
 */

static Tfile alloc_tfile(char *name, char *ppref)
/*
 * Allocate and initialize a temporary file structure.
 */

Tfile tcreate(char *name,int mode)
/*
 * Create a new temporary file.   If it's a =: file most likely it'll
 * end up in internal ram-disk unless real tight for memory.  Otherwise
 * on first directory in temp path that has room to create a file.
 */

Tfile topen(char *name, int mode)
/*
 * Open a file on the temp device.  This will loop through the temp path
 * checking each directory for the file. 
 */

Errcode tclose(Tfile t)
/*
 * Close a temporary file.
 */

long tread(Tfile t, void *buf, long size)
/*
 * Read a block of data from an open temporary file.
 */

static Errcode oopen_seek(Jfile *phandle, char *name, int mode, long pos)
/*
 * Open a file and seek to a particular position.
 */

long tfree(int dev)
/*
 * Return the amount of memory left on a device.
 */

static Errcode copy_tfile(char *opname, char *pname, Tfile t, long space,
	Boolean substitute_result)
/* Close down file and copy it somewhere where there's room for it plus
 * some extra space.  On failure leave things as they were.  On Success
 * if substitute_result is true reattatch temp file to copy and delete
 * old one.
 */

static Errcode move_tfile(Tfile t, long space)
/*
 * Attempt to move a tfile requiring space more bytes than it has to
 * another device. 
 */

long twrite(Tfile t, void *buf, long size)
/*
 * Write a block of data to an open temporary file.
 * First write it to current underlying file.   If the write fails
 * then try swapping file to new device.  If swap fails return
 * length that did manage to get written.
 */

long tseek(Tfile t, long offset, int mode)
/*
 * Seek to a position in a temporary file
 */

long ttell(Tfile t)
/* 
 * Query current position in a temporary file
 */

Errcode tdelete(char *name)
/*
 * Delete a temporary file.
 */

Errcode terror()
/*
 * Return last temporary file error.
 */

Errcode trename(char *old, char *new)
/*
 * Rename a temporary file.
 */

static Tfile lookup_tfile(char *name, Dlheader *list)
/*
 * Find an (open) temporary file with the given name.
 */

static Errcode swap_open_rfile(char *name)
/*
 * Move an open temporary file from ram to disk.
 */

static Errcode swap_closed_rfile(char *rname)
/*
 * Move a closed temporary file from ram to disk.
 */

static Errcode try_rcompact(long need_free)
/*
 * Compact (free unused parts of) ram-disk,  and then temporarily
 * allocate "need_free" bytes.   Return whether allocation was
 * successful.
 */

static Errcode swap_either(Rdir *cless)
/*
 * Swap out a temporary file in ram that is either open or closed.
 */

static Errcode swap_either_compact(Rdir *cless, long need_free)
/*
 * Swap out a file from ram, and then return if there's "need_free"
 * memory that can be allocated after swap.
 */

Errcode trd_compact(long need_free)
/*
 * Swap temporary files to disk until can allocate a block of
 * memory "need_free" bytes long.
 */

Errcode trd_ram_to_files()
/* 
 * force ram-located temp files onto ms-dos 
 */

Errcode trd_up_to_ram(char *name)
/* 
 * If possible move a temp file up to ram. 
 * (Assumes temp file is closed.) 
 */

Errcode trd_move_to_ram(char *name, Jfile *pf)
/*
 * same as trd_up_to_ram but requires file handle, If file handle is 
 * JNONE it will leave file closed.  If file handle is not JNONE it may 
 * alter *pf and move file to ram,  It is possible that this may leave the 
 * file closed in a fatal error situation 
 */

static Boolean is_a_part(Dlheader *list, char *ppart)
/* Return TRUE if ppart is one of the paths in the path-parts-list. */

static void delete_files(Names *list)
/* Delete all files named in a singly linked list. */

static Errcode copy_to_new_path(char *old_path, char *new_path)
/* Copy all the files in the old-path-directories to new-path-directories. */

Errcode change_temp_path(char *new_path)

