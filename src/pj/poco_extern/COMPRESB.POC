/* COMPRESB.POC V1.1 Copyright 1991 by Dr. Laurence D. Preble (all rights reserved).  
This program is a NOISE Filter.  The user sets a threshold for
change over time.  If any given pixel changes its RGB value over time by less
than the specified threshold, the fluctuation is assumed to be video noise
and is filtered out.  This can greatly decrease the Delta in an Animator Pro
file, increase playback speed and decreases disk storage requirements for
animations which were obtained by video frame grabbers. */
void setframe(int frame);

int deltathreshold, delta0threshold,delta1threshold,xsize,ysize;
int changes,frame;
static short pix_delta[50][50];
Screen *first_screen,*swap_screen,*current_screen;
ErrCode error_code;

// Function to compare screens

int comp_screens(int xstart,int xend,int ystart,int yend,int blocksize)  {

   int xstart1,xend1,ystart1,yend1,xstart2,xend2,ystart2,yend2,pix_increment;
   int colora,colorb,colorc,rc,bc,gc,rdelta,gdelta,bdelta,total_delta,total2;
   short total_frames,x,y,z,z1,i,j;
   int ra,ga,ba,rb,gb,bb;

   xstart1 = xstart;
   xend1 = xend;
   ystart1 = ystart;
   yend1 = yend;
   
   if (blocksize > 1) {
      pix_increment = blocksize/2;
   }
   else {
      pix_increment = blocksize;
   } // end if

   //Set up loop to read screen, pixel by pixel
   // **************************************************************************
   if (blocksize > 1) { // choose simple algorithm or complex

      for (y=ystart1; y<=yend1; y=y+pix_increment) {
         printf("Frame = %d  Line = %d  Memory  Released = %d",frame,y,changes);

         for (x=xstart1; x<=xend1;x=x+pix_increment) {
            total2 = 0;
            for (z1=0; z1 <= blocksize; z1++) {
               for (z=0; z <= blocksize; z++) {

               // Get pixel color (0 - 255) screen a
               colora = GetPixel(first_screen,x+z,y+z1); // Get pixel color first screen
               colorb = GetPixel(current_screen,x+z,y+z1); // Get pixel color this screen
               GetColorMap(colora,&ra,&ga,&ba);
               GetColorMap(colorb,&rb,&gb,&bb);

               // Compute RGB Deltas
               rdelta = fabs(ra - rb);
               gdelta = fabs(ga - gb);
               bdelta = fabs(ba - bb);
               total_delta = rdelta + gdelta + bdelta; // add up total delta for this pixel
               pix_delta[z][z1] = total_delta;
 
               total2 = total2 + total_delta; // save grand total deltas for all pixels in block

               } // end of z loop
            } // end of z1 loop

            // Does it exceed threshold?
            if(total2 < delta1threshold ) { 
               Box(x,y,pix_increment + 2,pix_increment + 2);
               changes = changes + (pix_increment + 2)*(pix_increment + 2);
            } // end 1st half if if
            else { // do a bitwize comparison of block
               for (z1=0; z1 <= pix_increment +1; z1++) {
                  for (z=0; z <= pix_increment +1; z++) {
                     if (pix_delta[z][z1] < deltathreshold) {
                        SetPixel(current_screen,0,x+z,y+z1);
                        changes = changes + 1;
                     } // end if pix_delta
                  } // end for z
               } // end for z1
            } // end else
         } // end first half of if blocksize
      } // xpixel loop
   } // ypixel loop
// **************************************************************************
   else { // else if blocksize

      for (y=ystart1; y<=yend1; y++) {
         printf("Frame = %d  Line = %d  Memory  Released = %d",frame,y,changes);
         for (x=xstart1; x<=xend1;x++) {
            total2 = 0;
            // Get pixel color (0 - 255) screen a
            colora = GetPixel(first_screen,x+z,y+z1); // Get pixel color first screen
            colorb = GetPixel(current_screen,x+z,y+z1); // Get pixel color this screen
            GetColorMap(colora,&ra,&ga,&ba);
            GetColorMap(colorb,&rb,&gb,&bb);

            // Compute RGB Deltas
            rdelta = fabs(ra - rb);
            gdelta = fabs(ga - gb);
            bdelta = fabs(ba - bb);
            total_delta = rdelta + gdelta + bdelta; // add up total delta for this pixel
            pix_delta[z][z1] = total_delta;

            total2 = total2 + total_delta; // save grand total deltas for all pixels in block
            // Does it exceed threshold?
            if(total2 < delta1threshold) {

               SetPixel(current_screen,0,x,y);// If not change current pixel one from previous screen
               changes = changes + 1;
            } // end if
         } // xpixel loop
      } // ypixel loop
   } // end if blocksize
// **************************************************************************
return;
} // end of comp_screens

// **************************************************************************
// This Version compares to the first frame and then replaces with contents of swap buffer
main() {
int maxz,increment,i,j,xstart,xend,ystart,yend,blocksize;
int total_frames,x,y,z,z1,temp;
int filter;

Qtext("This program compresses an Animation if it has been created with a Video Frame Grabber.  It also can subsitute a new background screen for all frames.   Video should be obtained with tripod for stability when digitizing.  The first frame should contain only the background.  Other frames contain both background and foreground images.  Swap Screen, if it exists, will replace background on all frames.  Otherwise, only Video Noise is filtered out but background remains the same.");

Qtext("COMPRESB.POC is copyright 1991 by Dr. Laurence D. Preble (all rights reserved).This software is ShareWare.  It is not public domain, nor is it free.  You may use the software on a trial basis for 1 month.  If you decide to continue using the software after that time period, you must register your software with us.");

Qtext("However, this software may be freely copied and distributed by any means provided that all components of the package including this documentation are distributed and provided that nothing is altered.");

Qtext("To register: Send $25.00, check, money order, MasterCard or Visa to Dr. Preble's Programs, 6540 Outer Loop, Louisville, Kentucky 40228 Phone:(502) 969-1818");


SetAbort(TRUE);
// Get noise threshold setting (RGB)


deltathreshold = 400;
if(Qnumber(&deltathreshold,1,800,"Select Filter Threshold") == 0) exit(temp);
   deltathreshold = deltathreshold / 8;
   delta0threshold = deltathreshold;
   changes = 0;

   // Set Key Color Button on and Color to 0
   SetInk("OPAQUE"); // Opaque ink
   SetKeyMode(TRUE); // Key mode is true, key color won't erase others

   SetKeyColor(0);
   SetColor(0);  // drawing color
   // Go to start of animation
   SetFrame(0);

   GetSize(&xsize,&ysize); // Get logical size of screen
   total_frames = GetFrameCount(); // Get total frames

   Qtext("Size = %d %d   Frames = %d",xsize,ysize,total_frames); // Display them
   filter = 16;
   if(Qnumber(&filter,1,24,"Starting Filter Block size, in pixels") == 0) exit(temp);
   filter = filter * 2;
   maxz = filter - 1;
   xstart = 0;
   xend = xsize;
   ystart = 0;
   yend = ysize;
   blocksize = maxz;
   delta1threshold = deltathreshold * pow(blocksize,2);

   // Set up loop to read frame buffer and swap buffer simultaneously
   AllocScreen(&first_screen,xsize,ysize);
   AllocScreen(&current_screen,xsize,ysize);
   swap_screen = GetSwapScreen();
   CopyScreen(GetPicScreen(),first_screen);
   NextFrame();

   for (frame=GetFrame()+1; frame<=total_frames; frame++) {
      current_screen = GetPicScreen();
      comp_screens(xstart,xend,ystart,yend,blocksize);
      // Sweep picture
      SetInk("Sweep");
      PicDirtied();
      Box(0,0,xsize - 1,ysize - 1);

      // Fill in blank areas with swap screen
      SetInk("OPAQUE");
      CelClip();
      if (SwapExists() == 1) {
         CopyScreen(swap_screen,current_screen);
      } // end if SwapExists
      else {
         CopyScreen(first_screen,current_screen);
      } // end else
      CelPaste();

      NextFrame();

   } // frame loop
   Qtext("Approximate Total Memory Release from Animation = %d",changes);

} // end of main()
