/*   FLICFADE.POC

    This POCO program adds transition segments to the current flic. The
 transitions are intended to simultate the 'fadein', 'fadeout' capability
 that is present using the Animator Pro player programs with scripts. In
 this case, the fades are always to/from a black screen.

    The transition segments can be placed at either the beginning or end
 of the flic, and can use either existing flic frames or add additional
 frames to the flic.

    Version 1.0
    2/9/92

    George P. Nelson
      Naval Research Laboratory
      Washington, DC 20375
*/

//               ------  Program Global Variables -----

Screen   *Draw_Scrn;          // Handle for the current drawing screen
int      frame_count;         // Number of frames in the current flic
int      old_pal[768];        // Array with the baseline color palette
int      new_pal[768];        // Array with the new color palette
int      add_frames_flag;     /* Variable indicating if the segment will
                                 use existing flic frames or add new frames
                                    0 = Add new frames
                                    1 = Use existing flic frames */

/* ----------------------------------------------------------------------------
               Get the desired length of the transition segment

   Returns: Integer, representing the number of frames that are to be part
            of the transition, zero indicates no change is desired or the
            operation has been cancelled.

            If the number of frames is non-zero, the add_frames_flag
            variable is set to indicate if the transition should be done
            with existing flic frames or if new frames should be added to
            the flic based on the first/last frame.
---------------------------------------------------------------------------- */

int get_tran_len ( void)
{
    int  size, temp_old_new_flag;
    int  mx_dsp_size = 50;
    int  done = 0;
    char *buttons[] = {
           "Add",
           "Existing",
           "Cancel"};
    char *msg = "  Add flic frames for the transition or use existing "
                "frames ??";

    // Get the size of the current flic if needed later
    frame_count = GetFrameCount();

    // Determine use of existing frames or adding new ones
    temp_old_new_flag = Qchoice ( buttons, 3, msg);
    switch ( temp_old_new_flag) {
        case 1:                     // Add new frames
            break;
        case 2:                     // Use existing frames
            if ( mx_dsp_size > frame_count)
                mx_dsp_size = frame_count; 
            break;
        default:                    // Cancel entry
            return 0;
            break;
    }

    // Start a loop around data entry for the number of frames
    do {
        size = 0;
        if (!Qnumber ( &size, 0, 50, "Transition Frames"))
            return 0;               // Terminate if the Cancel button pressed

        // -- Perform validity testing on the size input --
        if ( size < 0)             // Negative frame count
            Qtext ( "Can't have a negative frame count");
        else {
            if ((temp_old_new_flag == 2) && ( size >= frame_count))
                Qtext ( "Size exceeds frame count");
            else
                done = 1;
        }
    } while (done == 0);

    /* Set up other parameters that are needed to execute the transition
       generation */
    add_frames_flag = temp_old_new_flag - 1; 
    return size;
}    // End of function: get_tran_length()


/* ----------------------------------------------------------------------------
        Adjust the new palette by a per-centage of the old palette

    Returns: None by the function. The proram global variable new_pal[]
             is altered as requested by the program's argument, amount,
             which is the pre-centage of the program global variable,
             old_pal[] that it should be.
---------------------------------------------------------------------------- */
void adjust_palette ( double amount)
{
int idx;

    // Loop around the palette registers
    for ( idx = 0; idx < 768; idx++) {
        new_pal[idx] = (int)((double)old_pal[idx] * amount);
    }
    return;
}    // End of function: adjust_palette()


/* ----------------------------------------------------------------------------
                    Add the transition segment to the flic's start

    Returns: The function returns a value of 1 if the transition segment
             has been inserted normally, otherwise a value of 0 is
             returned.
---------------------------------------------------------------------------- */
int     add_to_start ( void)
{
    int      t_length, idx;
    double   amount;

    t_length = get_tran_len();
    if (t_length == 0)
        return 0;

    Draw_Scrn = GetPicScreen();
    switch (add_frames_flag) {
        case 0:                             // Add frames to the existing flic
            SetFrame ( 0);                  // Move to the first frame in flic
            InsertFrames ( t_length);       // Add new frames to the flic
            // Get the baseline color palatte
            GetScreenColorMap ( Draw_Scrn, &old_pal[0]);
            break;
    }

    // Loop around the transition frames
    for ( idx = 0; idx < t_length; idx++ ) {
        SetFrame ( idx);

        // Get the palette if using an existing frame
        if (add_frames_flag == 1)
            GetScreenColorMap ( Draw_Scrn, &old_pal[0]);

        // Then adjust this frame's palette
        if (idx == 0)
            amount = 0.0;
        else
            amount = (double)(idx)/(double)(t_length);
        adjust_palette ( amount);
        SetScreenColorMap ( Draw_Scrn, &new_pal[0]);

        /* The following two statements were necessary to have the adjusted
           palette "take", i.e. be remembered in the final flic. I don't
           really understand why this was so, but it was necessary for the
           program to work. */
        SwapClip();
        SwapTrade();
    }

    return 1;
}    // End of function: add_to_start()


/* ----------------------------------------------------------------------------
                    Add the transition segment to the flic's end

     Returns: The function returns a value of 1 if the transition
              segment has been inserted normally, otherwise a value
              of 0 is returned.
---------------------------------------------------------------------------- */
int    add_to_end ( void)
{
    int      t_length, idx;
    double   amount;

    t_length = get_tran_len();        // Get the length to be added
    if (t_length == 0)
        return 0;

    Draw_Scrn = GetPicScreen();
    switch (add_frames_flag) {
        case 0:                             // Add frames to the existing flic
            SetFrame ( frame_count - 1);    // Move to the last frame in flic
            InsertFrames ( t_length);       // Add new frames to the flic
            // Get the baseline color palette
            GetScreenColorMap ( Draw_Scrn, &old_pal[0]);
            break;
        case 1:
            frame_count -= t_length;
            break;
    }

    // Loop around the transition frames
    for ( idx = 0; idx < t_length; idx++) {
        SetFrame ( frame_count + idx);

        // Get the palette if using an existing frame
        if (add_frames_flag == 1)
            GetScreenColorMap ( Draw_Scrn, &old_pal[0]);

        // Then adjust this frame's palette
        amount = (double)1 - ((double)(idx + 1)/(double)t_length);
        adjust_palette ( amount);
        SetScreenColorMap ( Draw_Scrn, &new_pal[0]);

        /* The following two statements were necessary to have the adjusted
           palette "take", i.e. be remembered in the final flic. I don't
           really understand why this was so, but it was necessary for the
           program to work. */
        SwapClip();
        SwapTrade();
    }

    return 1;
}    // End of function: add_to_end()


/* ---------------------------------------------------------------------------- 
                 Display the program's opening message to the user

    Returns: The function returns the value of the key box that was selected.
               1 = Add the transition to the beginning of the flic
               2 = Add the transition to the end of the flic
               3 = Display the program's 'About' box
               4 = Cancel the program
               negative value = From right click of the mouse. See the POCO
                                manual for the Qchoice function.
---------------------------------------------------------------------------- */
int     display_open_message ( void)
{
      int    ret_val;
      char   *msg =
             "    FLICFADE.POC               Ver. 1.0\r\n"
             "    Add a transition to/from a black screen to "
             "the current flic. Destroys the contents of the "
             "current Swap buffer.";
      char   *buttons[] = {
             "Beginning",
             "Ending",
             "About",
             "Cancel"};

    ret_val = Qchoice ( buttons, 4, msg);
    return ret_val;
}    // End of function: display_open_message()


/* ----------------------------------------------------------------------------
                Display the program's "About" message box

    Returns: None
-----------------------------------------------------------------------------*/
void    display_about_msg ( void)
{
    char *msg =
              "      FLICFADE.POC            Ver. 1.0\r\n"
              "      Program to add a transition\r"
              "segment with either a 'fadein' from a\r"
              "black screen or a 'fadeout' to a black\r"
              "screen to the current flic.\r\n"
              "  George P. Nelson\r"
              "     Naval Research Laboratory\r"
              "     Washington, DC 20375\r\n"
              "  E-mail\r"
              "     Internet: nelson@radar.nrl.navy.mil\r"
              "     Compuserve: 73447,2105";

    Qtext ( msg);
    return;
}    // End of function: display_about_msg()


/* ----------------------------------------------------------------------------
                      Main executable function of the program
-----------------------------------------------------------------------------*/
main ()
{
    int      path; 
    int      done = 0; 
    Boolean  time_select; 

    time_select = GetTimeSelect(); 
    SetTimeSelect ( FALSE); 
    do { 
        // Display the opening message
        path = display_open_message ();
        switch (path) {
            case 1:                // Add to beginning of flic
                done = add_to_start ();
                break;
            case 2:                // Add to the end of flic
                done = add_to_end ();
                break;
            case 3:                // Display the 'About' message box
                display_about_msg();
                break;
            default:               // Terminate the loop
                done = 1;
                break;
        }
    } while (done == 0);
    SetTimeSelect ( time_select); 
    exit ( 0);
}    // End of function: main()

