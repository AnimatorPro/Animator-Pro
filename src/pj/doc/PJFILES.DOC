				Autodesk Animator Pro File Formats

The most common Animator Pro file structure is a header chunk followed by 
hierarchial data chunks. Some of the files for historical reasons are 
deviations from this type but but most adhere to this structure.

Chunked Animator Pro files:

Each chunk is prefixed with size and an id number.
which is unique for it's level of hierachy.

typedef long LONG;  /* 32 bits */
typedef unsigned short USHORT;  /* 16 bits */

typedef struct chunk_id {
	LONG size;  /* size of chunk */
	USHORT id;  /* id number for chunk */
} Chunk_id;

Some Animator Pro file types are prefixed with a "fat chunk" which contains a
version number.

typedef struct fat_chunk {
	LONG size;  /* size of chunk */
	USHORT id;  /* id number for chunk */
	USHORT version; /* version number for chunk */
} Fat_chunk;

The file level chunk:

The entire file may be viewed as a single chunk. and its Chunk_id will have 
the size of the whole file in it, and it's id number will be unique to the
type of Animator Pro file type.

struct whole_file {
	LONG size;   /* size of whole file */
	USHORT id;   /* unique id number for file type */

	.... variable size file contents ...
};

Hierarchial chunks:

Several Animator Pro files like the Animator Pro animation file format
have a herarchial chunk structure like the below:

whole_file {

	file_header {
		LONG size;  /* size of whole file */
		USHORT id;  /* unique id for Animator Pro file */
		... header data of a fixed size ...
	};
		2nd_level_chunk {
			LONG size;
			USHORT id; 
			... variable size data ...
		}
		2nd_level_chunk {
			LONG size;
			USHORT id; 
			... fixed size data ...
			3rd_level_chunk {
				LONG size;
				USHORT id; 
				... variable size data ...
			}
			3rd_level_chunk {
				LONG size;
				USHORT id; 
				... variable size data ...
			}
		}
} /* end of file */


		Autodesk Animator Pro Animation File Format

Animations files generated by Autodesk Animator Pro are very similar
to the Animation files generated by Autodesk Animator. The basic Hierarchial
chunked file format consists of a file header followed by a sequence of 
frames chunks.

Animation_file {
	fli_header {
		LONG size:
		USHORT id;
		.... fixed size header data ....
	}
		optional_prefix_chunk {
			LONG size;
			USHORT id;     /* FCID_PREFIX */
			.... variable size prefix data ...
		}
		frame_chunk {
			LONG size;
			USHORT id;
			.... fixed size frame header ....
			frame_data {
				LONG size;
				USHORT id;
				.... variable size data ....
			}
			frame_data {
				LONG size;
				USHORT id;
				.... variable size data ....
			}
		}
		..... one frame chunk for each frame of animation
			  and one "loopback" frame, a transition back to the
			  first frame at the end at the end ....

} /* end of file */

The Header

The format of the header is:

	typedef	long		LONG;
	typedef unsiged short	USHORT;
	typedef short		SHORT;
	typedef	unsigned char	UBYTE;
	typedef char		BYTE;

	#define ANIM_1	    0xaf11	/* Fli file type for Animator */
	#define ANIM_386    0xaf12	/* Fli file type for Animator Pro */

	typedef struct fli_header {
		LONG	size;		/* Size of file */
		USHORT	type;		/* Type of file */
		USHORT	frame_count;	/* Length of animation in frames */
		USHORT	width;		/* Width of animation in pixels */
		USHORT	height;		/* Height of animation in pixels */
		USHORT	bits_a_pixel;	/* Bits per pixel in animation */
		SHORT	flags;
		LONG	speed;		/* Milliseconds per frame */
		UBYTE	user_lock;
		UBYTE	unused;
		LONG	create_time;    /* time file created */
		LONG	create_user;    /* user id of creator */
		LONG	update_time;    /* time of last update */
		LONG	update_user;    /* user id of last update */
		USHORT	aspect_dx;
		USHORT	aspect_dy;
		UBYTE	commonpad[38]	/* should be total of 80 bytes  */
		LONG	frame1_oset;	/* offset to first frame */
		LONG	frame2_oset;	/* offset to second frame */
		UBYTE	padfill[40];	/* should total to 128 bytes */
	} FLI_HEADER;


The description of the fields in the header:

size

The entire size of animation file, including this header.

type

Unique ID that identifies the file format. This field will have the value
ANIM_386 (0xaf12) defined above.

frame_count

The count of frames in the animation. This count does not include the
loop frame at the end of the animtion that gives the differences
between the last frame and the first frame of the animation.

width

The width of the animation in pixels.

height

The height of the animatin in pixels.

bits_a_pixel

The number of bits used to represent a pixel, usually eight. A zero
in this field should be interpreted as eight bits per pixel.

flags

set to 0, unused at present.

speed

The speed of the animation in milliseconds per frame.

unused

An unused word set to 0.

create_time

[I HAVE NO IDEA WHAT GOES HERE]

create_user

[I HAVE NO IDEA WHAT GOES HERE]

update_time

[I HAVE NO IDEA WHAT GOES HERE]

update_user

[I HAVE NO IDEA WHAT GOES HERE]

aspect_dx
aspect_dy

These two fields give the aspect ratio used to create the animation.
Each field gives the relative size of a pixel in the horizontal and
vertical directions. Usually the values in these fields are both 1.
For example if aspect_dx is 1 and aspect_dy is 2 pixels are twice as
tall as they are wide (CGA aspect ratio).

commonpad

Reserved for future use. Must be set to zeros.

frame1_oset

The offset from the beginning of the file to the first animation frame
in the animation. 

frame2_oset

The offset from the beginning of the file to the second animation
frame in the animation. Not essential for pj, convert, and player, 
but maintained by them

Data following the header:


An optional prefix chunk may immediately follow the animation file header.
The prefix if present will always have it's id set to the value FCID_PREFIX
(0xf100) as the "flic chunk id" for the prefix.

The prefix is followed immediately by the animation frame chunks. The type 
field in an animation frame chunk is always set to FCID_FAME (0xf1fa).

Both PREFIX and FRAME chunks use the same chunk header. Both types of
chunks frames begin with a header that gives the length and type of the
chunk.

#define FCID_PREFIX  0xf100U	   /* Fli prefix chunk */
#define FCID_FRAME   0xf1faU	   /* Fli frame chunk */

Format for the optional Prefix chunk:

The prefix chunk at present contains: 
A settings chunk.  This is the same thing as a settings file but as a chunk
in a flic.  This is how the load settings from a flic is implemented.
This is present in flics but not cels. A settings chunk has sub chunks for 
things like the paths in the file requestors, optics settings, etc etc.

A Celdata chunk.  This chunk has the positioning info for a fli used as a
cel.  This is usually only present in cel files.

Format for Frame chunks:

Following the chunk size and id, the animation frames contain data that is 
used to construct the image of the frame. Color and pixel data may be 
contained in each animation frame.

The format of the frame chunk header is:

	typedef struct fli_frame {
		LONG	size;
		USHORT	type;
		SHORT	chunks;  
		char	pad[8];
	} FLI_FRAME;

The description of the fields in the frame header:

size

The size of the frame, including the header. This field can be used to
skip the frame, if desired.

type

The type of the frame. Allways FCID_FRAME (0xf1fa) for animation frames.

chunks

The number of sub chunks in the frame chunk.

pad

Reserved for future use.

Chunks

The graphic data for an animation is contained in the sub chunks of a
frame. Chunks come in several flavors depending on the data contained
in the chunk, and the method used to compress the data. All chunks
begin with a six byte header and are then immediately followed by the
data.

The format of a chunk header is:

	enum {
		FLI_COL = 0,
		FLI_WRUN = 1,
		FLI_WSKIP = 2,
		FLI_WSKIP2 = 3,
		FLI_COLOR256 = 4,
		FLI_WSKIPRUN = 5,
		FLI_BSKIP = 6,
		FLI_SS2 = 7,
		FLI_BSC = 8,
		FLI_SBSC = 9,
		FLI_SBSRSC = 10,
		FLI_COLOR = 11,
		FLI_LC = 12,
		FLI_BLACK = 13,
		FLI_ICOLORS = 14,
		FLI_BRUN = 15,
		FLI_COPY = 16,
		FLI_SOLID = 17,
	};

	typedef struct chunk_id {
		LONG size;
		USHORT type;
	} Chunk_id;

The description of the field in a chunk:

size

The size of the chunk, including the header. The value of this field
can be used to skip the chunk.

type

The type of chunk can be any of the values enumerated above. Since
new chunks may be added to animation files in the future, chunks with
unknown types should be quietly skipped. Realisticly, only the
following types need to be decoded in order to draw an animation:

	FLI_COLOR256	(4)
	FLI_SS2		(7)
	FLI_COLOR	(11)
	FLI_LC		(12)
	FLI_BLACK	(13)
	FLI_BRUN	(15)
	FLI_COPY	(16)


256 Color Chunks - FLI_COLOR256 (4)

The data following this chunk is organized in packets. The first word
following the chunks header is a count of the number of packets in
the chunk. Each packet consists of a single byte color index skip
count, a single byte color count and three bytes of color information
for each color defined.

At the start of the chunk, the color index is initialized to 0.
Before processing any colors in a packet, the color index skip count
is added to the current color index. The number of colors defined in
the packet is retrieved. A zero in this byte indicates 256 colors
are to be defined. The three bytes used to define each color define
the red, green, and blue components of the color in that order. Each
component can range from 0 (off) to 255 (full on). It is the players
responsbility to convert these colors to the correct values for the
device being used to play the animation.


64 Color Chunks - FLI_COLOR (11)

This chunks is almost identical to the 256 Color Chunk. The only
difference is the range of values for the red, green and blue
components of defined colors. In this chunks these values can range
from 0 (off) to 63 (full on).



Black Chunks - FLI_BLACK (13)

This chunk has no data. The frame should be cleared to color index
0.


Copy Chunks - FLI_COPY (16)

This chunk contains an uncompress image of the frame. The number of
pixels in the chunk is exactly the width of the animation times the
height of the animation. The data starts in the upper left corner
with pixels copied from left to right and then top to bottom.


Byte Run Chunks - FLI_BRUN (15)

This chunk contains the entire image in a compress format. Usually
this chunk is the first frame of an animation. The data is organized
in lines. Each line contains packets of compressed pixels. The first
line is at the top of the animation, followed by subsequent lines
moving downward. The number of lines in this chunk is given by the
height of the animation.

The first byte of each line is a count of packets in the line,
followed by the a single byte packet type. If the packet type is
non-negative, the packet type is a count of bytes to be copied from
the packet to the animation image. If the packet type is negative,
the packet contains one more byte which is to be replicated. The
absolute value of the packet type gives the number of times the byte
is to be replicated.


Line Coded Chunks - FLI_LC (12)

These chunks contain the differences between the previous frame and
this frame. This chunk is not produced by Animator Pro, but may be in
converted Animator animations. The chunk is organized into lines
which contain packets (like the Byte Run chunk), except the position
of the first line and the number of lines is contained in the chunk.
The line coded packets are formated differently from the byte run
packets also.

The first word following the chunk header contains the position of
the first line in the chunk. This position is from the top of the
image. The second word contains the number of lines in the chunk. The
data for the lines follows these two words.

Each line begins with a two bytes. The first byte contains the
starting x position of the line, and the second byte the number of
packets for the line.

Each packet consists of a single byte column skip, followed by a
packet type. If the packet type is non-negative, the packet type is a
count of bytes to be copied from the packet to the animation image.
If the packet type is negative, the packet contains one more byte
which is to be replicated. The absolute value of the packet type
gives the number of times the byte is to be replicated.



SS2 Chunks - FLI_SS2 (7)


This format also contains the differences between consecutive frames.
This format is usually output by Animator Pro for frames other than
the first frame of an animation. It is similar to the line coded
copression, but is word oriented instead of byte oriented. The data
is organized into lines and each line is organized into packets.

The first word in the data following the chunk header contains the
number of lines in the chunk. Each line can begin with some optional
words that is used to skip lines and set the last byte in the line for
animations with odd widths. These optional words are followed by a
count of the packets in the line. The line count does not include
skipped lines.

The high order two bits of the word is used to determine the contents
of the word.

	Bit 15	Bit 14	Meaning

	  0	  0	The word contains the packet count. The
			packets follow this word.

	  1	  0	The low order byte is to be stored in the
			last byte of the current line. The packet
			count always follows this word.

	  1	  1	The word contains a line skip count. The
			number of lines skipped is given by the
			absolute value of the word. This word can
			be followed by more skip counts, by a last
			byte word, or by the packet count.


The packets in each line are similar to the packets for the line
coded chunk. The first byte of each packet is a column skip count.
The second byte is a packet type. If the packet type is non-negative,
the packet type is a count of words to be copied from the packet to
the animation image.  If the packet type is negative, the packet
contains one more word which is to be replicated. The absolute value
of the packet type gives the number of times the word is to be
replicated. The high and low order byte in the replicated word do not
necessarily have the same value.

---end---
