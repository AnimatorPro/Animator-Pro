. .
Message  4:
From jamiec@sybil Tue Jan 15 16:52:55 1991
Return-Path: <jamiec@sybil>
Received: from sybil.YP.acad by autodesk.uucp  (4.1/SMI-3.2)
	id AA16347; Tue, 15 Jan 91 16:52:53 PST
Received: by sybil.YP.acad (4.1/SMI-4.1)
	id AA02284; Tue, 15 Jan 91 16:56:31 PST
Date: Tue, 15 Jan 91 16:56:31 PST
From: jamiec@sybil (Jamie Clay)
Message-Id: <9101160056.AA02284@sybil.YP.acad>
To: jkent@sybil
Subject: You asked for it!
Status: R

Here is the .RND format docs...

Appendix C

 Rendering File Formats

AutoShade saves the finished pictures it creates to rendering files.
There are three types of rendering files available: TGA, TIFF, and RND.
This appendix covers the RND, TGA, and TIFF file formats. RND rendering
files have an .rnd file extension, TGA files are .tga, and TIFF files
are .tif.

There are two type of formats for rendering files: 256 color files and
continu- ous color files. To create these, use either the Save Image,
Hard Copy, or Record options in the Display menu. Save Image creates
RND, TGA, or TIFF files (8 bit devices produce 256 color files and
continuous color devices produce continuous color files or full color
(24/32 bit) files only ). The Hard Copy and Record options produce RND
files only.

Autodesk RenderMan and the Quick Shade and Save Image features produce
scanline RND packets. Fast Shade and Full Shade with Smooth Shading on
pro- duce a combination of polygons and scanlines. Fast Shade and Full
Shade with Smooth Shading off produce polygons only.

RND File Format

If you've set the AutoShade hardcopy configuration to produce 256-color
ren- dering files, a file using a color map of 256 slots with 256
possible RGB shades for each is used. If you configure AutoShade to
produce a continuous-color file, continuous-color values are written.
In continuous-color files, every pixel takes on a unique color
(specified by floating point values for each of the RGB components).
Both files store the polygons in an 8192-by-8192 virtual device space.

All RND files have the same basic structure: a binary file consisting
of a header record followed by one variable-length record or more, each
of which is pre- ceded by a one-byte, record-type indicator, as shown
in the following figure.



There is no end-of-file record. If the operating system returns an
end-of-file status when you try to read another file-type indicator,
the rendering file pro- cess is complete.

Numbers are stored as 16-bit signed integers (shown as "short" in the
follow- ing example), 16-bit unsigned integers ("unshort"), or 64-bit
IEEE floating- point format ("real"). AutoShade stores all binary
values least-significant byte first. Although the records appear here
as structures, you should read each field individually to bypass any
structure byte alignment added by your C compiler.

Header Record

The file header has the following format:

struct rndhdr {

	char prs [110]; /* id string */

	char type;      /* machine type */

	char level;     /* render slide level */

	short xdots, ydots;     /* total screen x and y size */

	short ncolour;  /* number of rgb color values */

	ushort maxintens;       /* maximum intensity */

	ushort nshades; /* number of shades per color */

	ushort pixwid, pixhgt;  /* pixel height and width */

	short btest;    /* test for byte reversal */

};

These are the first 40 characters of the ID string:

"AutoShade Rendering Slide" CR LF "Written by: "

The remainder of the ID string notes which rendering device the file
was writ- ten for, and ends with CR, LF, CTRL-Z, NUL.

256-Color Rendering Files

256-color rendering files can contain the following record types:

 RECORD 
TYPE CODE    | Mnemonic  | Meaning
   06	        CLEAR	   Clear entire display
   07		CMAPB	   Begin Color map
   08		CMAP	   Set color map
   09		CMAPE	   End of color map
   10		POLY	   Polygon



The CLEAR, CMAPB, and CMAPE records have no fields, and are of zero
length. The CMAP record is eight bytes long, consisting of the
following fields:

struct rd_map {         /* color map entry */

	short code;     /* index */

	ushort red;     /* red intensity */

	ushort green;   /* green intensity */

	ushort blue;    /* blue intensity */

};

The POLY record has the following format:

struct rd_poly {                /* polygon */

	ushort flags;   /* flags */

	short colour;   /* fill colour */

	short ecolour;  /* edge colour */

	short nvert;    /* number of vertices total */

	scrcoord vx [10];       /* next 10 vertices */

	scrcoord vy [10];

};

Currently, the "flags" field is unused. The "nvert" field specifies the
number of X/Y vertex fields that follow, up to 10.

Continuous-Color Rendering Files

Continuous-color rendering files can contain the following record types:

 RECORD 
TYPE CODE    | Mnemonic  | Meaning
   06           CLEAR      Clear entire display
   12           CRANGE     Continous-color range
   13           CPOLY      Continous-color polygon


The CLEAR record type has no fields and is of zero length. The CRANGE
record is 42 bytes long, with the following fields:

struct rd_crange {              /*color range for continuous tones */

	real minshade;  /* minimum shade multiplier */

	real maxshade;  /* maximum shade multiplier */

	short rstretch; /* contrast stretch requested? */

	struct rd_rgb bcolour;  /* background colour request */

	real ambient;   /* ambient contribution */

};

struct rd_rgb {         /* continuous color RGB value item */

	real r, g, b;   /* primary color intensities */

};

The CPOLY polygon record is shown next:

struct rd_cpoly {               /* polygon in continuous colour */

	ushort flags;   /* flags */

	struct rd_rgb colour;   /* fill colour */

	struct rd_rgb ecolour;  /* edge colour */

	real shadef;    /* shading factor */

	short nvert;    /* number of vertices total */

	scrcoord vx [10];       /* next 10 vertices */

	scrcoord vy [10];

	real sf [10];   /* shade factor at each vertex */

};

Currently, the "flags" field is unused. The "nvert" field specifies the
number of X/Y vertex fields that follow, up to 10.

Scanline-to-Rendering Driver (RDWSLINE 2014)

AutoShade uses the structure RD_SLINE to pass scanline data between
AutoShade and the rendering driver. Its record is as follows:

struct rd_sline {               /* scan line output */

	ushort flags;   /* flags */

	scrcoord x;     /* start x */

	scrcoord y;     /* start y */

	ushort xrpt;    /* number of times to repeat data */

	ushort sdlen;   /* number of bytes of data */

This next field is a 4-byte data pointer on all platforms:

#ifdef PASS_DATA

	unsigned char sdata [1536];     /* scan line data */

#else

	unsigned char *sdata;   /* scan line data */

#endif

};

This packet is seen only by drivers that returned RF_SCANLINE in
Rdinit.

The scanline data is in the format requested by the driver at Rdinit
time (RF_S- L8BIT, RF_SL24BIT, or RF_SL32BIT).

Member XRPT indicates the number of times the data is repeated, but
doesn't figure into the amount of data or number of pixels being
represented. This member is one unless the data is repeated
horizontally (as in outputting a con- stant color or a horizontally
repeating pattern).

Member SDLN is the total number of bytes of scanline data pointed to by
SDATA.

TGA File Format

AutoShade writes TGA files to the Truevision TGA File Format
Specification, Version 2.0 (November 1989). The AutoShade Saveimage
feature supports two data types depending on the currently configured
rendering driver. 8-bit devices store their data in Data Type 9,
Run-length encoded, color-mapped format. 24- and 32-bit devices store
their data in Data Type 10, Run-length encoded, RGB format. The
Autodesk RenderMan TGA driver outputs to Data Type 2, uncompressed RGB
format and conforms to the original TGA specifi- cation.

The tgadspy.exe Autodesk RenderMan utility and the AutoShade Replay
com- mand accept any of the file types mentioned above.

TIFF File Format

AutoShade writes TIFF files to the Tagged Image File Format (TIFF)
Specifica- tion Revision 5.0. The AutoShade Saveimage feature supports
two data types depending on the currently configured rendering driver.
8-bit devices output 8-bit color-mapped data, while 24- and 32-bit
devices output 32-bit RGBA data. Both are LZW compressed. Autodesk
RenderMan generates 32-bit RGBA LZW compressed files. The tiffcopy.exe
utility allows translation between LZW, PACKBITS and NO compression.

The Autodesk RenderMan tiffdspy.exe utility and the AutoShade Replay
com- mand accept any of the file types mentioned above. It might be
necessary to restructure TIFF files generated with too many rows in a
strip. Use tiffinfo.exe or tiffdump.exe to check rowsperstrip.
AutoShade reads in whole strips at a time. If there are too many rows
in a strip for available memory, the renderer cannot read the file. To
restructure a TIFF file so that it has fewer rows per strip, use
tiffcopy.exe.

Additional Information

Additional information on the AutoShade file formats is available in
the AutoShade ADI toolkit. You can use the AutoShade ADI toolkit to
create device drivers for AutoShade software.

A program that reads RND files is available on CompuServe on the
Autodesk Forum, and is supplied on the AutoShade release disks in both
source code (readrnd.c) and executable code (readrnd.exe) form. See the
AutoShade Version 2 Installation and Performance Guide for instructions
on using the readrnd.exe program.


& 