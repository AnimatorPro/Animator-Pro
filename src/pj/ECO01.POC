//Eco.poc - adaptation of em.pog into Poco.
//
//Simulate a little ecosystem.  Got a constant source of lo-level food
//the fountains and green dots), creatures that eat green dots, and
//creatures (harry) that eat the creatures that eat green dots.
//
//Goal - to make the whole thing keep going.
//
//Keyboard commands -
//		f	-  make a fountain - source of green dot algae
//		p	-  make a mutating purplish algae eater
//		r	-  make a seed-pod generating red algae eater
//		b	-  make a blue algae eater
//		h	-  make 'harry' the predator.
//		k	-  kill all creatures
//		q   - exit program
//		

#include "pogo.h"


#define BLACK  0		
#define GREEN  1
#define RED  4
#define BLUE  5
#define HCOLOR  6	//color of the Harry preditor
#define WHITE  7
#define PURPLE  8	//lowest 'purpler' color
#define IAFRAID  50	//initial radius where purplers get scared of harrys
#define PUPCOUNT  7	// of 'purpler' colors
#define PSPOKES  6	// of spokes in a spoked purpler


#define dspeed (-3)
#define hspeed 4
#define bspeed 2

int time,total;
Screen *cscreen;
#define putdot(color,x,y) SetPixel(cscreen,color,x,y)

int mouse_x,mouse_y,mouse_left,mouse_right,key;

int pcount;
int bcount;
int hcount;
int lhcount;
int rcount;
int gcount;
int ave_pspeed;

//Creature attatched to the mouse.
typedef struct
	{
	CC_ALL
	} mouser;
void evolve_mouser(mouser *my);
Creature_class class_mouser = {sizeof(mouser), NULL, evolve_mouser};
Creature *mouse;


//Food for red,blue, and purple creatures.
typedef struct
	{
	CC_ALL
	} greendot;
void evolve_greendot(greendot *my);
Creature_class class_greendot = {sizeof(greendot), NULL, evolve_greendot};

//Fountain swirls around releasing green-dot food
typedef struct
	{
	CC_ALL
	int theta2;
	} fountain;
void evolve_fountain(fountain *my);
Creature_class class_fountain = {sizeof(fountain), NULL, evolve_fountain};


//purpler - the evolving creature.  Shows up as green to purple depending
//on the value of it's afraid variable, which also controls when it
//starts fleeing harrys.  Will be a circle or spoked wheel depending on
//its stop variable, which also controls if it stops after eating.
//The size of its children and the size it reproduces at also mutate.
//
typedef struct
	{
	CC_ALL
	int size;
	int fed;
	int stop;
	int ax,ay;
	int afraid;
	int mycolor;
	int rsize;
	int lifespan;
	int pspeed,energy;
	int spin;
	int theta;
	} purpler;
void evolve_purpler(purpler *my);
Creature_class class_purpler = {sizeof(purpler),NULL,evolve_purpler,};

//Early 'seed' phase of a blue creature
typedef struct
	{
	CC_ALL
	} bluenymph;
void evolve_bluenymph(bluenymph *my);
Creature_class class_bluenymph = {sizeof(bluenymph), NULL, evolve_bluenymph};

//Smallish blue creature
typedef struct
	{
	CC_ALL
	int size;
	int fed;
	int ax,ay;
	int theta;
	} bluefeeder;
void evolve_bluefeeder(bluefeeder *my);
Creature_class class_bluefeeder = {sizeof(bluefeeder),NULL,evolve_bluefeeder};

//red creature seed stage
typedef struct
	{
	CC_ALL
	int size;
	} rednymph;
void evolve_rednymph(rednymph *my);
Creature_class class_rednymph = {sizeof(rednymph), NULL, evolve_rednymph};
void make_redn(int x,int y,int sthet);


//Big red creature that spits out big seeds.
typedef struct
	{
	CC_ALL
	int size;
	int sthet;
	} redfeeder;
void evolve_redfeeder(redfeeder *my);
Creature_class class_redfeeder = {sizeof(redfeeder),NULL,evolve_redfeeder};

//Seed stage of a harry
typedef struct
	{
	CC_ALL
	} hnymph;
void evolve_hnymph(hnymph *my);
Creature_class class_hnymph = {sizeof(hnymph), NULL, evolve_hnymph};

//Harry - the predator creature.  Orange circle
typedef struct
	{
	CC_ALL
	int size;
	int psize;
	int ate;
	int hungry;
	} harry;
void evolve_harry(harry *my);
Creature_class class_harry = {sizeof(harry), NULL, evolve_harry};


//draw_spoked_wheel - draws one class of purpler creatures
void draw_spoked_wheel(int color,int x,int y,int rad,int theta,int spokes)
{
int i;
double t1,t;

theta %= 360;
t1 = RadiansToDegrees(theta);
for (i=0; i<spokes; ++i)
	{
	t = t1 + i*2.0*PI/spokes;
	SetColor(color);
	Line(x, y, x+ArcX(t,rad), y+ArcY(t,rad) );
	}
}

int mutate_color(int color, int off)
/* Change a color in the purple range */
{
color = color+off/2;
if (color < PURPLE)
	color = PURPLE;
if (color >= PURPLE+PUPCOUNT)
	color = PURPLE+PUPCOUNT-1;
return(color);
}

void split_purpler(int x,int y,int dx,int dy,
	int afraid,int mycolor,int rsize,int lifespan,
	int pspeed,int energy, int spin, int stop)
/* go breed a new purpler.  Mutate it a little. */
{
purpler *new;
int t, off;

new = spawn(&class_purpler, x, y, -dx, -dy);
if (new)
	{
	off = Random(11)-5;
	new->afraid = afraid + off;
	new->mycolor = mutate_color(mycolor,off);
	t = rsize + Random(6)-2;
	if (t > 50)
		t = 50;
	new->rsize = t;
	new->lifespan = lifespan + Random(11)-5;
	new->pspeed = pspeed + Random(3)-1;
	energy = energy + Random(5) - 2;
	if (energy < 5)
		energy = 5;
	if (energy >= rsize - 5)
		energy = rsize - 5;
	new->energy = energy;
	new->spin = spin + Random(5)-2;
	t = stop;
	if (Random(8) == 0)	//1 in  8 chance of flip-flopping spokiness
		t = !t;
	new->stop = t;
	}
}


void evolve_purpler(purpler *my)
/* Evolution routine for purpler creatures.  (They sloppily copy some
 * of their state variables to their descendants. */
{
Creature *food;			// Closest food creature
Creature *monster;		// Closest predator
Creature *nearc;
int dist;
int gx,gy;

pcount = pcount+1;
ave_pspeed = ave_pspeed + my->pspeed;
my->theta = my->theta + my->spin;
if (my->new)
	my->size = my->energy;
food = ClosestT(&class_greendot,my->x,my->y);
if (food)
	{
	gx = food->x;
	gy = food->y;
	dist = distance(my->x,my->y,gx,gy);
	if (dist < my->size)
		{
		my->size = my->size + 2;
		putdot(0,gx,gy);
		if (my->stop)
			{
			my->dx = 0;
			my->dy = 0;
			my->fed = 16;
			}
		kill(food);
		}
	}
nearc = food;
monster = ClosestT(&class_harry,my->x,my->y);
if (monster)
	{
	int monx,mony;

	monx = monster->x;
	mony = monster->y;
	dist = distance(my->x,my->y,monx,mony);
	if (dist < my->afraid)
		{
		nearc = monster;
		my->fed = 0;
		gx = monx;
		gy = mony;
		}
	}
if ((!my->fed && nearc != NULL))
	{
	if (gx > my->x)
		my->ax = 1;
	else
		my->ax = -1;
	if (gy > my->y)
		my->ay = 1;
	else
		my->ay = -1;
	if (nearc != food)
		{
		my->ax = -my->ax;
		my->ay = -my->ay;
		}
	my->dx = my->dx + my->ax;
	my->dy = my->dy + my->ay;
	if (my->dx > my->pspeed)
		my->dx = my->pspeed;
	if (my->dx < -my->pspeed)
		my->dx = -my->pspeed;
	if (my->dy > my->pspeed)
		my->dy = my->pspeed;
	if (my->dy < -my->pspeed)
		my->dy = -my->pspeed;
	my->x = my->x + my->dx;
	my->y = my->y + my->dy;
	}
else
	my->fed = my->fed - 1;
if (my->size < 2 || my->age > my->lifespan)	
//got too small and starved or got too old
	{
	kill(my);
	}
else
	{
	if (my->age&0xf == 7)	//the metabolism burns a size point every 16 ticks
		{
		my->size = my->size-1;
		}
	if (my->size > my->rsize)	//if bigger than 24 go spawning
		{
		split_purpler(my->x,my->y,my->dx,my->dy,
			my->afraid,my->mycolor,my->rsize,my->lifespan,
			my->pspeed,my->energy,my->spin, my->stop);
		if (my->stop)
			{
			my->dx = 0;
			my->dy = 0;
			}
		my->size = my->size - my->energy;
		return;
		}
redraw:
	if (my->stop)
		draw_spoked_wheel(my->mycolor,my->x,my->y,my->size,my->theta,PSPOKES);
	else
		{
		SetColor(my->mycolor);
		SetFilled(FALSE);
		Circle(my->x,my->y,my->size);
		}
	}
}


void evolve_bluenymph(bluenymph *my)
{
if (my->age > 15)
	{
	spawn(&class_bluefeeder,my->x,my->y,my->dx,my->dy);
	kill(my);
	return;
	}
my->x = my->x + my->dx;
my->y = my->y + my->dy;
putdot(BLUE,my->x,my->y);
putdot(BLUE,my->x+1,my->y+1);
}

void split_bluefeeder(int x,int y,int dx,int dy,int theta)
{
spawn(&class_bluenymph, x, y, ArcX(theta,6) + dx, ArcY(theta,6)+dy);
}

void evolve_bluefeeder(bluefeeder *my)
{
Creature *nearc;
Creature *food;
Creature *monster;
int gx,gy;
int dist;

bcount = bcount+1;
if (my->new)
	{
	my->size = 8;
	}
food = ClosestT(&class_greendot,my->x,my->y);
if (food)
	{
	gx = food->x;
	gy = food->y;
	dist = distance(my->x,my->y,gx,gy);
	if (dist < my->size)
		{
		my->size = my->size + 2;
		putdot(0, gx, gy );
		my->dx = 0;
		my->dy = 0;
		my->fed = 16;
		kill(food);
		}
	}
nearc = food;
monster = ClosestT(&class_harry,my->x,my->y);
if (monster)
	{
	int monx,mony;

	monx = monster->x;
	mony = monster->y;
	dist = distance(my->x,my->y,monx,mony);
	if (dist < 65)
		{
		nearc = monster;
		my->fed = 0;
		gx = monx;
		gy = mony;
		}
	}
if (!my->fed && nearc!=NULL)
	{
	if (gx > my->x)
		my->dx = bspeed;
	else
		my->dx = -bspeed;
	if (gy > my->y)
		my->dy = bspeed;
	else
		my->dy = -bspeed;
	if (nearc != food)
		{
		my->dx = -my->dx;
		my->dy = -my->dy;
		}
	my->x = my->x + my->dx;
	my->y = my->y + my->dy;
	}
else
	my->fed = my->fed - 1;
if (my->size < 2 || my->age > 250)	//got too small and starved
	{
	kill(my);
	return;
	}
else
	{
	if (my->age&0xf == 7)	//the metabolism burns a size point every 16 ticks
		{
		my->size = my->size-1;
		}
	if (my->size > 24)	//if bigger than 24 go spawning
		{
		split_bluefeeder(my->x,my->y,my->dx,my->dy,my->theta);
		my->theta = my->theta + 43;
		my->dx = 0;
		my->dy = 0;
		my->size = my->size - 8;
		return;
		}
redraw:
	SetColor(BLUE);
	SetFilled(FALSE);
	Circle(my->x,my->y,my->size);
	}
}



//Red circle creature
void evolve_redfeeder(redfeeder *my)
{
Creature *nearc;

rcount = rcount+1;
if (my->age < 8)
	{
	my->sthet = Random(360);
	my->x = my->x + my->dx;
	my->dx = my->dx>>1;
	my->y = my->y + my->dy;
	my->dy = my->dy*4/5;
	if (my->new)
		my->size = 15;
	}
nearc = ClosestT(&class_greendot,my->x,my->y);
if (nearc!=NULL)
	{
	if (distance(nearc->x, nearc->y, my->x, my->y) < my->size)
		{
		my->size = my->size + 2;
		putdot(0, nearc->x, nearc->y );
		kill(nearc);
		}
	}
if (my->size < 4 || my->age > 250)
	{
	kill(my);
	}
else
	{
	if (my->age&15 == 7)
		{
		my->size = my->size-1;
		}
	if (my->size > 40)
		{
		make_redn(my->x,my->y,my->sthet);
		my->sthet = my->sthet + 97;
		my->size = my->size - 15;
		}
	SetFilled(FALSE);
	SetColor(RED);
	Circle(my->x,my->y,my->size);
	}
}

void make_redn(int x,int y,int sthet)
{
spawn(&class_rednymph, x, y, ArcX(sthet,8), ArcY(sthet,8) );
}

void evolve_rednymph(rednymph *my)
{
int x, y;
int fdist, hdist;
Creature *f,*h;

if (my->new)
	{
	x = my->x;
	y = my->y;
	my->size = 100;
	}
my->size = my->size - 1;
if (my->size < 10)
	{
	kill(my);
	return;
	}
f = ClosestCreature(my,my->x,my->y);
if (f!=NULL)
	{
	if (f->class == &class_greendot)
		{
		h = ClosestT(&class_harry,my->x,my->y);
		if (h != NULL)
			{
			hdist = distance(my->x,my->y,CreatureX(h),CreatureY(h));
			if (hdist < 70)
				{
				goto move;
				}
			}
		if (distance(my->x,my->y,x,y) > 60)
			{
			spawn(&class_redfeeder,my->x,my->y,0,0);
			kill(my);
			return;
			}
		}
	}
move:
my->x = my->x + my->dx;
my->y = my->y + my->dy;
SetFilled(TRUE);
SetColor(RED);
Box(my->x,my->y,(my->size>>4),(my->size>>4));
}

void evolve_greendot(greendot *my)
{
gcount = gcount+1;
if (my->age > 25)
	kill(my);
else
	{
	my->x = (my->x + my->dx);
	my->y = (my->y + my->dy);
	putdot(GREEN, my->x, my->y);
	}
}

void evolve_fountain(fountain *my)
{
int rx,ry;
int t2 = DegreesToRadians(my->theta2);

rx = my->x+ArcX(t2,my->dx);
ry = my->y+ArcY(t2,my->dx);
spawn(&class_greendot,rx,ry,ArcX(t2,dspeed), ArcY(t2,dspeed));
my->theta2 = my->theta2 + my->dy;
if (my->theta2 > 360)
	my->theta2 = my->theta2 - 360;
if (my->theta2 < 0)
	my->theta2 = 360-my->theta2;
}

//set up color map for simulation
void crcolors()
{
int i,r,g,b;

SetColorMap(GREEN,0,255,0);
SetColorMap(2,255,200,0);
SetColorMap(3,200,100,0);
SetColorMap(RED,255,0,0);
SetColorMap(BLUE,0,0,255);
SetColorMap(HCOLOR,255, 160, 0);
SetColorMap(WHITE,255, 255, 255);

r = 128;
g = 0;
b = 255;
for (i=PURPLE; i<PURPLE+PUPCOUNT/2; ++i)
	{
	SetColorMap(i, r, g, b);
	r = r + 255/PUPCOUNT;
	}
for (i=PURPLE+PUPCOUNT/2; i<=PURPLE+PUPCOUNT; ++i)
	{
	SetColorMap(i, r, g, b);
	b = b - 255/PUPCOUNT;
	}
}

void evolve_hnymph(hnymph *my)
{
my->x = my->x + my->dx;
my->y = my->y + my->dy;
if (my->age >= 10)
	{
	spawn(&class_harry, my->x, my->y, 0, 0);
	kill(my);
	return;
	}
SetFilled(TRUE);
SetColor(HCOLOR);
Circle(my->x,my->y,5);
}

void evolve_harry(harry *my)
{
purpler *dclose;
bluefeeder *sclose;
redfeeder *cclose;
int ddis, sdis, cdis;
int ccx, ccy;
Creature *victim;
int theta;
int fsize;

hcount = hcount+1;
if (my->new)
	{
	my->size = 30;
	my->psize = my->size/3;
	my->hungry = 6;
	}
my->hungry = my->hungry - 1;
if (!my->hungry)
	{
	my->hungry = 6;
	my->size = my->size-1;
	if (my->size < 4)
		{
		kill(my);
		return;
		}
	}
if (!my->ate)
	{
	sclose = ClosestT(&class_bluefeeder, my->x, my->y);
	if (sclose!=NULL)
		{
		ccx = sclose->x;
		ccy = sclose->y;
		sdis = distance(ccx,ccy,my->x,my->y);
		if (sdis < my->psize) //if center of food creature in our radius eat it
			{
			fsize = Cread(bluefeeder,size,sclose);
			my->ate = fsize>>1;
			my->size = my->size + my->ate;
			kill(sclose);
			goto gospawn;
			}
		}
	dclose = ClosestT(&class_purpler, my->x, my->y);
	if (dclose!=NULL)
		{
		ccx = dclose->x;
		ccy = dclose->y;
		ddis = distance(ccx,ccy,my->x,my->y);
		if (ddis < my->psize)
			{
			fsize = Cread(purpler,size,dclose);
			my->ate = fsize>>1;
			my->size = my->size + my->ate;
			kill(dclose);
			goto gospawn;
			}
		}
	cclose = ClosestT(&class_redfeeder, my->x, my->y);
	if (cclose!=NULL)
		{
		ccx = cclose->x;
		ccy = cclose->y;
		cdis = distance(ccx,ccy,my->x,my->y);
		if (cdis < my->psize)
			{
			fsize = Cread(redfeeder,size,cclose);
			my->ate = fsize>>1;
			my->size = my->size + my->ate;
			kill(cclose);
			goto gospawn;
			}
		}
	victim = NULL;	//find a creature to head towards...
	if (sclose!=NULL)
		{
		if (dclose!=NULL)
			{
			if (cclose!=NULL)		//all alive
				{
				if (sdis < cdis)
					{
					if (sdis < ddis)
						victim = (Creature *)sclose;
					else
						victim = (Creature *)dclose;
					}
				else
					{
					if (cdis < ddis)
						victim = (Creature *)cclose;
					else
						victim = (Creature *)dclose;
					}
				}
			else	//cclose dead, sclose, dclose alive
				{
				if (sdis < ddis)
					victim = (Creature *)sclose;
				else
					victim = (Creature *)dclose;
				}
			}
		else
			{
			if (cclose!=NULL)
				{
				if (cdis < sdis)
					victim = (Creature *)cclose;
				else
					victim = (Creature *)sclose;
				}
			else
				victim = (Creature *)sclose;
			}
		}
	else	//sclose already dead
		{
		if (cclose!=NULL)
			{
			if (dclose!=NULL)
				{
				if (cdis < ddis)
					victim = (Creature *)cclose;
				else
					victim = (Creature *)dclose;
				}
			else
				{
				victim = (Creature *)cclose;
				}
			}
		else
			victim = (Creature *)dclose;
		}
	if (victim != NULL)
		{
		ccx = CreatureX(victim);
		ccy = CreatureY(victim);
		if (ccx < my->x)
			my->x = my->x - hspeed;
		else
			my->x = my->x + hspeed;
		if (ccy < my->y)
			my->y = my->y - hspeed;
		else
			my->y = my->y + hspeed;
		}
	}
else
	my->ate = my->ate - 1;
gospawn:
if (my->size > 90)
	{
	theta = Random(360);
	spawn(&class_hnymph, my->x, my->y, ArcX(theta, 8), ArcY(theta,8));
	my->size = my->size - 50;
	my->ate = 10;
	}
my->psize = my->size/3;
if (my->age==400)	/* Harries just live 400 clicks */
    kill(my);
else
	{
	SetFilled(FALSE);
	SetColor(HCOLOR);
	Circle(my->x,my->y,my->psize);
	}
}

void random_purpler()
{
purpler *pp;

pp = spawn(&class_purpler, mouse_x, mouse_y, 0, 0);
if (pp!=NULL)
	{
	Cwrite(purpler,afraid,pp,44);
	Cwrite(purpler,mycolor,pp,PURPLE+PUPCOUNT/2);
	Cwrite(purpler,rsize,pp,30);
	Cwrite(purpler,lifespan,pp,200);
	Cwrite(purpler,pspeed,pp,2);
	Cwrite(purpler,energy,pp,12);
	Cwrite(purpler,spin,pp,5);
	Cwrite(purpler,stop,pp,Random(2) );
	}
}


void evolve_mouser(mouser *my)
{
my->x = mouse_x;
my->y = mouse_y;
draw_spoked_wheel(WHITE,my->x,my->y,5,0,4);
}


//Start of the main code 


void main()
{
int i;

cscreen = GetPicScreen();
crcolors();			//set up the color map
					//spawn the initial creatures
mouse = spawn(&class_mouser,0,0,0,0);
time = 0;
preswap();			//set up double buffering
SetAbort(FALSE);
HideCursor();
for (;;)
	{
	PollInput(&mouse_x,&mouse_y,&mouse_left,&mouse_right,&key);
	key &= 0xff;
	Random(2);	//just to jiggle random values
	time = time+1;
	// check keyboard and maybe create some new creatures
	if (key == 'h')
		spawn(&class_harry, mouse_x, mouse_y, 0, 0);
	else if (key == 'p')
		random_purpler();
	else if (key == 'r')
		spawn(&class_redfeeder, mouse_x, mouse_y, 0, 0);
	else if (key == 'b')
		spawn(&class_bluefeeder, mouse_x, mouse_y, 0, 0);
	else if (key == 'f')
		spawn(&class_fountain, mouse_x, mouse_y, Random(100), Random(360));
	else if (key == 'k')
		{
		kill_all();
		mouse = spawn(&class_mouser,0,0,0,0);
		time = 0;
		}
	else if (key == 'q' || key == 0x1b || key == 'Q')
		break;
	//set up variables to keep track of how many of what creature around.
	hcount = 0;
	rcount = 0;
	bcount = 0;
	pcount = 0;
	gcount = 0;
	ClearScreen();
	//let everyone live 1 tick
	evolve();
	//and display results in text
	gtext(WHITE,0,0,"Evolve # ");
	gnumber(WHITE,60,0,5, time);
	gnumber(HCOLOR, 0, 10, 3, hcount);
	lhcount = hcount;
	gnumber(PURPLE, 0, 20, 3, pcount);
	gnumber(RED,0,30,3, rcount);
	gnumber(BLUE,0,40,3, bcount);
	gnumber(GREEN,0,50,3, gcount);
	total = hcount + pcount + rcount + bcount;
	gnumber(WHITE,0,60,3,total);
	swap();
	}
}
