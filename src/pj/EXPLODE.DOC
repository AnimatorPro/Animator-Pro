Date: Mon, 15 Apr 91 17:45 PDT
From: Grant_Blaha@hq
Instructions:

    Load a pic file.

    Insert a frame, goto frame two and pic/clear it, then insert this frame 
    as many times as you want until you reach the maximum length of the 
    flic you want.  

    Go back to frame 1, and get a cel thats the same size as the tiles you 
    wish to make.  This creates the cel that the code blits into and makes 
    sure that the pallete is the same as the flic too.

    Run the poco program.

    The program will prompt you for the start frame, end frame, and escape 
    frame.  The escape frame is the minimum number of frames the fastest 
    cel will appear in.  The rest of the cels will leave the screen 
    sometime between the escape frame and the end frame. 

    It should start running, with the exception of one or two debuggin 
    messages, from there on.  

    Problems:

    If you get a null pointer error, its because a cel wasn't getted first.

    If you get an object too large message, or number too large, after the 
    first cel has been rendered, its because the program is using too large 
    of a -Z move.  Change the value in #define CAM_2_PXL to a value of less 
    magnitude.  I use this constant to get the camera position by mutipling 
    it by the screen resolution to get a z coord.  I imagine that the 
    camera position must vary some other way than linear.  

    A cel size, either in the X or the Y, that divides evenly into the 
    screen res, will render incorrectly.  I guess I went to so much trouble 
    to catch the uneven cel size that I really screwed the even ones. 

    Because the cel size never changes, the cels on the edge have a black 
    region copied into them.  If keying is off, then you will see this.  It 
    is quite ugly.  I do not recommend running without keying on.  Optics 
    borders, on the other hand, can be quite cool.

