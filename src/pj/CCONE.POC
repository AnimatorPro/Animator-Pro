/* ccone.poc - a program that draws a color cone.  Goes between
 * a saturated color on the left to a grey-scale on the right.
 * This involves a little shenanigans to pretend Poco is true-color.
 * Then basically just a lot of linear interpolation.
 */

initColorMap()
/* Make a 8x8x4 RGB color cube to simulate true-color in
 * our color map.
 */
{
	int colorIx = 0;
	int r,g,b;

	for (r=0; r<8; ++r)
		for (g=0; g<8; ++g)
			for (b=0; b<4; ++b)
				SetColorMap(colorIx++,  r<<5, g<<5, b<<6);
}

rgbSetColor(int r, int g, int b)
/* Plot a red/green/blue value.  Values of r,g,b go from 0 to 255 */
{
SetColor((r&(7<<5)) + ((g&7<<5)>>3) + (b>>6));
}

void interpolateLine(int x, int y, int height,  
	double topR, double topG, double topB,
	double bottomR, double bottomG, double bottomB)
/* Draw a vertical line starting at x/y that's height pixels long and fades
 * from topR/G/B to bottomR/G/B.   Assumes RGB values are from 0 to 255.
 */
{
	int i;

	for (i=0; i<height; ++i)	{
		double howFar = (double)i/(height-1);
		double toGo = 1.0 - howFar;
		double r = toGo*topR + howFar*bottomR;
		double g = toGo*topG + howFar*bottomG;
		double b = toGo*topB + howFar*bottomB;
		rgbSetColor(r+0.5, g+0.5, b+0.5);
		Dot(x,y+i);
	}
}

void showCone(int boxY, int boxX, int boxW, int boxH, int r, int g, int b)
/* Show a color cone inside the box defined by boxX/Y/W/H.  
 * The cone will start with the color defined by r,g,b.  It'll 
 * fade to a gray-scale as it goes to the right.
 *
 * The strategy is as follows - for each vertical line of the
 * cone blend the color with white and then with black.  Then
 * draw a line that interpolates between the white tinted and
 * the black tinted color.
 *
 * There's also some display calculations to make the whole
 * thing appear as an isocoles (sp?) triangle on it's side.
 */
{
	int x,y,h;

	// Variables that will hold the extreme values for a single line.
	double darkR, darkG,darkB;
	double lightR, lightG, lightB;

	// Variables that define where we are drawing.
	double top,bottom;
	int middle = boxH/2 - 1;
	int halfHeight;
	
	for (x=0; x<boxW; ++x)	{
		// Figure out how far along fade-to-grayscale we are.
		double howFar = (double)x/(boxW-1);
		double toGo = 1.0 - howFar;
		
		// Calculate mix of color with black so far.
		darkR = r*toGo;
		darkG = g*toGo;
		darkB = b*toGo;

		// Calculate mix of color with white.
		lightR = howFar*255 + darkR;
		lightG = howFar*255 + darkG;
		lightB = howFar*255 + darkB;
		
		// Calculate height of triangle at this vertical section.
		halfHeight = (middle*x+boxW/2)/(boxW-1);

		// Pass things off to the line interpolator.
		interpolateLine(x, middle-halfHeight, 2*halfHeight+2,
			lightR, lightG, lightB, darkR, darkG, darkB);
	}		
}


main()
/* Set up fake true-color map and test out the color cone routine.  
 */
{
// Clear the screen.
Clear();

// Dimensions of cone.
int w = 320, h = 200;

// Set up RGB color map.
initColorMap();

// Draw cone over a blue background.
rgbSetColor(0,0,255);
Box(0,0,w,h);

// Draw a red based color cone.
showCone(0,0,w,h,255, 0, 0);
}
