/* test handling of structures, unions, and enums. */
/* emphasis on testing of scoping rules and nested declarations */
#pragma poco echo "expect>Success"

#define BBB1 92
#define CCC1 3
#define CCC2 26

union aaa {
	int  a;
	long b;
	} aaa;

enum eee {
	EEE0, EEE1, EEE2
	} eee1 = EEE0;

enum eee eee2;

typedef enum et {
	ET1 = ((9 + EEE1) * -1),  /* should eval to -10, value checked below */
	ET1A,
	ET2 = (ET1 + 30),		  /* should eval to 20 */
	ET2A,
	ET3 = 30,				  /* test simple assign-type constant */
	ET4 = ET2 << 1,			  /* should eval to 40 */
	ET5 = sizeof(int),
	} Enum_type;

Enum_type et1 = ET1;


void testfunc(void)
{
enum  et et2;
union aaa;		/* introduce new local scope for tag aaa */
union aaa {
	struct bbb {
		int bbb1;
		struct ccc {
			char ccc1, ccc2, ccc3;
			} ccc;
		} bbb;
	int *ip;
	double d;
	long l;
	int i;
	char c;
	} aaa = {{BBB1,{CCC1, CCC2}}};

struct ccc *ccc = &aaa.bbb.ccc;

et2 = ET2;
													 
if (aaa.bbb.bbb1 == BBB1 &&
	ccc->ccc1 == CCC1 &&
	aaa.bbb.ccc.ccc2 == CCC2 &&
	aaa.i == BBB1 &&
	sizeof(et1) == sizeof(int) &&
	sizeof(eee1) == sizeof(int) &&
	eee1 == EEE0 &&
	et1 == ET1 &&
	et2 == ET2 &&
	EEE0 == 0 &&
	EEE1 == 1 &&
	EEE2 == 2 &&
	ET1  == -10 &&
	ET1A == -9 &&
	ET2  == 20 &&
	ET2A == 21 &&
	ET3  == 30 &&
	ET4  == 40 &&
	ET5  == sizeof(int)
   )
	printf("Success" );
else
	printf("OH NO!  Something didn't work in handling structures or unions.\n");
}

void main(void)
{
testfunc();
}
