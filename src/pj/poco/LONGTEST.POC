
short randseed;

random(int amount)
{
randseed = (randseed<<1) + (0x12345);
return(randseed%amount);
}

float q;

int i;

int addem(int a, int b)
{
printf("%d %d\n", a, b);
a=a+b;
}


int k;


int inc_i()
{
i = i+1;
printf("i = %d\n", i);
}

hunk()
{
inc_i();
inc_i();
inc_i();
inc_i();
inc_i();
puts("OK");
printf("%d == %d??\n", 3*(1+2)-3, 6);
printf("%d == %d??\n", 2*(4+1)-9, 1);
printf("%d == %d??\n", 1+2*2-3, 2);
printf("%d == %d??\n",  2|5-4, 3);
printf("%d == %d??\n",  (1==1), 1);
printf("%d == %d??\n", 2 >= 1, 1);
}

int printsome()
{
puts("hi jim");
printf("wooli %s %d ????\n(and newlines)\n", "spooky", 3);
}

int cool(int a, int b, int c)
{
int sum_sq;

printf("a = %d\n", a);
printf("b = %d\n", b);
printf("c = %d\n", c);
sum_sq = a*a + b*b + c*c;
printf("cool(%d, %d, %d) = %d;\n", a,b,c,sum_sq);
sum_sq = 10;
printf("sum_sq = %d\n", sum_sq);
}

int fool()
{
int i;
i = 10*10;
}

int count = 10;

print2(char *a, char *b)
{
printf("%s and %s\n", a, b);
}

int find_lolly(int i)
{
int mask;
int t;
int	result;
long lolly;


mask = 1;
for (lolly = i; mask < lolly; mask = mask << 1)
	{
	lolly = lolly >> 1;
	}
return(lolly);
}

long ret_10()
{
puts("ret_10()");
return(10);
}

long squareit(long what)
{
long temp;

temp = what;
return(temp*what);
}

long l100 = 100;

lollygag()
{
printf("%ld\n", ret_10());
printf("%ld\n", squareit(ret_10()));
printf("find_lolly(100) = %d\n", find_lolly(100) );
printf("find_lolly(l100) = %d\n", find_lolly(l100) );
printf("find_lolly(string) = %d\n", find_lolly(l100+100) );
print2("Hello", "World");
puts("Bye");
}

int sqr_root(long i)
{
long	mask;
long t;
int	result;
long		lolly;


mask = 1;
for (lolly = i; mask < lolly; mask = mask << 1)
	{
	lolly = lolly >> 1;
	}

result = 0;

while (mask)
	{
	t = result | mask;
	if ((t * t) <= i)
	    result = t;
	mask = mask >> 1;
	}

return (result);
}

int calc_distance(short x1,short y1,short x2,short y2)
{
long delta_x, delta_y;

delta_x = x1 - x2;
delta_y = y1 - y2;

return(sqr_root( (delta_x*delta_x) + (delta_y*delta_y)));
}


long lk;

freen()
{
for (lk=0; lk<=16; lk = lk+1)
	printf( "%ld %d\n", lk, sqr_root(lk));
}

/* slowcircle - test out the floating point stuff a bit */
orbit(int objrad, int x, int y, int radius, int steps)
{
double inc;
double twopi;
double angle = 0;
int i;

twopi = 44;
twopi /= 7;
inc = twopi/steps;
for (i=0; i<steps; i++)
    {
    angle += inc;
    printf("Dot(%f,%f)\n", sin(angle), cos(angle) );
    }
}


int fac(int x)
{
if (x <= 1)
	return(1);
return(fac(x-1)*x);
}

double x[322], y[322], z[322];
char color[322];

int sw, sh;
double cenx,ceny;


random_star(int i)
{
x[i] = rnd(2000)-1000;
y[i] = rnd(2000)-1000;
z[i] = rnd(595)-95;
color[i] = rnd(11);
if (color[i] > 7)
    color[i] = 0;
color[i] = color[i]*32;
}

init_stars()
{
int i;

for (i=0; i<322; i++)
    {
    random_star(i);
    }
}

see_stars()
{
int i;
double zscale,zz;

for (i=0; i<322; i++)
    {
        {
        zz = z[i];
        zscale = 100.0/(zz+100);
        }
    }
}

move_stars()
{
int i;
for (i=0; i<322; i++)
    {
    z[i] = z[i]-5;
    if (z[i] < -98.0)
        {
        z[i] = 500;
        }
    }
}


init()
{
cenx = sw/2;
ceny = sh/2;
init_stars();
}

clear_screen()
{
}

star_main()
{
int i;
init();
clear_screen();
for (i=0;i<59*2+1;i++)
    {
    see_stars();
    move_stars();
    }
}


main()
{
int count;
char *s = "Wasted";
float q;
int k;
char buf[8];
char *ss;
char ***ppps;
char **pps;
char *ps = "hello";
int i;
char *names[10];


q = 10;
printf("%f\n", q);

for (i=0; i<10; i = i+1)
	{
	q = q/3;
	printf("%d ... %f\n", i, q);
	printf("A+%d = %c\n", i, i+'A');
	}


printf("%d\n", addem(3,4));


k = 7;
k = k*k;

puts("HI!");
printf("Hello %d are you %s %d??\n", 10, "Willy", k+1);

i = 0;


for (i=0; i<8; i++)
	printf("buf[%d] = %d", i, buf[i]);
for (i=0; i<8; i++)
	buf[i] = i*i;
for (i=0; i<8; i++)
	printf("buf[%d] = %d", i, buf[i]);
puts("");
orbit(3,320,220,100,25);
printf("fac(5) =  %d\n", fac(5) );
pps = &ps;
puts(ps);
puts(*pps);
printf("start of %s is %c\n", *pps, **pps);
pps = &names[1];
names[0] = "Jim";
names[1] = "John";
names[2] = "Jerry";
names[3] = "Jez";
names[4] = "Jon";
names[5] = "James";
names[6] = "Julius";
names[7] = "Joseph";
names[8] = "Jeremy";
names[9] = "Jesus";
for (i=0; i<10; i++)
	puts(names[i]);
puts("---------------");
ps = *pps;
puts(ps);
ppps = &pps;
printf("first letter is %c\n", ***ppps);
printsome();
fool();
printsome();
cool(1,2,3);
printsome();
cool(0,1,2);
printsome();
printsome();
count = 10;
fool();
fool();
printsome();
puts("Going into star_main...");
star_main();
puts("out of star_main");
10;
}

