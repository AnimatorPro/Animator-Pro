The library mathhost.lib is designed to support both Watcom C and High C
compiled code as well as assembler.  The mathlib calls in math.h operate
using stack argument passing protocall compatable with the Watcom -3s
option.  double return values are returned in the EAX:EDX register pair

ie: get double return in eax and edx to stack variable.

	 call 	 near ptr sin
     mov     dword ptr -8H[ebp],eax
     mov     dword ptr -4H[ebp],edx


Watcom C:

	There are 3 symbols in the library used for linking with code compiled 
	with watcom C using the -3s and -fpi options

	They are:
		__init_387_emulator and _fltused_ source in the module watco387.asm
			These symbols are not accessed but are used to indicate code that
			needs the watcom library.

		__CHP 	source in the module wc_fchop.asm
			This module is a module to truncate floats to integers.

	These modules and the rest of the library are a substitute for the 
	watcom library math387s.lib.  The code must not be linked with any 
	watcom libraries.


Metaware High C:

	High C code linked with this library should be compiled with 
	the -Hon=387 and -Hon=floating_point options.

	These options will creat in line code directing most floating functions
	to direct 80387 in line instructions.  This is appropriate since the
	host will have installed emulator code which the 80386 will trap and
	execute. It is transparent to the high C code except for the speed of
	execution.

	There are 3 symbols in the library used for linking with code compiled 

	They are:
		_mw87_used and _mw387_used source in the module highc387.asm
			These symbols are not accessed but are used to indicate code that
			needs the highc floating point library.

		_mwtrunc 	source in the module hc_fchop.asm
			This module is a module to truncate floats to integers.

	These modules and the rest of the library are a substitute for the 
	math functions in the high C library hcc.lib.


Assembler code:

	The host will have installed emulator code which the 80386 will trap and
	execute for 80387 instructins. It is transparent to assembler code except
	for speed.  If you have a question whether the instructions are actually
	emulated try it.  I havn't found one that is not yet.
	
