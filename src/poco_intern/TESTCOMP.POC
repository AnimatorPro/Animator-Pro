/* This poco program is to test the compression algorithm.
 * It loads a file, does a dummy OverAll() to recompress it,
 * then loads the original into the Cel, and does a frame-by-frame
 * line-by-line comparison of the Cel with the recompressed flic
 * and squawks if they dont match.
 *
 * Input:	testlist - a file with a bunch of flic names in it, one per line.
 * Output:  testcomp.log - error and timing results (and optional size) appended
 *		                 to this file
 */

#define PRINT_SIZE	//Enable this if you want a printout of the new size...
#define COMPRESS		//Enable this if you want to recompress

#include "errcodes.h"

FILE *logfile;

ErrCode pic_cel_same(char *name, int frame)
/* Makes sure a frame is same as current frame of cel.
 * Pass in name and frame just for error reporting. */
{
int width,height;
Screen *pic = GetPicScreen();
Screen *cel = GetCelScreen();
char *picbuf;
char *celbuf;
int i;
ErrCode err = Success;

GetSize(&width,&height);
if ((picbuf = malloc(width)) == NULL)
	return(Err_no_memory);
if ((celbuf = malloc(width)) == NULL)
	return(Err_no_memory);
for (i=0; i<height; ++i)
	{
	GetBlock(pic, picbuf, 0, i, width, 1);
	GetBlock(cel, celbuf, 0, i, width, 1);
	if (memcmp(picbuf,celbuf,width) != 0)
		{
		Qtext("Line %d of frame %d of %s isn't the same", i, frame, name);
		fprintf(logfile,
			"Line %d of frame %d of %s isn't the same\n", i, frame, name);
		err = Err_reported;
		break;
		}
	}
free(picbuf);
free(celbuf);
return(err);
}

ErrCode flic_cel_same(char *name)
/* Make sure every frame of flic and cel are the same. */
{
int i, count;
ErrCode err;

count = GetFrameCount();
for (i=0; i<count; ++i)
	{
	printf("compare %d of %d of %s", i+1, count, name);
	if ((err = pic_cel_same(name, i+1)) < Success)
		{
		return(Qerror(err, "Trouble seeing if frame is same"));
		}
	CelNextFrame();
	NextFrame();
	}
return(Success);
}

struct rc1
/* Data structure  recomp1 to keep track of file and frame */
	{
	int frame;
	int count;
	char *name;
	}

ErrCode recomp1(double time, struct rc1 *r)
/* OverAll function that does nothing but print current flic and frame */
{
	printf("recompress %d of %d of %s", ++r->frame, r->count, r->name);
}

ErrCode recompress(char *name)
/* Recompresses current flic. */
{
long itime;
struct rc1 r;


r.name = name;
r.frame = 0;
r.count = GetFrameCount();
itime = Clock1000();
OverAll(recomp1, &r);
fprintf(logfile, "\t%ld milliseconds to recompress %d frames\n", 
	Clock1000() - itime, r.count);
return(Success);
}

long file_size(char *name)
/* Return size of file */
{
FILE *f;
long size;

if ((f = fopen(name, "rb")) == NULL)
	return(Err_no_file);
fseek(f, 0, 2);
size = ftell(f);
fclose(f);
return(size);
}

ErrCode process(char *filename)
/* Load and recompress and check result on one Flic. */
{
ErrCode err;
char *tempname = "=:test.flc";		// Put temp file on temp device...

printf("Loading %s", filename);
if ((err = LoadFlic(filename)) < Success)
	return(Qerror(err, "Can't load %s", filename));
#ifdef COMPRESS
recompress(filename);
#endif /* COMPRESS */
#ifdef PRINT_SIZE	//Enable this if you want a printout of the new size...
if ((err = SaveFlic(tempname)) < Success)
	return(Qerror(err, "Can't save %s", tempname));
fprintf(logfile, "\told size %ld new size %ld\n", 
	file_size(filename), file_size(tempname));
#endif	/* PRINT_SIZE */
if ((err = LoadCel(filename)) < Success)
	return(Qerror(err, "Can't load cel %s", tempname));
if ((err = flic_cel_same(filename)) < Success)
	return(err);
return(Success);
}

ErrCode test_recompress_files(char *list_file_name)
/* Recompress all the files listed in list_file_name, and
 * make sure that they are the same after recompression */
{
FILE *list_file;
char filename[80];
ErrCode err = Success;

if ((logfile = fopen("testcomp.log", "a")) == NULL)
	return(Qerror(-1, "Couldn't open log file"));
if ((list_file = fopen(list_file_name, "r")) == NULL)
	return(Qerror(Err_not_found, list_file_name));
fprintf(logfile, "Recompressing files listed in %s\n", list_file_name);
while (fgets(filename, sizeof(filename), list_file) != NULL)
	{
	filename[strlen(filename)-1] = 0;	/* Chop off carraige return */
	fprintf(logfile, "%s\n", filename);
	if ((err = process(filename)) < Success)
		{
		fprintf(logfile, "Error processing %s\n", filename);
		return(Qerror(err, "processing %s", filename));
		}
	}
fclose(list_file);
fclose(logfile);
return(err);
}

main()
{
test_recompress_files("testlist");
}
