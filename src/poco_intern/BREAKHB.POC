/* breakout - the classic computer game where you try to knock out all the
 * bricks with a ball that bounces off the walls and your paddle
 */

#pragma poco library "breaksub.poe"

#define TRUE 1
#define FALSE 0
#define Success 0
#define ArrayEls(c) (sizeof(c)/sizeof((c)[0]))

Boolean debug = FALSE;	/* Explicit FALSE needed here if running from
						 * command line due to some weird bug.  (Else
						 * it ends up 32) */

/*** A disk object
 ***/
typedef struct disk
	{
	int color;
	int x,y;
	int radius;
	} Disk;
void disk_init(Disk *this, int color, int x, int y, int radius);
void disk_draw(Disk *this, int color);

/*** A rectangle object
 ***/
typedef struct rect
	{
	int color;
	int x,y;
	int width, height;
	} Rect;
void rect_init(Rect *this, int color, int x, int y, int width, int height);
void rect_draw(Rect *this, int color);
Boolean rect_hit(Rect *this, Disk *d);

/*** Object to define the bouncing
 *** ball.
 ***/
typedef struct ball
	{
	Disk draw;
	int dx,dy;
	} Ball;
void ball_init(Ball *this, int color, int x, int y, int radius, int dx, int dy);
void ball_draw(Ball *this);
void ball_move(Ball *this);

/*** Object to define a single
 *** brick.
 ***/
typedef struct brick
	{
	Rect draw;
	char exists;
	} Brick;
void brick_init(Brick *this, int color, int x, int y, int width, int height);
void brick_draw(Brick *this);
Boolean brick_hit(Brick *this, Ball *ba);
void brick_destroy(Brick *this);

/*** Object to define the player's
 *** paddle.
 ***/
typedef struct paddle
	{
	Rect draw;
	int leftmost, rightmost;
	} Paddle;
void paddle_init(Paddle *this, int color, int x, int y, int width, int height,
	int leftmost, int rightmost);
void paddle_draw(Paddle *this);
Boolean paddle_hit(Paddle *this, Ball *ba);
void paddle_move(Paddle *this, int mousex, int mousey);

/*** Object to define a wall of the
 *** playing area.
 ***/
typedef struct wall
	{
	Rect draw;
	Boolean exists;
	int facex, facey;		/* Which way the ball bounces off it. */
	} Wall;
void wall_init(Wall *this, int color, int x, int y, int width, int height,
	int facex, int facey);
void wall_draw(Wall *this);
Boolean wall_hit(Wall *this, Ball *ba);
void wall_disable(Wall *this);

/*** Object to define a player's
 *** score.
 ***/
typedef struct score
	{
	Rect box;
	int count;
	} Score;
void score_init(Score *this, int color, int x, int y, int count);
void score_draw(Score *this);
void score_add(Score *this, int amount);
void show_score(Score *score);

/*** Object to save the PJ program
 *** state.
 ***/
typedef struct pjstate
	{
	int ccolor;
	Boolean filled;
	Boolean two_color;
	char ink[20];
	Screen *oscreen;
	} Pjstate;
Boolean pjstate_save(Pjstate *this);
void pjstate_restore(Pjstate *this);


/*** Object for the whole game
 ***/
typedef struct game
	{
	int back_color;
	int screenw, screenh;
	int wall_thick;
	int arenaw, arenah;
	int brick_spacing;
	int brick_thick;
	int brick_width;
	int bricks_hit;
	Wall walls[4];
	Score score;
	Paddle paddle;
	Ball ball;
	int ball_maxy;	/* if get ball below here then poof - you lost */
	int brick_maxy; /* if ball below here don't check for brick collisions */
	Brick *bricks;
	int brick_count;
	int xbricks;
	int ybricks;
	} Game;
Game g;

/*** Disk methods.
 ***/
void disk_init(Disk *this, int color, int x, int y, int radius)
{
this->color = color;
this->x = x;
this->y = y;
this->radius = radius;
}


/*** Rect methods
 ***/
void rect_init(Rect *this, int color, int x, int y, int width, int height)
{
this->color = color;
this->x = x;
this->y = y;
this->width = width;
this->height = height;
}



/*** Ball methods.
 ***/
void ball_init(Ball *this, int color, int x, int y, int radius, int dx, int dy)
{
disk_init(&this->draw, color, x, y, radius);
this->dx = dx;
this->dy = dy;
}

void ball_draw(Ball *this)
{
disk_draw(&this->draw, this->draw.color);
}

void ball_move(Ball *this)
{
disk_draw(&this->draw, g.back_color);
this->draw.x += this->dx;
this->draw.y += this->dy;
ball_draw(this);
}


/*** Brick methods
 ***/
void brick_init(Brick *this, int color, int x, int y, int width, int height)
{
rect_init(&this->draw, color, x, y, width, height);
this->exists = TRUE;
}

void brick_draw(Brick *this)
{
rect_draw(&this->draw, this->draw.color);
}

Boolean brick_hit(Brick *this, Ball *ba)
{
if (!this->exists)
	return(FALSE);
return(rect_hit(&this->draw, &ba->draw));
}

void brick_destroy(Brick *this)
{
this->draw.color = g.back_color;
brick_draw(this);
this->exists = FALSE;
}

/*** Paddle methods.
 ***/
void paddle_init(Paddle *this, int color, int x, int y, int width, int height,
	int leftmost, int rightmost)
{
rect_init(&this->draw, color, x, y, width, height);
this->leftmost = leftmost;
this->rightmost = rightmost - width;
}

void paddle_draw(Paddle *this)
{
rect_draw(&this->draw, this->draw.color);
}

Boolean paddle_hit(Paddle *this, Ball *ba)
{
return(rect_hit(&this->draw, &ba->draw));
}

void paddle_move(Paddle *this, int mousex, int mousey)
/** Make paddle X position follow mouse.  Make sure it stays inside
 ** gaming area.
 **/
{
rect_draw(&this->draw, g.back_color);
if (mousex < this->leftmost)
	mousex = this->leftmost;
if (mousex > this->rightmost)
	mousex = this->rightmost;
this->draw.x = mousex;
paddle_draw(this);
}

/*** Wall methods.
 ***/
void wall_init(Wall *this, int color, int x, int y, int width, int height,
	int facex, int facey)
{
rect_init(&this->draw, color, x, y, width, height);
this->facex = facex;
this->facey = facey;
this->exists = TRUE;
}

void wall_draw(Wall *this)
{
if (this->exists)
	rect_draw(&this->draw, this->draw.color);
}

Boolean wall_hit(Wall *this, Ball *ba)
{
if (!this->exists)
	return(FALSE);
return(rect_hit(&this->draw, &ba->draw));
}

void wall_disable(Wall *this)
{
this->exists = FALSE;
}

/*** Score methods
 ***/
void score_init(Score *this, int color, int x, int y, int count)
{
this->box.color = color;
this->box.x = x;
this->box.y = y;
this->box.width = 50;
this->box.height = 15;
this->count = count;
}

void score_draw(Score *this)
{
char buf[16];

rect_draw(&this->box, g.back_color);
SetColor(this->box.color);
sprintf(buf, "%4d", this->count);
Text(this->box.x, this->box.y, buf);
}

void score_add(Score *this, int amount)
{
this->count += amount;
}

/*** pjstate methods
 ***/
Boolean pjstate_save(Pjstate *this)
{
int w,h;
ErrCode err;

GetSize(&w,&h);
if ((err = AllocScreen(&this->oscreen, w,h)) < Success)
	{
	Qerror(err, "Can't allocate backup screen %dx%d", w, h);
	return(FALSE);
	}
CopyScreen(GetPicScreen(), this->oscreen);
this->ccolor = GetColor();
this->filled = GetFilled();
this->two_color = GetTwoColor();
GetInk(this->ink);
return(TRUE);
}

void pjstate_restore(Pjstate *this)
{
if (this->oscreen != NULL)
	{
	CopyScreen(this->oscreen, GetPicScreen());
	FreeScreen(&this->oscreen);
	}
ShowCursor();
SetColor(this->ccolor);
SetFilled(this->filled);
SetTwoColor(this->two_color);
SetInk(this->ink);
}

/*** Game methods
 ***/

Boolean game_init(int xbricks, int ybricks,int xspeed, int yspeed, 
	int paddle_width, int back_color, int wall_color, int brick_color,
	int paddle_color, int ball_color, int score_color)
{
#define DW 320		/* unscaled dimensions */
#define DH 200
int i,j, x,y;
int left,right,key;
int bcolor;
Brick *bricks;

g.xbricks = xbricks;
g.ybricks = ybricks;
g.back_color = back_color;
GetSize(&g.screenw, &g.screenh);
//Qtext("Screen size is %d width by %d height.",g.screenw,g.screenh);
g.brick_spacing = g.screenh/DH;
g.wall_thick = 4*g.screenh/DH;
g.brick_thick = 4*g.screenh/DH;
g.brick_width = DW/(xbricks)*(g.screenw/DW/2);
//Qtext("g.screenw/DW is %d; brick width is %d.",g.screenw/DW,g.brick_width);
//g.brick_width = 15*g.screenw/DW;
g.arenaw = 2*g.wall_thick+(xbricks+1)*g.brick_spacing + xbricks*g.brick_width;
g.arenah = g.screenh;
wall_init(&g.walls[0], wall_color, 
		  0, 0, 
		  g.arenaw, g.wall_thick, 0, 1);
wall_init(&g.walls[1], wall_color,
		  0, g.arenah - g.wall_thick,
		  g.arenaw, g.wall_thick, 0, -1);
wall_disable(&g.walls[1]);		/* bottom wall isn't there */
wall_init(&g.walls[2], wall_color, 
		  0, 0, 
		  g.wall_thick, g.arenah, 1, 0);
wall_init(&g.walls[3], wall_color,
		  g.arenaw - g.wall_thick, 0,
		  g.wall_thick, g.arenah, -1, 0);
score_init(&g.score, score_color, g.arenaw + g.wall_thick, 0, 0);
g.brick_count = xbricks*ybricks;
g.bricks_hit = 0;
if ((g.bricks = calloc(sizeof(Brick), g.brick_count)) == NULL)
	{
	Qerror(-1, "Not enough memory for bricks");
	return(FALSE);
	}

PollInput(&x,&y,&left,&right,&key);
paddle_init(&g.paddle, paddle_color, x, 
	g.arenah - 2*g.wall_thick - g.brick_spacing,
	paddle_width*g.screenw/DW, g.wall_thick,
	g.wall_thick + g.brick_spacing,  g.arenaw - g.wall_thick - g.brick_spacing);
ball_init(&g.ball, ball_color, g.paddle.draw.x, 
       g.paddle.draw.y-g.paddle.draw.height, 
       g.wall_thick/2, xspeed*g.screenw/DW, yspeed*g.screenw/DW);
g.ball_maxy = g.arenah - 2*g.wall_thick;
bcolor = brick_color;
bricks = g.bricks;
y = g.wall_thick + g.brick_spacing;
for (i=0; i<ybricks; ++i)
	{
	x = g.wall_thick + g.brick_spacing;
	for (j=0; j<xbricks; ++j)
		{
		brick_init(bricks++, bcolor, x, y, g.brick_width, g.brick_thick);
		x += g.brick_width + g.brick_spacing;
		}
	y += g.brick_thick + g.brick_spacing;
	++bcolor;
	}
g.brick_maxy = y;
HideCursor();
#undef DW
#undef DH
}

void game_cleanup()
{
if (g.bricks != NULL)
	free(g.bricks);
memset(&g, 0, sizeof(g));
}

Boolean game_draw_arena()
{
int i;
int x,y,left,right,key;
int dx,dy,odx,ody;

Clear();
paddle_draw(&g.paddle);
ball_draw(&g.ball);
for (i=0; i<4; ++i)
	wall_draw(&g.walls[i]);
for (i=0; i<g.brick_count; ++i)
	brick_draw(&g.bricks[i]);
score_draw(&g.score);
odx=g.ball.dx;             /* Save old dx, dy values. */
ody=g.ball.dy;
for (;;)
   {
      PollInput(&x,&y,&left,&right,&key);
      if (left)
          break;
      if (right)
	   if (Qquestion("Quit the game?"))
               return(FALSE);
      paddle_move(&g.paddle, x, y);
      if (g.ball.draw.x != g.paddle.draw.x)
      {
          g.ball.dx = g.paddle.draw.x-g.ball.draw.x;
          g.ball.dy=0;
          ball_move(&g.ball);
      }
   }
g.ball.dx=odx;
g.ball.dy=ody;
return(TRUE);
}

void game_play()
{
int x,y,left,right,key;
int i;
Wall *w;
Brick *bricks;

for (;;)
	{
	PollInput(&x,&y,&left,&right,&key);
	if (right)
		if (Qquestion("Quit the game?"))
			break;
	if (key)
		{
		switch (key & 0xff)
			{
			case ' ':
				Qtext("Pausing momentarily");
				break;
			case '?':
				Qtext("I got a question mark");
				break;
			case 'd':
			case 'D':
				debug = !debug;
				Qtext("Debug = %d", debug);
				break;
			}
		}
	paddle_move(&g.paddle, x, y);
	ball_move(&g.ball);
	w = &g.walls[0];
	for (i=0; i<4; i++)
		{
		if (wall_hit(w, &g.ball))
			{
			if (w->facex)
				{
				g.ball.dx = -g.ball.dx;
				}
			else if (w->facey)
				{
				g.ball.dy = -g.ball.dy;
				}
			}
		++w;
		}
	if (paddle_hit(&g.paddle, &g.ball))
		{
		g.ball.dy = -g.ball.dy;
		}
	if ((i = brick_collide(&g.ball.draw, g.bricks, g.brick_count)) >= 0)
		{
		brick_destroy(&g.bricks[i]);
		score_add(&g.score, 1);
		score_draw(&g.score);
		g.ball.dy = -g.ball.dy;
		if ((g.bricks_hit += 1) >= g.brick_count)
			{
			Qtext("You won, what a great game!");
			return;
			}
		}
	if (g.ball.draw.y > g.ball_maxy)
		{
		Qtext("Oops, the ball slipped through, you lose.");
		return;
		}
	}
}

void show_score(Score *score)
{  /* Display the current high score. */
   Qtext("High score is %d",score->count);
}

void setup(int *bricksx,int *bricksy,int *balldx, int *balldy, int *paddle_width)
{  /* Let the player set some options. */
char *setup_choices[] =
   {
   "# of bricks across",
   "# of bricks high",
   "Ball x speed",
   "Ball y speed",
   "Paddle width",
   };
int choice;
static int ipos = 0;
int minx = 1;
int miny = 1;
int maxx = 30; /* Probably a mathematical way to figure this out, but it */
               /* would depend on getting local values out of game_init. */
int maxy = 30;
int smin = -3;
int smax = 3;
int pmin = 10;
int pmax = 50;

   for (;;)
   {
       if (Qlist(&choice,setup_choices,ArrayEls(setup_choices),&ipos,
             "Setup option to change?"))
       {
           switch (choice)
           {
               case 0:
                   Qnumber(bricksx,minx,maxx,"Number of bricks across?");
                   break;
               case 1:
                   Qnumber(bricksy,miny,maxy,"Number of bricks high?");
                   break;
	     case 2:
		Qnumber(balldx,smin,smax,"Speed of ball horizontally");
		break;
	     case 3:
		Qnumber(balldy,0,smax,"Speed of ball vertically");
		break;		
	     case 4:
		Qnumber(paddle_width,pmin,pmax,"Paddle width");
		break;		
           }
       }
       else
           break;
   }
}
void main()
{
Pjstate old_state;
int balldx = 1, balldy = 2;
int bricksx = 13, bricksy = 8;
int paddle_width = 25;
Score high_score;
high_score.count = 0;
static char *main_choices[] = 
	{
	"Play Game",
	"Setup",
	"High Score",
	"Quit",
	};

//Qtext("Debug is %d", debug);
if (pjstate_save(&old_state))
	{
	for (;;)
		{
		ShowCursor();
		switch (Qmenu(main_choices, 4, "Sleazy Breakout!"))
			{
			case 0:
				goto OUT;
                        case 1:
           		   if (game_init(bricksx, bricksy, balldx,balldy,paddle_width,
                               0, 32, 36, 40, 44, 48))
   			       {
			       if (game_draw_arena())
                               {
   			           game_play();
                                   if (g.score.count > high_score.count)
                                       high_score.count=g.score.count;
                               }
			       game_cleanup();
			       }
			   break;
                        case 2:
                           setup(&bricksx,&bricksy,&balldx,&balldy,&paddle_width);
                           break;
                        case 3:
                           show_score(&high_score);
                           break;
			}
		}
	}
OUT:
pjstate_restore(&old_state);
exit(-425);
}
