#define ArrayEls(c) (sizeof(c)/sizeof((c)[0]))
#define TRUE 1
#define FALSE 0

#define Success 0
#define Err_nogood      -1 /* something generally went wrong */
#define Err_no_memory  	-2 /* no memory avilable */
#define Err_bad_input	-3 /* bad input data */
#define Err_format 		-4 /* general bad data format */
#define Err_no_vram   	-5 /* out of video display memory */
#define Err_no_stack   	-6 /* out of stack space */
#define Err_reported   	-7 /* still an error but was reported below */
#define Err_unimpl  	-8 /* feature unimplemented */
#define Err_overflow	-9 /* data overflow for size of result */
#define Err_not_found   -10 /* object not found */
#define Err_bad_magic   -11 /* bad magic id number on data or record */
#define Err_abort		-12 /* user abort request */
#define Err_timeout		-13 /* the call waiting timed out */
#define Err_wrong_res	-14 /* Can't deal with object of this dimension */
#define Err_too_big		-15 /* object too big to handle */
#define Err_version		-16 /* correct file type but new version */
#define Err_bad_record	-17 /* record magic number is bad */


#define TWOPI (2*3.14159)

#define is_head(n) ((n)->prev->prev == NULL)
#define is_tail(n) ((n)->next->next == NULL)

typedef struct cnode {
	struct cnode *next;   /* points to next node */
	struct cnode *prev;   /* points to previous node */
	void *item;			  /* points to what's really on list */
} Cnode;

typedef struct dl_head {
	Cnode *head;
	Cnode *tail;        /* initialized to 0 */
	Cnode *tails_prev;
} Dlhead;

void *vd;		/* for casting */

void init_list(Dlhead *list);
void add_head(Dlhead *list, Cnode *node);
void add_tail(Dlhead *list, Cnode *node);
void insert_before(Cnode *node,Cnode *listnode);
void insert_after(Cnode *node,Cnode *listnode);
void rem_node(Cnode *node);
Boolean isin_list(Cnode *testnode,Dlhead *list);
long listlen(Dlhead *list);

/***********************************************************/
/* DOUBLY linked list (dl) calls */
/***********************************************************/
void init_list(Dlhead *list)
{
list->head = vd = &list->tail;
list->tail = NULL;
list->tails_prev = vd = list;
}
/***********************************************************/
void add_head(Dlhead *list,Cnode *node)
{
node->prev = vd = &list->head;
node->next = list->head;
node->next->prev = list->head = node;
}
/***********************************************************/
void add_tail(Dlhead *list,Cnode *node)
{
node->next = vd = &list->tail;
node->prev = list->tails_prev;
node->prev->next = list->tails_prev = node;
}
/***********************************************************/
void insert_after(Cnode *node,Cnode *listnode)
{
	node->prev = listnode;
	node->next = listnode->next;
	node->next->prev = listnode->next = node;
}
/**********************************************************/
void insert_before(Cnode *node,Cnode *listnode)
{
	node->next = listnode;
	node->prev = listnode->prev;
	node->prev->next = listnode->prev = node;
}
/**********************************************************/
void rem_node(Cnode *node)
{
	node->prev->next = node->next;
	node->next->prev = node->prev;
}


typedef struct sea
	{
	Dlhead life;
	int sw,sh;
	} Sea;

typedef struct spec
	{
	char *name;
	Dlhead members;
	ErrCode (*new)(struct sea *sea, struct spec *spe, void *cre);
	//ErrCode (*new)(struct sea *sea, struct spec *spe, struct creat *cre);
	} Spec;

typedef struct creat
	{
	char *name;
	Spec *species;
	Cnode *sea_node;
	Cnode *spec_node;
	double x,y;
	double angle, speed;
	double mass;
	double energy;
	int color;
	void (*see)(Sea *sea, struct creat *cre);
	void (*move)(Sea *sea, struct creat *cre);
	void (*kill)(Sea *sea, struct creat *cre);
	void *local;
	} Cre;
typedef void SeeMe(Sea *sea, Cre *cre);
typedef void MoveMe(Sea *sea, Cre *cre);
typedef void KillMe(Sea *sea, Cre *cre);

#define askcmem malloc
#define freemem free


void see_mass(Sea *sea, Cre *cre)
{
SetColor(cre->color);
Circle(cre->x, cre->y, cre->mass);
}

SeeMe *seers[] = {
	see_mass,
	};


void move_straight(Sea *sea, Cre *cre)
{
cre->angle  =  fmod(cre->angle, TWOPI);
cre->x += cos(cre->angle)*cre->speed;
cre->y += sin(cre->angle)*cre->speed;
}

void move_twirl(Sea *sea, Cre *cre)
{
cre->angle += 0.1;
move_straight(sea, cre);
}


MoveMe *movers[] = {
	move_straight,
	move_twirl,
	};

void kill_cre(Sea *sea, Cre *cre)
{
Cnode *n;

if (cre == NULL)
	return;
if (cre->kill != NULL)
	(*cre->kill)(sea,cre);
if ((n = cre->sea_node) != NULL)
	{
	rem_node(n);
	free(n);
	}
if ((n = cre->spec_node) != NULL)
	{
	rem_node(n);
	free(n);
	}
if (cre->name != NULL)
	free(cre->name);
free(cre);
}

ErrCode new_cre(Cre **result, Sea *sea, Spec *spec, char *name)
{
Cre *new;
Cnode *node;
ErrCode err = Err_no_memory;

if ((new = askcmem(sizeof(*new))) == NULL)
	goto BADOUT;
if ((new->name = strdup(name)) == NULL)
	goto BADOUT;
if ((new->sea_node = node = askcmem(sizeof(*node))) == NULL)
	goto BADOUT;
node->item = new;
add_tail(&sea->life, node);
if ((new->spec_node = node = askcmem(sizeof(*node))) == NULL)
	goto BADOUT;
add_tail(&spec->members, node);
new->species = spec;
if (spec->new != NULL)
	{
// OK TO HERE ~~~
	if ((err = (*spec->new)(sea,spec,new)) < Success)
		goto BADOUT;
// BOMBS BY HERE
	}
err = Success;
*result = new;
return(err);
BADOUT:
kill_cre(sea, new);
*result = NULL;
return(Qerror(err, "New creature %s", name));
}

void see_cre_list(Sea *sea, Dlhead *list)
{
Cnode *node, *next;
Cre *cre;

for (node = list->head; (next = node->next) != NULL; node = next)
	{
	cre = node->item;
	(*cre->see)(sea,cre);
	}
}

see_sea(Sea *sea)
{
see_cre_list(sea, &sea->life);
}

move_cre_list(Sea *sea, Dlhead *list)
{
Cnode *node, *next;
Cre *cre;

for (node = list->head; (next = node->next)!=NULL; node = next)
	{
	cre = node->item;
	(*cre->move)(sea,cre);
	}
}

Boolean init_sea(Sea *sea)
{
init_list(&sea->life);
GetSize(&sea->sw, &sea->sh);
return(TRUE);
}

sea_loop(Sea *sea, int count)
{
int i;

Clear();
for (i=0; i<count; i++)
	{
	see_sea(sea);
	move_cre_list(sea, &sea->life);
	}
}

void rand_init_creat(Sea *sea, Cre *cre)
{
cre->x = rnd(sea->sw);
cre->y = rnd(sea->sh);
cre->angle = rnd(10000)*TWOPI/10000.0;
cre->speed = rnd(50)/10.0;
cre->color = rnd(32)+64;
cre->mass = rnd(50);
cre->see = seers[0];
cre->move = movers[rnd(2)];
}

ErrCode random_creatures(Sea *sea, Spec *spec, int count)
{
int i;
Cre *cre;
ErrCode err;

char *cnames[] =
	{
	"Sam",
	"Betty",
	"Billy",
	"Bim",
	"Flim",
	"Jim",
	};
for (i=0; i<count; i++)
	{
	if ((err = new_cre(&cre, sea, spec, cnames[rnd(ArrayEls(cnames))]))
		< Success)
		break;
	rand_init_creat(sea, cre);
	}
return(err);
}


do_sea_life()
{
Spec spe_circle, spe_line;
Sea pacific, *sea = &pacific;
ErrCode err;

if (!init_sea(sea))
	goto ERR;
init_list(&spe_circle.members);
spe_circle.name = "Circle";
spe_circle.new = NULL;
init_list(&spe_line.members);
spe_line.name = "Line";
spe_line.new = NULL;

if ((err = random_creatures(sea, &spe_circle, 8)) < Success)
	goto ERR;
sea_loop(sea,50);
Qtext("All done");

exit(Err_unimpl);
ERR:
	Qerror(err, "Bummer err!");
	exit(err);
}

main()
{
int ocolor2, ocolor, ofill;
char oink[16];

ocolor2 = GetTwoColorOn();
SetTwoColorOn(TRUE);
ocolor = GetColor();
ofill = GetFilled();
SetFilled(TRUE);
GetInk(oink);
SetInk("Opaque");

do_sea_life();

SetInk(oink);
SetFilled(ofill);
SetColor(ocolor);
SetTwoColorOn(ocolor2);
}
#ifdef LATER
#endif
