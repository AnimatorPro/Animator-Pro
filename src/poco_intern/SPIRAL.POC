#include "errcodes.h"

#define PI              3.14159265358979323846

void freez(void **pt)
/*****************************************************************************
 * Free a pointer and set it to zero.  Typical use:
 *      buf = malloc(size);
 *          ...
 *      freez(&buf);
 ****************************************************************************/
{
if (*pt != NULL)
    {
    free(*pt);
    *pt = NULL;
    }
}

typedef struct polygon 
/*****************************************************************************
 * A little data structure to hold a polygon in Poco format.
 ****************************************************************************/
    {
    int *x, *y;         /* Point arrays. */
    int count;          /* Number of points. */
    } Polygon;

ErrCode free_polygon(Polygon *poly)
/*****************************************************************************
 * Free up the point arrays of a polygon.
 ****************************************************************************/
{
freez(&poly->x);
freez(&poly->y);
}

ErrCode alloc_polygon(Polygon *poly, int count)
/*****************************************************************************
 * Allocate point arrays of a polygon.
 ****************************************************************************/
{
poly->count = count;
poly->x = poly->y = NULL;       /* For better error recovery. */
poly->x = calloc(count, sizeof(int));
poly->y = calloc(count, sizeof(int));
if (poly->x == NULL || poly->y == NULL)
    {
    free_polygon(poly);
    return Err_no_memory;
    }
return Success;
}

Errcode make_spiral_polygon(Polygon *result
, double x_center, double y_center
, double start_radius, double end_radius
, double start_angle, double end_angle)
/*****************************************************************************
 * Make up a spiral polygon.  Typical usage might be:
 *      Polygon poly;
 *      make_spiral_polygon(&poly, 160, 100, 0, 100, 0, 3*2*PI);
 *      Poly(poly.count, poly.x, poly.y);
 *      free_polygon(&poly);
 * Parameters:
 *      Polygon *result     The result spiral polygon will be here.
 *      double x_center     X coordinate of center of polygon.
 *      double y_center     Y coordinate of center of polygon.
 *      double start_radius Radius of start of spiral.
 *      double end_radius   Radius of end of spiral.  Set start_radius and
 *                          end radius to be the same thing for an arc.
 *      double start_angle  Angle of start of spiral in radians.
 *      double end_angle    Angle of end of spiral.  Set start_angle to 0
 *                          and end_angle to 2*PI for a circle.
 * Returns:
 *      Success or possibly Err_no_memory.
 ****************************************************************************/
{
ErrCode err;
int i;
double delta_radius = end_radius - start_radius;
double delta_angle = end_angle - start_angle;
int num_points = 32 * (1 + fabs(delta_angle)/(2*PI));

if ((err = alloc_polygon(result, num_points)) < Success)
    return err;
for (i=0; i<num_points; i++)
    {
    double percentage = (double)i/(double)(num_points-1);
    double angle = start_angle + percentage * delta_angle;
    double radius = start_radius + percentage * delta_radius;
    result->x[i] = radius * cos(angle) + x_center;
    result->y[i] = radius * sin(angle) + y_center;
    }
return Success;
}

main()
/*****************************************************************************
 * Test spiral routine some.
 ****************************************************************************/
{
Polygon poly;

SetFilled(FALSE);
SetClosed(FALSE);
SetCycleDraw(TRUE);
SetBrushSize(0);

/* Make a 3 turn spiral. */
make_spiral_polygon(&poly, 160, 100, 0, 100, 0, 3*2*PI);
Poly(poly.count, poly.x, poly.y);
free_polygon(&poly);

/* Make a circle radius 100. */
make_spiral_polygon(&poly, 160, 100, 100, 100, 0, 2*PI);
Poly(poly.count, poly.x, poly.y);
free_polygon(&poly);

/* Make an arc from -45 degrees to +45 degrees */
SetBrushSize(2);
make_spiral_polygon(&poly, 160, 100, 100, 100, -2*PI/8, +2*PI/8);
Poly(poly.count, poly.x, poly.y);
free_polygon(&poly);
}
