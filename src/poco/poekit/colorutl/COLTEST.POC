/* This is just a little program to exercise colorutl.poe. */

#pragma poco library "colorutl.poe"

#ifndef __POCO__
  int  ColorDifference(int *pcolor1, int *pcolor2);
  int  ClosestColor(int *pcolor, int *ptab, int tabcount);
  void GetMenuRGB(int *current, int *preferred);
  void GetMenuIndexes(int *indexes);
  void RgbToHls(int r, int g, int b, int *h, int *l, int *s);
#endif /* __POCO__ */


void test_ColorDifference(int *a, int *b)
{
	Qtext(
	"Color difference between (%03d %03d %03d)\n"
	"and (%03d %03d %03d) is %d.\n"
	, a[0], a[1], a[2], b[0], b[1], b[2]
	, ColorDifference(a,b)
	);
}

void debug_ClosestColor()
{
	static int table[] = {0,0,0, 111,111,111, 255,255,255};
	static int color[] = {255,255,255};
	Qtext("Closest color is %d.", ClosestColor(color,table,3));
}

void test_ClosestColor(int *col)
{
	int screen_map[256*3];
	int close_ix;
	int *close_rgb;

	GetScreenColorMap(GetPicScreen(), screen_map);
	close_ix = ClosestColor(col, screen_map, 256);
	close_rgb = screen_map + 3*close_ix;
	Qtext("Closest color to (%03d %03d %03d) is\n"
	      "color register %d (%03d %03d %03d)\n"
		  "with a difference of %d.\n"
		  , col[0], col[1], col[2]
		  , close_ix, close_rgb[0], close_rgb[1], close_rgb[2]
		  , ColorDifference(col, close_rgb));
}

void test_MenuColors()
{
	int current[5*3];
	int preferred[5*3];
	int index[5];

	GetMenuRGB(current, preferred);
	GetMenuIndexes(index);
	Qtext(
	"Here is a list of the current menu colors in the format\n"
	"(preferred RGB value) (current RGB value) (color index).\n"
	"(%03d %03d %03d) (%03d %03d %03d) (%03d)\n"
	"(%03d %03d %03d) (%03d %03d %03d) (%03d)\n"
	"(%03d %03d %03d) (%03d %03d %03d) (%03d)\n"
	"(%03d %03d %03d) (%03d %03d %03d) (%03d)\n"
	"(%03d %03d %03d) (%03d %03d %03d) (%03d)\n"
	, current[0*3+0], current[0*3+1], current[0*3+2]
	, preferred[0*3+0], preferred[0*3+1], preferred[0*3+2], index[0]
	, current[1*3+0], current[1*3+1], current[1*3+2]
	, preferred[1*3+0], preferred[1*3+1], preferred[1*3+2], index[1]
	, current[2*3+0], current[2*3+1], current[2*3+2]
	, preferred[2*3+0], preferred[2*3+1], preferred[2*3+2], index[2]
	, current[3*3+0], current[3*3+1], current[3*3+2]
	, preferred[3*3+0], preferred[3*3+1], preferred[3*3+2], index[3]
	, current[4*3+0], current[4*3+1], current[4*3+2]
	, preferred[4*3+0], preferred[4*3+1], preferred[4*3+2], index[4]
	);
}

void test_rgb2hls(int *col)
{
	int h, l, s;

	RgbToHls(col[0], col[1], col[2], &h, &l, &s);
	Qtext("RGB (%03d %03d %03d) is equivalent to HLS (%03d %03d %03d)."
	, 	col[0], col[1], col[2]
	,	h, l, s);
}

int blue[3] = {100, 100, 255};
int green[3] = {255, 100, 100};

void test_colorutl()
{
	test_ColorDifference(blue, green);
	test_ClosestColor(blue);
	test_MenuColors();
	test_rgb2hls(blue);
}

void main()
{
//	debug_ClosestColor();	
	if (Qquestion(
	"Would you like to test the functions contained in colorutl.poe?"))
		test_colorutl();
}



