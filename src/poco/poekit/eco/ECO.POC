#pragma poco library "eco.poe"

void help()
/* Print out keys you can use inside simulation */
{
Qtext("The Eco-simulation is controlled by keys:\n"
	  "   f - make Food Fountain\n"
	  "   g - make wider Food Fountain\n"
	  "   p - make Purple creature\n"
	  "   h - make Harry, the predator\n"
	  "   d - Delete creature closest to mouse\n"
	  "   k - Kill all creatures (restart)\n"
	  "   q - Quit\n"
	  );
}

void how()
/* Give hints about how to play */
{
Qtext("The most interesting simulations involve several steps in the "
	  "food chain and some evolving creatures.  Try creating 4 or 5 "
	  "fountains, and purple creatures. "
	  );
Qtext("For an even more interesting simulation, try introducing some "
	  "'harry' predators (hit 'h') when the other creatures have become "
	  "established.  See if you can keep the simulation going with "
	  "the harrys.  It's easier in hi-res.  Sometimes you'll see "
	  "the harrys reproduce rapidly,  eat up all the prey, and then "
	  "starve to death.  What can you do to prevent this?"
	  );
}

void history()
/* Wax long about how this program came to be. */
{
Qtext("The Eco-simulation was first written in the Pogo simulation "
	  "language,  an experiment which taught us at Dancing Flame "
	  "enough about compilers and interpreters to add Poco to "
	  "AniPro.  This version is mostly in C and assembler because, "
	  "well, interpreted langauges are fun but they're slow."
	  );
}

main()
{
int choice;
static char *echo_choices[] = {
	"Play Simulation",
	"Keyboard Help",
	"How to Play",
	"Eco History",
	"Exit",
	};
for (;;)
	{
	choice = Qmenu(echo_choices, Array_els(echo_choices),
		"Eco Simulation");
	if (choice <= 0)
		break;
	switch (choice)
		{
		case 1:
			eco_main();
			break;
		case 2:
			help();
			break;
		case 3:
			how();
			break;
		case 4:
			history();
			break;
		}
	}
}
