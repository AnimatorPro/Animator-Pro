*************************************

a3d.c - This file contains most of the code for the optics section. */

*************************************

a3ddat.c - This file contains the data structures for the optics panel.
   Also some functions for enabling/disabling buttons and rearranging
   the optics panel for example to bring up the reduce/enlarge sliders
   when you press the size button */

/* Gak this is next to completely gnarly.  There's I'm not sure,
   3 or 4 levels to the menu tree.  The main branches are
   			1. Mouse control area on left.
				Size specific controls (x y xy proportional)
				Everyone else's controls (x y z yz zx xy)

			2. The 'major' mode strip - whether it's turn/size/move/path
     			Just 4 radio buttons in the center.

			3. The subpanel area - which changes depending which
			   major mode you are in.

   The subpanel area is where it gets really complicated:  

   In the case of 'turn' and 'size' the left part of the subpanel
   contains radio buttons which select a subsubpanel to the right.
   What I did to minimize as best I could the number of buttons
   serving only as hierarchical place holders is too complex for
   me to remember any more.  Lets hope no-one wants us to add
   'just one more feature' that would require re-laying this out.

   In the case of 'move'  you go straight to an x/y/z slider set 
   covering the entire subpanel.  

   The path sub panel also isn't too bad.  At least the menus
   aren't alway spontaniously re-arranging themselves.

   Oh well.  Someday I'll figure out a simpler way to do this,
   or maybe just give up doing these paint-box like interfaces
   when they go beyond simple columns of text.
   */


*************************************

a3dpull.c - pull-down system for optics */

*************************************

alt.c - A few functions for the alt screen */

*************************************

arctan.c - a relatively fast table based method for finding out an
   angle given the x,y coordinates of a ray at that angle */

*************************************

auto.c - This file contains the basic methods for doing an operation
   over multiple frames.  The key function is doauto(rvec).  Rvec is
   a function which is called with three parameters:
   		the first is which of the multiple frames it dealing with
		the second is how many frames total there are to deal with
		the last is a scaled percentage indicating how far along
		    in the sequence of frames it is.  (0 for first frame,
			SCALE_ONE (or 1<<14 literally) for the last frame.)
   Rvec is expected to do some transformation on the screen *render_form.
   Rvec also has access to the screen uf (the undo buffer) which will
   start out as a copy of render form.  

   Basically rvec just draws on the screen as if it were doing it to
   a single frame,  using the scale parameter to figure out where
   to draw if it wants to move something.

   Also included in this file are some of the simpler functions that
   call do_auto and their associated rvec functions.  By convention
   a rvec function name ends with '1' - eg expand1.

   dopreview(rvec) is much like doauto.  (At least rvec is the same.)
   Instead of actually changing the flic it just does rvec and throws
   away the result.
   */

*************************************

autoseg.c - apply a graphics transformation to time segment.  See also
   auto.c, especially function 'dall(rvec)' */

*************************************

backwards.c - This is what we got to do to save a flic backwards. */

*************************************

bfile.c - Jim Kent's very owned buffered file i/o.  Much like
   C fopen(), fclose(), etc in result.  Maybe faster, but certainly
   works better with my memory management routines.

   Some quirks:
   		bopen(char *name, Bfile *bf) 
			this always opens a file to read.  You pass it the Bfile
			cause, I donno... seems cleaner.
		bcreate(char *name, Bfile *bf)
			Creates a file to write. 
*/

*************************************

blue.c - Stuff to implement much of the trace drop down */

*************************************

browse.c - Stuff for browse flics.  Shares code with normal file menu
   in filemenu.c in a semi-gnarly fashion.  Wants pstamp.c for
   doing the actual read and shrink of the first frame of a fli. */

*************************************

brush.c - some data statements for 16x16 pixel brushes */

*************************************

cel.c - Stuff to do the basic things you need to do to a cel (ie a
   rectangular image with a color map.  Vcels and Vscreens (aka
   screens) are almost the same structure.  You can use all the cel
   routines on a screen as well.  There's some interactive cel positioning
   and pasting routines here too.  Also some of the other easy stuff on
   the Cel drop-down */

*************************************

cfont.c - Stuff to load and free up the 'user' (as opposed to built 
	in system) font */

*************************************

choices.c - build up simple list of selections type menus out of
   a list of strings.  */

*************************************

circle.c - Simple stepping draw a circle algorithm.  
	Don't even correct aspect ratio. */

*************************************

cleanup.c - stuff to install and take out interrupt drivers.  Code
   to exit cleanly from vpaint.  Emm support such as it is (will use
   64K, can't be bothered switching banks on the fly.) */

*************************************

cline.c - just your basic stepping line algorithm */

*************************************

Cluster.c - most of the routines dealing with color cluster one
   way or another.  Some connections to palet2.c and cpack.c */

*************************************

comprs.c - LZW compression code for GIF */

/*----------------------------------------------------------------------*/
/* Copyright (c) 1987							*/
/* by CompuServe Inc., Columbus, Ohio.  All Rights Reserved		*/
/*----------------------------------------------------------------------*/

/*
 * ABSTRACT:
 *	The compression algorithm builds a string translation table that maps
 *	substrings from the input string into fixed-length codes.  These codes
 *	are used by the expansion algorithm to rebuild the compressor's table
 *	and reconstruct the original data stream.  In it's simplest form, the
 *	algorithm can be stated as:
 *
 *		"if <w>k is in the table, then <w> is in the table"
 *
 *	<w> is a code which represents a string in the table.  When a new
 *	character k is read in, the table is searched for <w>k.  If this
 *	combination is found, <w> is set to the code for that combination
 *	and the next character is read in.  Otherwise, this combination is
 *	added to the table, the code <w> is written to the output stream and
 *	<w> is set to k.
 *
 *	The expansion algorithm builds an identical table by parsing each
 *	received code into a prefix string and suffix character.  The suffix
 *	character is pushed onto the stack and the prefix string translated
 *	again until it is a single character.  This completes the expansion.
 *	The expanded code is then output by popping the stack and a new entry
 *	is made in the table.
 *
 *	The algorithm used here has one additional feature.  The output codes
 *	are variable length.  They start at a specified number of bits.  Once
 *	the number of codes exceeds the current code size, the number of bits
 *	in the code is incremented.  When the table is completely full, a
 *	clear code is transmitted for the expander and the table is reset.
 *	This program uses a maximum code size of 12 bits for a total of 4096
 *	codes.
 *
 *	The expander realizes that the code size is changing when it's table
 *	size reaches the maximum for the current code size.  At this point,
 *	the code size in increased.  Remember that the expander's table is
 *	identical to the compressor's table at any point in the original data
 *	stream.
 *
 *	The compressed data stream is structured as follows:
 *		first byte denoting the minimum code size
 *		one or more counted byte strings. The first byte contains the
 *		length of the string. A null string denotes "end of data"
 *
 *	This format permits a compressed data stream to be embedded within a
 *	non-compressed context.
 *
 * AUTHOR: Steve Wilhite
 *
 * REVISION HISTORY:
 *   Speed tweaked a bit by Jim Kent 8/29/88
 *
 */

*************************************

config.c - These routines manipulate the file v.cfg and act on the
   data contained there.  Configuration - state stuff that is semi-permanent
   in nature.  What input device to use, where to put temp files, what
   directory your fonts are in, what comm port to use for the serial
   summa tablet, whether it's safe to speed up the clock interrupt.
   */

*************************************

cpack.c - routine to compress an arbitrary # of colors to an
   arbitrary smaller number of colors.  Works pretty cool except
   if you have duplicate colors in the source it sometimes hangs.
   (So filter out duplicate colors before calling pack_cmap... ) */

*************************************

csort.c - High level routines for sort by luminance, colormap squeeze,
   color arrange by spectrums or gradients.  Lo level routine for
   the sort. */

*************************************

cthread.c - a rather clever little algorithm to rearrange your palette
   in such a way that it's likely to have a lot of smooth spectrums
   suitable for gradient fills and generally nicer to look at than
   your typical mess of a digitized palette. */

*************************************

cursorda.c - my collection of icons, some of them going back to 
   the Aegis Animator.  Not used for cursors any more.  (Cursors
   are fixed size and found in brush.c) */

*************************************

debug.c - not normally linked.  Handy hex dump to file routine.
   Whoopie what a marvel! */

DECODE.C - An LZW decoder for GIF
 * Copyright (C) 1987, by Steven A. Bennett
 *
 * Permission is given by the author to freely redistribute and include
 * this code in any program as long as this credit is given where due.
 *
 * In accordance with the above, I want to credit Steve Wilhite who wrote
 * the code which this is heavily inspired by...
 *
 * GIF and 'Graphics Interchange Format' are trademarks (tm) of
 * Compuserve, Incorporated, an H&R Block Company.
 *
 * Release Notes: This file contains a decoder routine for GIF images
 * which is similar, structurally, to the original routine by Steve Wilhite.
 * It is, however, somewhat noticably faster in most cases.
 *
 */

*************************************

diskerr.c - Just make it so dos don't put up that abort/retry/fail
   message on my pretty screen.  Automatically fail.  I'll cope
   elsewhere from there.  Actually this is about the only Turbo C specific
   library routine I'm using.  Still yet another good reason not
   to switch to Microsoft! */

*************************************

dissolve.c - misc transition effects */

*************************************

Dosstuff.c - MS-DOS routines (also see jfile.c) to figure out
   about directories, how much disk space is left, etc. */

*************************************

Drawmode.c - This file contains the data structures and routines for the
   ink types menu.  The ink types menu 'parasites' off of the draw tools menu
   in options.c.   That is I wrote options.c first and then hacked it
   about so most of the code in the draw tools and ink types menus could
   be shared.  */

*************************************

Ellipse.c - draw an ellipse possibly with tilted axis's.  The jaggies
   on this one are still kind of ugly.  Keep promising myself to improve
   it someday.
   */

*************************************

fccomp.c -  code used to delta compress colors. */

*************************************

Feelmenu.c - input handling routines for Flicmenus.
   Individual feelme's and a few routines to process whole menus. */

*************************************

filedata.c - data structures for the file requestor.  (The normal one
   not the visual browse.) The code part of this is mostly in filemenu.c */

*************************************

Filemenu.c - code to interpret the buttons in filedata.c.  Stuff to
   implement the normal file requestor, and some helper routines for
   the visual browser in browse.c */

*************************************

Files.c - Let user choose whether to load/save/delete any of our 12
   basic file types. */

*************************************

findfree.c - Find space in the temp-file to put a frame.  Expand file
   if necessary.  Works on temp_flx - our basic indexed frame/state file. */

*************************************

Fli.c - this file should probably be broken into a few sections.  It has
   the low level routines to uncompress and play-back a FLI flic.  It also
   has a few simple time-oriented utility routines.  Stuff for stepping
   back and forth a single frame.  */

*************************************

Flood.c - a little flood fill routine.  Nearly portable! A horizontal
   segment/FIFO oriented flood fill.
   */

*************************************

freem.c - 
	This module contains routines to pop you into and out of a state which
    maximizes free memory by swapping everything possible out to disk.
    It includes two routines - 
   		push_pics() - writes buffers to disk
		pop_pics() - restores ram buffers
	These nest.  Only when the nesting count transitions between 0 and 1 is
	anything actually performed */

*************************************

gel.c - Stuff to do the gel tool.  Basiccally concentric transparent
  circles with the wider ones thinner. */

*************************************

geometry.c - no comment for file

*************************************

gfx.c - low level PC - VGA graphics routines.  Some fixed point
   arithmetic helpers too. */

*************************************

gif.c - High level gif routines.  Take care of the file packaging but
   not the compression/decompression.  */

*************************************

Globals.c - all the really pervasive global variables. */

*************************************

grid.c - Stuff to implement functions in extras/grid...
   'Snap' input to fall on intersections of a user definable
   grid.  Routines to see and paste the grid too. */

*************************************

hlstorgb.c - Routines to convert between rgb and hls representation
   of colors.  RGB coordinates are assumed 0 - 63 (VGA style).  HLS
   coordinates are 0-255. */

*************************************

init.c - Stuff done once only during program start-up.  Entry-point
   and only global - init_sys.c.   Crosslinks with cleanup.c */

*************************************

initcmap.c - Has the RGB data for my favorite startup palette - 
   a 32 level grey scale and a bunch of rainbows.  Below this is
   the code to insure the menus are drawn in visible colors.  (find_colors()
   and related routines.).   When menus are on-screen if necessary
   the last five  color registers are co-opted for menu colors.  It'd
   be nice to make this a bit less obtrusive than it is for the artist.
   Most simply squeeze the picture down to < 250 colors. */

input.c  -  This is the messy mouse section.  Responsible for updating
   the values in
   	key_in, key_hit, mouse_button, grid_x, grid_y, uzx, uzy,
   are updated every time c_input is called.  Macros are taken
   care of here by calling the appropriate routines in macro.c.
   The mouse coordinates are kept in both zoomed (for the paint tools:
   grid_x, grid_y) and unzoomed (for the menus: uzx, uzy) form.
   */

*************************************

jfile.c - ask MS-DOS to read,write, and seek without any buffering.
   Arguments are MS-DOS file handle (int), file-name (char *), 
   buffer space pointers (32 bit large model pointers), and
   byte counts/offsets (32 bit long integers).
   */

*************************************

lccomp.c - Some C code that mixes with the assembler code in
   comp.asm and skip.asm to make up compressed pixel packets suitable
   for incorporation into a FLI file.  See also writefli.c */

*************************************

macro.c - Stuff to help record user input (usually first into a temp file)
   and then play it back without c_input() routine suspecting too much. */


*************************************

main.c -  Make sure system initializes ok, and then flop up the menuing
  system. */

*************************************

mainpull.c - The data structures for the top level drop-down menus up
   along the top.  Also a routine to disable menu options we cant' deal
   with yet. */

*************************************

marqi.c - routines to make creepy dotted lines around selected areas. */
/* Also some "Dotout" family functions that take x/y parameters and act
   on render_form.  Dotout's are used by line drawers, circle drawers etc. */

*************************************

mask.c - Routines to maintain and select our screen-sized bitplane
   used mostly for write-protecting pixels.  */

*************************************

memory.c - Heap maintainer.  Gets memory straight from ms-dos.  Has
   problems with some Turbo C library routines (like fwrite...).  Does
   handle allocations greater than 64K, and does some simple error checking
   during free. */


*************************************

multimen.c - Data structures and code associated with the "Time Select"
   menu that gets called by almost anything that does something over
   move than one frame.  Basic argument to this module is an "auto-vec"
   which will produce a transformed render_form given the original
   render form and an up-to-date uf.  (undo buffer).  This guy lets
   you select the part of your FLIC you want to transform, specify
   ease in/ease out, go visit the palette editor, do a pixel perfect
   (but slow) preview, and finally actually call do_auto with the 
   auto-vec. */

*************************************

names.c - simple string and list management utility routines */

*************************************

onepal.c - A routine to force all the frames of a FLIC to a reasonable
   intermediate palette that is the same for all frames */

*************************************

options.c - module to handle the draw tools menu.  Also by inadvisable
   kludging handles most of the ink types menu as well. */

*************************************

overlay.c - handle requests off the "composite..." menu.  Stuff to
   mix two FLICS onto the same screen and eventually same file.  */

*************************************

palet2.c - The main bits of code for the palette editor.  Also a lot
   of related code in cluster.c and palpull.c.  This file starts with
   the Flicmenu button declarations for the palette editor control panel. */

*************************************

palpull.c - Data structures for the drop-downs used in the palette editor.
	Also code for disabling the bit of the drop downs that user can't use
	currently.  Has the big switch that decides what to do on palette
	drop-down selection too. -- generated with makepull */

*************************************

pentools.c - routines that recieve input when the cursor is over the
   drawing screen (and not in a sub-menu).  */

*************************************

polytool.c - Stuff to rubberband and render polygons, splines, and other
   point-listy vectory objects.  Most of this works on a global poly -
   the working_poly.  There are routines to load and save a poly file
   to/from working_poly here.  Also routines to move individual points
   in a polygon.  */

*************************************

pstamp.c - routine to read the first frame of a FLIC into a buffer
   1/5 the size of a screen.  (4 out of 5 lines are discarded here).
   Then do an x dimension shrink by 5 and put result on screen somewhere.
   */

*************************************

pull.c - drop-down menu interpreter.  Could tighten this up and
   downsize the Pull structure if wanted to spend a week saving 4K
	sometime.    Arrghh.  It's not too bad considering it's been
	through 3 "windowing" systems since it was first written. */

*************************************

qnumber.c - This module is for popping up little requestor to 
	get a single number or a single string */

*************************************

quickdat.c - the data structures for the main control panel.  6 tools,
   6 inks, etc.   Also some code at end for some of the buttons feelme
   and seeme's.  
   */

*************************************

random.c - quick and dirty 12 bit random number generator */

*************************************

render.c - Routines to draw on screen, possibly behind menus, in
   current ink.  Most of them eventually funnel through render_dot, but
   the blits for speed and other reasons are implemented separately. */

*************************************

rfont.c - Raster Font stuff, draws text based on a blit and a font
   in a format that some day may approach Ventura Publisher, but currently
   looks much more like GEM on the ST with some Mac-like mutations.
   Also data for the Aegis Animator font with proportional stuff stripped.
   (This font is just a handy example of the format, unused itself.)

   There are 2 big routines - systext() - for all text rendered by
   menuing system -  and gftext() for text rendered onto user image. */

*************************************

rotate.c - Stuff to implement cel/turn.  Real rotation work is
   done elsewhere in assembler.  This is an interface to the
   'persp' code also used by stretch and optics. */

*************************************

savefli.c - Make a FLIC file from temp file (temp.flx) on scratch
   device.  This thing just takes out the indexing.  Doesn't actually
   have to recompress any images.  (That's done in writefli.c). */

*************************************

savepic.c - Figure out whether it's GIF or uncompressed image.  
	Then load/save if uncompressed.  If GIF bail out to gif.c.  */

*************************************

scanedge.c - a routine to draw a filled polygon with arbatrary
   edge crossings.  Allocates a bit-plane big enough to hold
   rasterized polygon, and then does and xorline/scanedge routine
   that's similar to what drives the Amiga's blitter.  */

*************************************

screen.c - Routines to maintain a Screen type structure.  Assures
   the pixel data begins on an even paragraph.  */

*************************************

scroller.c - display scrolling name list in file selector, and help out
   browse menu a bit too.  Other scroller users are the draw tools and
   ink types menus.  */

*************************************

seeme.c - Visual part of Flicmenu interpreter.  Lots of
   "seeme" routines suitable for stuffing into Flicmenu structures.
   Recursive button display stuff is in seemenu.c. */

*************************************

seemenu.c - Visual part of Flicmenu interpreter.  Lots of
   "seeme" routines suitable for stuffing into Flicmenu structures.
   Recursive button display stuff is in here.  Other simple seeme's
   are in seeme.c */

*************************************

selbrush.c - Menu that has the brush size slider and not much else */

*************************************

sep.c - stuff to implement the color separation functions. Also the
   edge tool from the looks of it. */

*************************************

sintab.c - 2.14 signed fixed point (1 sign bit, 1 bit left of
   decimal, 14 to right actually) trig table and some associated
   2.14 math routines. */

*************************************

sixhi.c - the data for the compiled-in Vpaint font. */

*************************************

slider.c - functions to implement our famous "number on the knob"
   slider gadgets */

*************************************

spiral.c - help draw a spiral */

*************************************

splice.c - help join two animations together end to end perhaps
   with some transition effect */

*************************************

spline.c - hermitian splines with tension/continuity/bias.  Always go
   through their control points. */

/* Spline demonstration  */
/* by Tom Hudson 9/30/88 */
/* Tweaked into fixed point by Jim Kent */

*************************************

sqrroot.c - use a bit-wise algorithm Robert Leyland certainly must
   understand better than I. */

/*
** Sqr_root() - Return the integer square root the the long integer i
*/

*************************************

status.c - display continue alert box with program info */

*************************************

stretch.c - user interface for cel/stretch function.  Eventually will
   call the same raster twisting routine in assemble rotate.c and
   a3d.c (optics) use. */

*************************************

stringq.c - Implement a button that lets user edit a single line
   of text */

*************************************

summa.c - Fetch umouse_x, mouse_buttons etc from summa graphics
   12x12 Summa Sketch tablet.  Basically got to yammer out the
   serial port at it.  */

*************************************

tempflx.c - stuff that helps manage our main scratch file. */

*************************************

textbox.c - Stuff for continue alerts and yes/no dialogs. */

*************************************

textedit.c - This file tries to be a what-you-see is what you get
   text editor with dynamic word-wrap on a possibly proportial spaced
   font - an editor open on an arbitrarily sized window.  Heck, it
   works most of the time!  See also textwind.c wordwrap.c and rfont.c */

*************************************

textwind.c - A file with utility text-window oriented routines used
  by textedit.c. */

thikline. - one of the more horrifying modules at the time of writing.
   The idea is simply to draw a line wider than one pixel thick.  I used
   to do this by 'dragging a brush', but this gets less and less efficient
   as the brush size gets larger.  Instead we make up a 4 sided polygon 
   and polyfill it.  Figuring out exactly the values for these endpoints is
   the fun part.  I never could get the arithmetic to round correctly in
   some of the smaller cases (especially 4 and 8), so I'm using a table
   instead (ptps[]).  You figure out what angle the line is and use it as
   an index into this table to get the offsets of 2 points in the 4-gon
   from a vertex.  After that it's not so bad... */

*************************************

time.c - stuff to insert and delete frames in a FLIC.  Used mostly
   by timemenu.c. */

*************************************

timemenu.c - The data structures and some associated code for the
   Frames control panel. */

*************************************

title.c - The data structures and associated routines for the Titling
   control panel. */

*************************************

truecolo.c - stuff to help me pretend that my pixels are RGB values
   and not an index into the color map.  */

*************************************

tseg.c - data structures and associated code to implement "Time Segment
   selector" */

*************************************

tween.c - stuff to handle what happens when use pushes 'tween' under
   the poly submenu inside the draw tools menu.   Given two polygons
   generate  polygons that are interpolated beTWEEN them. */

*************************************

vpaint.c - handle high level user button pushes.  Main pull-down
   interpreter switch and main keyboard interpreter switch.  Implementations
   of many of routines called by above.  The first layer under main(). */

*************************************

vpsubs.c - routines used by all sort of menu panels.  Really a mismatch.
   Not well suited to being in an overlay. */

*************************************

window.c - Direct pixel output around menus and behind Zoom screen.
   This is what makes rendering a solid box slow in Vpaint... */

*************************************

wordwrap.c - given a proportional font and a window of a certain size,
   figure out how many words we can fit in a line.  Help titling system
   justify the text. */

*************************************

writefli.c - stuff to generate frames compressed from two adjacent frames. */

*************************************

zoom.c - help simulate fat-bits.  Position zoom window on screen. */
