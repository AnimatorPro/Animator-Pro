
This is a description of some of the conventions used throughout the
vpaint code.





Tabs are set to be 4 spaces.  Lines will fit within 80 columns if
your tabs are set correctly.


Indentation is a little unusual but very consistent.  Each block of
code is indented one tab from its parent.   The curly braces are
indented at the same level as the code they contain.  eg:
	if (happy)
		{
		puts("I'm a happy program.");
		puts("I found the mouse.");
		puts("And I got a byte a pixel.");
		}


Variable names are on the long size.  Don't even try to port this
to a compiler with less than 16 significant characters in global symbols.


The use of underbars between words in a symbol name is erratic.  Aaarrgghh!
(ButAtLeastItsNotLikeModula)


The first letter of a typedef is capitalized.  eg:
	typedef struct namelist Namelist;


Unused (but potentially useful code) is surrounded by
#ifdef SLUFFED
    ...
#endif SLUFFED


A WORD is 16 bits.


Structures are never passed to subroutines.  Pointers to structures
are though!


I'm just beginning to do structure assignments.  (Used to crash
Aztec until about a year ago.)


If a structure is a linked list, the first element of the structure
will be a pointer to the next member of the linked list.  This
way I can use my general purpose linked list routines on everyone.


No routine should use more than about 300 bytes of stack space.  If it wants
more local storage it has to begmem() it.


When a routine could fail (due to not having enough memory or not
being able to open a file etc.) it will return 1 on success and 0
on failure.   This extends to the file oriented functions too.
(MS-DOS and UNIX normal conventions on file functions is -1 on failure.)
If the routine returns a dynamically allocated structure it will
simply return NULL on failure.


ALL input must go eventually through c_input() or the macros won't work.


The cursor is only on screen while waiting for input.  This way the
bulk of the code doesn't have to worry about over-writing the cursor.


Any routine that could be executed in zoom mode (ie not bracketed by
an unzoom/rezoom pair)  that changes the screen has to update the
zoom display.  A lot of times this will happen automatically as
the plot-a-dot calls wind their way to window.c.  The cleanest way
to do it would be to hang the zoom update right with the cursor
update in the input routines.  Sadly the VGA is too slow to do a
full-screen zoom so could not do this.


Routines called by a keyboard command or a drop-down selection expect the
menus to be erased from the screen before they are called.   This again
is to make life easier.  Sadly the palette routines are an exception.
They expect the menus to be up.


Routines called in response to a 'panel' menu button being selected (feelme's)
expect the menus to be on-screen.   They get control as soon as the
mouse button is pressed over them.

Size data on buttons for flic_menu type menus (most of 'em) are off
by one.  A button 10 pixels wide will say it is 9 pixels wide.  This
is just a stupid thing that has persisted in my menuing code for 3 years
or so because I'm too lazy to change it. 

All routines are expected to cope with not being able to find free heap
space.



Errors are reported on the spot.   The only error code returned is 0
for failure.  (A few exceptions in the GIF code I didn't write).


#if directives to the preprocessor are avoided because some of my
nifty code massaging utilities (mostly sluff - the unused code finder)
can't cope with them.

#ifndef SLUFF  can go around a section of code vpaint needs but sluff
can't cope with.


blocks of code are 'commented out' (usually temporarily) with #ifdefs.
#ifdef NEVER
   ...
#endif NEVER


Any global that's not a pointer should try to make it's way into
the vs (vsettings) structure.  (So can save state so can start up program in
same place it left off.)


Dynamically sized buffers that are needed between calls to the set of
functions that use them should be kept in a temp file on
ram-disk whenever possibly possible.  If not possible (like would be
waaaayy tooo sllooowww dude) they must have a push_xxx()  and  
pop_xxx()  routine in freem.c  (free-up-memory.c) so they can be
swapped out by the recompressor and other bits of the program
that are true memory hogs.  Even if they are small they need this
just to avoid memory fragmentation.






