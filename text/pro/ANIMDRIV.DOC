think functions would be:

*pdat, is anything they want to have data for things like a file pointer
but their internal structure. We'd just keep it and pass it in to their
code with driver pointer. or we could specify that it have a pointer to the 
driver in it and not need a pointer to driver on any but open() and create()
calls like the raster.
 

create_image_file(pdr *pd, char *name, void *pdat)
save_first_frame(pdat *pd, screen)
save_next_frame(pdat, last screen, this screen)
save_ring_frame(pdat, first screen, last screen)
close_image_file(pdat)

open_image_file(pdr *pd, char *name, void *pdat)
read_first_frame(pdat *screen)
read_delta_next(pdat *last_screen, (to be altered))
read_delta_ring(pdat *last screen, (to be altered))

data in picinfo:

width, height, x, y, depth, frame_count, has_ring_frame, frames_per_sec;

data in picdriver header

functions and, Max_write_frames. (maximum that can be written out)
1 for a single picture. XX for animation.
a flag needs_ring_frame (means we need to ring this file type).


Since we need to to do this for the converter I think it would be a good idea
I'd say 4 days to get pj to use it for fli loading and picture loading and
modify all picture driver code for changes.  It would mean that any driver
we make for the converter could be used to load flis in pj? we could check
the drivers to see if they load multi frames and load accordingly a driver 
might load an animation type but only first frame for loading pics. we could
prompt on loading ( and recompressing ) a fli if they want all the frames
"Wanna? it takes a while." or give them a qslider allowing them to truncate
the input file to any number of frames.  We would just have the load side in pj for animations? and bag the save side? or could have both but other formats would be real slow.

