
-------------------------------------------------------------------------------
NOTES ON POE LOADABLE LIBRARIES
-------------------------------------------------------------------------------
A POE loadable library is a piece of compiled 80386 code which contains
extra library functions for Poco.   If you look in your resource directory
you'll find a couple of POE loadable libraries including PSTAMP.POE, 
PDRACCESS.POE , and LOOKUP.POE.    LOOKUP.POE is used by the Poco help
facility (available by pressing F1 when inside the Poco editor),  but generally
is not useful to a Poco programmer.  The other two POE libraries are described
below.

To use a POE library you must include a line of the form
	#pragma poco library "xxx.poe"
in your poco source file.   We suggest you put these pragma lines near the
top of your source file,  before any includes.   After this you can use
a POE loadable library function just as if it were one of your own functions,
or part of one of the permanent libraries.

-------------------------------------------------------------------------------
Brand New PSTAMP LOADABLE LIBRARY
-------------------------------------------------------------------------------

To use this library put the line:
	#pragma poco library "pstamp.poe"
near the top of your source file.

          The PSTAMP POE module provides 3 related functions for
          shrinking the image on an arbitrary screen to a postage
          stamp sized image on another screen.  Two of the
          functions provide housekeeping functions to initialize
          and finalize the output screen.  The other function
          performs the actual image reduction work.

          This module was originally written to provide a
          performance boost to FLISUMRY.POC, a Poco program which
          summarizes an entire flic into a series of postage stamp
          images on a single frame or two.  Since there may be
          other good uses for a function that downscales images
          quickly, the interface to the workhorse scaling function
          was kept fairly general.

          PSTAMP uses a six-cube color palette to provide
          independence from the palette(s) of the input images. 
          The six-cube palette takes advantage of the fact that a
          reduced-size image can get away with a reduced-accuracy
          color palette while still conveying the basic information
          of the original.  A variety of input images with vastly
          different color palettes can be quickly rendered as
          postage stamp images on a single output screen.  The
          six-cube palette sacrifices some color accuracy instead
          of using the extremely time-consuming method of reducing
          all the input palettes to a single 'best fit' output
          palette.

          Any type of Animator Pro screen can be used for the input
          and output screens.  This includes the current frame of
          the flic (the picscreen), the swapscreen, the celscreen,
          or a virtual or ram-based screen created by another POE
          module.

          The source code for PSTAMP.POE is included in POEKIT.


     void InitPstampScreen(Screen *s)

          This function prepares a screen to receive postage stamp
          images.  A screen must be initialized with this function
          before it is used as the destination of a MakePstamp()
          operation.  This function creates the six-cube color
          palette and loads it into the screen's color map, and
          clears the screen to color index zero.

     Input:

          A pointer to a screen.  From Poco, this is a Screen*
          type.  From another POE module, this is any type of Rcel.


     void CleanupPstampScreen(Screen *s)

          This function releases system resources acquired by the
          InitPstampScreen() function, and indicates that you are
          done drawing postage stamp images to the screen.  You
          must call this when you are done rendering postage stamps
          on a given screen.  When the screen is the current flic
          frame (the picscreen), you must call this before moving
          to another frame in the flic.  (It is this function that
          signals to Animator Pro that the contents of the
          picscreen have been modified, and the frame needs to be
          recompressed.)

     Input:

          A pointer to a screen; the same pointer that was passed
          to the InitPstampScreen() function.


     void MakePstamp(Screen *source, Screen *dest,
                int dx, int dy, int dw, int dh, 
                Boolean draw_border)


          This function reduces the image stored in the source
          screen to a smaller image on the dest screen.  

          The entire input screen is processed; there is no way to
          specify a subset of the input screen for processing.  You
          can, of course, clip a portion of an image into the
          celscreen and then use that as input to this function. 
          Other POE modules, which have access to GFX library
          functions, may build a virtual raster over the input
          screen, and use the virtual raster as the source
          parameter to this function.  Poco programs don't have
          direct access to virtual rasters.

          The reduced size output image is placed on the dest
          screen as specified in the dx, dy, dw, and dh parameters.
           The dest screen can be of any size and type, and need
          not be the same size or type as the source screen.  

          If the draw_border parameter is non-zero (TRUE), a border
          box is drawn around the postage stamp image.  By default,
          the border box is a medium blue color.  It is drawn with
          color index 255; that index is not used by the
          six-cubecolor space.  You can change the color of palette
          slot 255 to any value you want without disturbing the
          postage stamp images.  (Change the palette after calling
          InitPstampScreen(), but before CleanupPstampScreen().)

          It is not possible to expand an image with this function.
           If the dw or dh parameters are larger than the source
          screen's width or height, the scaling is forced to 1:1
          internally for that axis.  If both dw and dh are greater
          than or equal to the source screen sizes, the net effect
          is that the image will be rendered at 1:1 scaling in a
          six-cube color space.  It is unlikely that this will
          produce desirable results.

          It is possible (but generally not useful) to change the
          aspect ratio of an image as it is scaled.  It is your
          responsibility to ensure that the aspect ratio is
          maintained by providing dw and dh values that are
          properly proportional to the source screen's width and
          height.  (That is, if the width is being reduced by a
          factor of 3, make sure the height parameter also reflects
          a 3:1 reduction.)

          The smallest legal dw, dh values are 10, 10.  (A picture
          rendered smaller than 10x10 on the destination screen is
          not likely to carry useable detail, after all.)  In
          general, the smaller the output postage stamp, the faster
          the rendering.  (A 1:1 reduction is the slowest, a 5:1
          (or more) reduction screams right along.)

     Input:

          The source parameter is a pointer to the input screen. 
          The dest parameter is a pointer to the output screen. 
          The dx and dy parameters specify the x,y location of the
          upper left corner of the postage stamp image on the




          output screen.  The dw and dh parameters specify the
          width and height of the postage stamp image on the output
          screen.  The draw_border parameter, when non-zero, causes
          a bordering box to be drawn around the dx, dy, dw, dh
          coordinates of the output screen.


-------------------------------------------------------------------------------
Brand New PDRACCES LOADABLE LIBRARY
-------------------------------------------------------------------------------


          The PDRACCES POE module provides a set of functions for
          accessing the full capabilities of a picture driver (PDR)
          module.  This gives you more control over loading and 
		  saving pictures than LoadPic() and SavePic() provide.
		  Animator Pro has direct support for the basic
          PDR operations.  The ANICONV image conversion program
          contains support for extended PDR operations, including
          RGB input, and prompting of the user for output options. 
          The PDRACCES POE module provides access to the extended
          PDR operations from within Animator Pro.


          PDRACCES contains a built in table which maps file types
          to the PDR that handles that type.  (The file type is
          based on the name of the file.)  When you use the
          PicSave() and PicLoad() functions, PDRACCES automatically
          searches this table and loads the appropriate PDR module
          (unless a PDR was pre-loaded with PicDriverLoad()).  The
          following table shows the built in relationships between
          filetypes and PDR modules:

              File Type    Picture Driver
               .GIF           GIF.PDR
               .PCX           PCX.PDR
               .TIF           TIFF.PDR
               .TGA           TARGA.PDR
               .LBM           LBM.PDR
               .RIF           RIF.PDR
               .MAC           MAC.PDR
               .NEO           NEO.PDR
               .PI? .PC?      DEGAS.PDR
               .SLD           SLD.PDR
               .ANI           ANIM.PDR
               .PCT           PICT.PDR
               .BMP .RLE      BMP.PDR
               .MOV           MOV.PDR
               .RND           RND.PDR

          Two versions of this POE module exist.  PDRACCES is the
          full version, PDRDEMO is an abbreviated version that
          doesn't contain the RGB input support.  The source code
          for PDRDEMO is included in the POEKIT development
          package, but the RGB processing code is proprietary, and
          the full PDRACCES source code cannot be distributed.


     void PicDriverUnload(void)

          This function unloads the currently-loaded picture driver
          module (if any).  This function can be called any
          numberof times, even if a picture driver isn't currently
          loaded.


     Errcode PicDriverLoad(char *pdrname)





          This function loads the named picture driver module.  The
          picture driver is always loaded from the Ani Pro resource
          directory.  This means that the name specified by
          *pdrname must not contain any drive or path information.

          You may not need to use this function.  The PicSave() and
          PicLoad() functions attempt to find and load the proper
          PDR module (based on the filetype) automatically.  You
          can, however, pre-load a PDR module to sidestep the
          automatic search and force a given file format regardless
          of the filetype contained in the filename.

          You must use this function to work with a PDR not
          contained in the table (above) that maps filetypes to PDR
          names.

          If another PDR is already loaded when this function is
          called, it is unloaded automatically.

     Input:

          The pdrname parameter is a pointer to a string which
          names the PDR module to load.  The filetype (.PDR,
          generally) must appear in the name.

     Output:

          Success (0) if the PDR was loaded, or an appropriate
          negative Errcode value.

	 Example:
	 		PicDriverLoad("TIFF.PDR");


     Errcode PicDriverFindLoad(char *picpath)

          This function finds the PDR associated with the specified
          file and loads it.  This is analogous to the action taken
          automatically by the PicSave() and PicLoad() functions.

          This function can be useful if you anticipate loading or
          saving a series of pictures of the same type.  By
          pre-loading, you eliminate the overhead of loading and
          unloading the PDR on each PicSave() or PicLoad() call.

          If another PDR is already loaded when this function is
          called, it is unloaded automatically.

     Input:

          The picpath parameter is a pointer to a string,
          ostensibly a filename.  The filetype at the end of the
          string is used in the table lookup which associates
          filetypes with PDR modules.

     Output:

          Success (0) if the PDR was loaded, or an appropriate
          negative Errcode value.

	 Example:
	     Errcode PicDriverFindLoad("atari.neo")


     Boolean PicPdrHasOptions(void)

          This function determines whether the currently-loaded PDR
          module has output options.  Call this only when you know
          a PDR module is currently loaded.

     Output:

          TRUE if the currently-loaded PDR has output options,
          FALSE if it does not.  Your Poco program will abort if
          there is no currently-loaded PDR.


     long PicPdrOptionsPreset(Boolean do_dialog, long options)

          This function pre-sets the output options for the
          currently-loaded PDR.  

          PDR output options are specific to any given PDR module. 
          The PDR itself contains the dialogs used to get the
          options from the user.  Not all PDR modules support
          output options; the PicPdrHasOptions() function
          determines whether a given PDR supports output options.

          If the do_dialog parameter is TRUE, the output options
          dialogs are conducted, and the options are pre-set based
          on the user's selections.  The user's selections are also
          returned as four bytes (one per option) packed into a
          longword.  When the do_dialog parameter is TRUE, the
          options parameter is ignored.

          If the do_dialog parameter is FALSE, the PDR's output
          options are pre-set to the contents of the options
          parameter.  The options parameter contains four options
          values, one byte per value, packed into a longword.

          When a PDR supports output options, and the options have
          not been pre-set, the PicSave() function automatically
          conducts the options dialogs with the user.  If you
          wantto save a series of images using the same options,
          this function provides a method a specifying the options
          just once, rather than prompting the user for the options
          on each PicSave() call.  Use a sequence such as:

            -  call PicDriverLoad() or PicDriverFindLoad().
            -  call PicPdrHasOptions() to see if the PDR supports
               any output options.
            -  if the PDR has options, call
               PicPdrOptionsPreset(TRUE, 0).
            -  call PicSave() repeatedly.
            -  call PicDriverUnload() when done.

          You can also call this function with the do_dialog
          parameter TRUE and save the return value.  Then you can
          pass this return value later with a do_dialog parameter
          of FALSE to reestablish the same options without
          conducting the dialogs again.  This can be useful for
          gathering the user's options interactively and then
          writing a 'script' Poco program to run later in a
          non-interactive batch mode.

          When a new PDR is loaded, all pre-set PDR options are
          cleared.

     Input:
          The do_dialog parameter, when non-zero, indicates that
          the user is to be prompted for output options.  When
          zero, it indicates that the options parameter is to be
          used to pre-set the output options without user
          interaction.  The options parameter is a 32-bit value
          returned by a prior call to this function.

     Output:

          A longword which contains an encoded form of the options
          selected by the user.  If there is no currently-loaded
          PDR when this function is called, your Poco program will
          abort.


     long PicRgbOptionsPreset(Boolean do_dialog, long options)

          This function pre-sets the RGB input processing options. 

          Unlike PDR output options, which are specific to a given
          PDR module, the RGB input options dictate options taken
          by PDRACCES.POE when an RGB input file is encountered.
          They are applicable to all PDR modules which support RGB
          input, and the dialog presented to the user is always the
          same, regardless of the currently-loaded PDR.
          The RGB input options dictate how PDRACCES handles the
          conversion of RGB data to color-mapped format is done. 
          Currently, PDRACCES supports the following conversions:

            -  Load color approximation.  This converts the RGB
               pixels to a six-cube color space.  The conversion is
               very fast, but not at all accurate.  This method is
               appropriate for a 'preview' of the picture.

            -  Load grayscale.  This converts the RGB pixels to a
               256-level grayscale color map.  The conversion is
               very fast, and fairly accurate.  The RGB colors are
               mapped to grey via simple averaging: (r+g+b)/3.

            -  Load 64-level color.  This converts the RGB pixels
               to a 'best fit' color map which is constructed
               dynamically.  Because many SuperVGA cards only
               support 64 levels of each color red, green, and blue
               color component, this is often the best option for
               accurate conversion.

            -  Load 256-level color.  This is similar to 64-level
               color conversion, except that 256 levels of each
               color component are supported.  This is slower than
               the 64-level conversion, but gives much better
               results when the graphics hardware supports
               256-level color components (ie, 8 bit DACs).  This
               method requires that approximately 2.5mb of memory
               be free at the time of the PicLoad() call.

            -  Dithering.  This is a TRUE/FALSE option which
               modifies the 64- and 256-level color conversions to
               apply a simple error-correction dithering.  The
               dithering slows down the conversion, but often
               yields better results, especially with the 64-level
               method.





          If the do_dialog parameter is TRUE, the RGB input options
          dialog is conducted, and the options are pre-set based on
          the user's selections.  The user's selections are also
          returned as four bytes (one per option) packed into a
          longword.  When the do_dialog parameter is TRUE, the
          options parameter is ignored.

          If the do_dialog parameter is FALSE, the RGB input
          options are pre-set to the contents of the options
          parameter.  The options parameter contains several
          values, one byte per value, packed into a longword.

          When an RGB image is encountered, and RGB input options
          have not been pre-set, the PicLoad() function
          automatically conducts the options dialogs with the user.
          If you want to load a series of images using the same
          options, this function provides a method a specifying the
          options just once, rather than prompting the user for the
          options on each PicLoad() call.  Simply call this
          function before calling PicLoad() for the first time. 
          The options will remain in effect until your Poco program
          ends, or you explicitly clear them with a call to
          PicRgbOptionsClear().  

          You can also call this function with the do_dialog
          parameter TRUE and save the return value.  Then you can
          pass this return value later with a do_dialog parameter
          of FALSE to reestablish the same options without
          conducting the dialogs again.  This can be useful for
          gathering the user's options interactively and then
          writing a 'script' Poco program to run later in a
          non-interactive batch mode.

          When a new PDR is loaded, pre-set RGB options are not
          cleared.

     Input:

          The do_dialog parameter, when non-zero, indicates that
          the user is to be prompted for output options.  When
          zero, it indicates that the options parameter is to be
          used to pre-set the output options without user
          interaction.  The options parameter is a 32-bit value
          returned by a prior call to this function.

     Output:

          A longword which contains an encoded form of the options
          selected by the user.


     void PicPdrOptionsClear(void)

          This function clears any PDR output options for the
          currently-loaded PDR.  It can be called any number of
          times, even if options were not previously pre-set.  

          PDR options are also cleared automatically whenever a new
          PDR module is loaded.

     void PicRgbOptionsClear(void)





          This function clears any RGB input options for the
          currently-loaded PDR.  It can be called any number of
          times, even if options were not previously pre-set.

          RGB options are not cleared automatically when a new PDR
          module is loaded; RGB options are not PDR-specific.


     Errcode PicGetSize(char *path, int *width, int *height, int
          *depth)

          This function returns information about the specified
          picture file.  As with PicLoad(), this function first
          attempts to use the currently-loaded PDR (if any) to read
          the picture file, and if that fails, it will unload the
          current PDR and load on that can handle the picture
          format.  It chooses a PDR based on the filetype at the
          end of *path, as per the table above.

     Input:

          The path parameter is a pointer to a filename (device
          and/or path info is optional) on which information is to
          be returned.  The width, height, and depth parameters are
          pointers to 32-bit integers; the picture information is
          returned into the locations these parameters point to.

     Output:

          Success (0) if the information is returned, or an
          appropriate negative Errcode value.  After the call, the
          memory locations at *width, *height, and *depth contain
          the picture information.  The depth value is in bits; a
          value greater than 8 indicates the picture file contains
          RGB data.


     Errcode PicLoad(char *path, Screen *screen)

          This function loads a picture from disk into the
          specified screen.  Its behavior is different from the
          built in library LoadPic() function, in that it can
          process RGB input data.

          If a PDR has been pre-loaded, this function attempts to
          use that PDR to load the picture.  If there is no
          pre-loaded PDR, or if the pre-loaded PDR fails to process
          the picture, the filetype-to-PDR mapping table is used to
          load the proper PDR for the picture file type.  If the
          filetype is not in the mapping table, or if the picture
          still can't be loaded, this function returns the error
          status reported by the PDR.  Whenever this function
          returns an error status, you must assume that there is no
          longer a currently-loaded PDR, even if you pre-loaded one
          earlier.

          This function handles RGB input images.  If the RGB input
          options have been pre-set with PicRgbOptionsPreset(),
          those options are applied without user interaction.  If
          the options have not been pre-set, the user is prompted
          for the processing options.





          When the picture is not the same size as the destination
          screen, it is automatically centered within the screen,
          and clipped around the edges as needed.

     Input:

          The path parameter is a pointer to a string which
          contains the filename to load.  The filename can include
          drive and path information.  The screen parameter is a
          handle for the screen into which the picture is loaded. 
          The screen parameter can be NULL, indicating that the
          destination is the main picscreen.

     Output:

          Success (0), or an appropriate negative Errcode value. 


     Errcode PicSave(char *path, Screen *screen)

          This function saves the contents of the specified screen
          to a file.  Its behavior is different from the built in
          library SavePic() function, in that it can process output
          options if the PDR supports them.

          If a PDR has been pre-loaded, it is used to save the
          picture.  If there is no pre-loaded PDR, one will be
          loaded, based on the filetype-to-PDR mapping table. 

          Unlike the PicLoad() routine, this function has no
          automatic retry logic.  If the pre-loaded PDR fails to
          save the picture, the PDR remains loaded, and the error
          status is returned.

          If the PDR supports output options, and the options have
          been pre-set using PicPdrOptionsPreset(), the picture is
          saved without user interaction.  If the output options
          have not been pre-set, the user is prompted for options.

          The picture is always saved using the width & height of
          the specified screen.

     Input:

          The path parameter is a pointer to a string which
          contains the filename to save.  The filename can
          includedrive and path information.  The screen parameter
          is a handle for the screen from which the picture is
          saved.  The screen parameter can be NULL, indicating that
          the source is the main picscreen.

     Output:

          Success (0), or an appropriate negative Errcode value. 

     VSCREEN.POE


          The VSCREEN POE provides several functions for
          manipulating virtual screens.  A virtual screen is a
          rectangular portion of another screen, referred to as the




          root screen.  The virtual screen can describe a
          rectangular portion which is either smaller or larger
          than the root screen.  When the virtual screen is larger
          than the root, clipping I/O routines are automatically
          used to access the virtual screen pixels.

          Several built in and POE-based functions operate on an
          entire screen of data, and have no provision for
          specifying a subset rectangle for processing.  You can
          create a virtual screen that maps a rectangular subset of
          a screen, and then pass the virtual screen handle to the
          function.  This gives the effect of operating on a subset
          of the root screen.


     Screen *MakeCenteredScreen(Screen *root, int w, int h)

          This function builds a virtual screen which is centered
          over or within the root screen.  

          When the specified sizes for the virtual screen are
          smaller than the root screen, the virtual screen is in
          effect a window within the root.  The window is centered
          in each axis within the root.  Write operations outside
          the virtual screen's boundaries are clipped (not
          performed at all), and read operations return zeroes for
          pixels outside the virtual screen's boundaries.

          When the specified virtual screen sizes are larger than
          the root screen's sizes, the larger virtual screen is
          centered over the root screen in each axis.  Write
          operations outside the root screen's boundaries are
          clipped, and read operations outside the root boundaries
          return zeroes.

          The virtual screen will be deleted automatically when
          your Poco program ends.  You cannot allocate a virtual
          screen in one program and refer to it in another.

     Input:

          The root parameter is a screen handle.  It can refer to
          any type of screen, including another virtual screen. 
          The w and h parameters contain the sizes for the new
          virtual screen; they must be greater than zero.
     Output:

          A handle to the virtual screen.  This will never be NULL;
          the only error that can happen is an out-of-memory
          condition, and that will abort the Poco program
          automatically.


     void FreeCenteredScreen(Screen *vscreen)

          This function frees a virtual screen allocated by
          MakeCenteredScreen().

     Input:

          The vscreen parameter is the handle of a screen
          previously created by MakeCenteredScreen().






     Screen *MakeVirtualScreen(Screen *root, int x, int y, int w,
          int h)

          This function builds a virtual screen at an arbitrary
          offset over or within the root screen.  This function is
          similar to MakeCenteredScreen() in all ways, except that
          instead of centering the virtual screen, this function
          places the virtual screen at the x/y offset you specify. 

          Negative x/y values are legal.

     Input:

          The root parameter is a screen handle.  It can refer to
          any type of screen, including another virtual screen. 
          The x and y parameters specify the placement of the upper
          left corner of the virtual screen, relative to the root
          screen.  The w and h parameters contain the sizes for the
          new virtual screen; they must be greater than 0.

     Output:

          A handle to the virtual screen.  This will never be NULL;
          the only error that can happen is an out-of-memory
          condition, and that will abort the Poco program
          automatically.


     void FreeVirtualScreen(Screen *vscreen)

          This function frees a virtual screen allocated by
          MakeVirtualScreen().

     Input:

          The vscreen parameter is the handle of a screen
          previously created by MakeVirtualScreen().

