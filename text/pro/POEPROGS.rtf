{\rtf1\ansi\ansicpg1252\deff0
{\fonttbl
{\f0\fnil\fcharset0\fprq2\fttruetype Times New Roman;}
{\f1\fnil\fcharset0\fprq2\fttruetype Arial;}
{\f2\fnil\fcharset0\fprq2\fttruetype Dingbats;}
{\f3\fnil\fcharset0\fprq2\fttruetype Symbol;}
{\f4\fnil\fcharset0\fprq2\fttruetype Courier New;}}
{\colortbl
\red0\green0\blue0;
\red255\green255\blue255;
\red0\green0\blue0;}
{\stylesheet
{\s1\fi-431\li720\sbasedon28\snext28Contents 1;}
{\s2\fi-431\li1440\sbasedon28\snext28Contents 2;}
{\s3\fi-431\li2160\sbasedon28\snext28Contents 3;}
{\s8\fi-431\li720\sbasedon28Lower Roman List;}
{\s5\tx431\sbasedon24\snext28Numbered Heading 1;}
{\s6\tx431\sbasedon25\snext28Numbered Heading 2;}
{\s7\fi-431\li720Square List;}
{\*\cs11\sbasedon28Endnote Text;}
{\s4\fi-431\li2880\sbasedon28\snext28Contents 4;}
{\s9\fi-431\li720Diamond List;}
{\s10\fi-431\li720Numbered List;}
{\*\cs12\fs20\superEndnote Reference;}
{\s13\fi-431\li720Triangle List;}
{\s14\tx431\sbasedon26\snext28Numbered Heading 3;}
{\s15\fi-431\li720Dashed List;}
{\s16\fi-431\li720\sbasedon10Upper Roman List;}
{\s17\sb440\sa60\f1\fs24\b\sbasedon28\snext28Heading 4;}
{\s18\fi-431\li720Heart List;}
{\s34\fi-431\li720Box List;}
{\s20\fi-431\li720\sbasedon10Upper Case List;}
{\s21\fi-431\li720Bullet List;}
{\s22\fi-431\li720Hand List;}
{\*\cs23\fs20\sbasedon28Footnote Text;}
{\s24\sb440\sa60\f1\fs34\b\sbasedon28\snext28Heading 1;}
{\s25\sb440\sa60\f1\fs28\b\sbasedon28\snext28Heading 2;}
{\s19\qc\sb240\sa120\f1\fs32\b\sbasedon28\snext28Contents Header;}
{\s27\fi-431\li720Tick List;}
{\s26\sb440\sa60\f1\fs24\b\sbasedon28\snext28Heading 3;}
{\s29\fi-431\li720\sbasedon10Lower Case List;}
{\s30\li1440\ri1440\sa120\sbasedon28Block Text;}
{\s36\f4\sbasedon28Plain Text;}
{\s32\tx1584\sbasedon5\snext28Section Heading;}
{\s33\fi-431\li720Implies List;}
{\s28\f0\fs24\lang1033Normal;}
{\s35\fi-431\li720Star List;}
{\*\cs31\fs20\superFootnote Reference;}
{\s37\tx1584\sbasedon5\snext28Chapter Heading;}}
\kerning0\cf0\ftnbj\fet2\ftnstart1\ftnnar\aftnnar\ftnstart1\aftnstart1\aenddoc\revprop3{\info\uc1}\deftab720\viewkind1\paperw11905\paperh16837\margl1440\margr1440\widowctrl
\sectd\sbknone\colsx360\headery0\footery0\pgncont\ltrsect
\pard\plain\ltrpar\ql\sl240\slmult1\itap0{\cf2\f0\fs24\lang1033{\*\listtag0}\par}
\pard\plain\ltrpar\ql\sl240\slmult1\itap0{\cf2\f0\fs24\lang1033{\*\listtag0}\abinodiroverride\ltrch Introduction  1}{\cf2\f0\fs24\lang1033{\*\listtag0}\par}
\pard\plain\ltrpar\ql\sl240\slmult1\itap0{\cf2\f0\fs24\lang1033{\*\listtag0}\par}
\pard\plain\ltrpar\ql\sl240\slmult1\itap0{\cf2\f0\fs24\lang1033{\*\listtag0}\abinodiroverride\ltrch PATCH10A.POE  2}{\cf2\f0\fs24\lang1033{\*\listtag0}\par}
\pard\plain\ltrpar\ql\sl240\slmult1\itap0{\cf2\f0\fs24\lang1033{\*\listtag0}\par}
\pard\plain\ltrpar\ql\sl240\slmult1\itap0{\cf2\f0\fs24\lang1033{\*\listtag0}\abinodiroverride\ltrch COLORUTL.POE  3}{\cf2\f0\fs24\lang1033{\*\listtag0}\par}
\pard\plain\ltrpar\ql\sl240\slmult1\itap0{\cf2\f0\fs24\lang1033{\*\listtag0}\abinodiroverride\ltrch ColorDifference  3}{\cf2\f0\fs24\lang1033{\*\listtag0}\par}
\pard\plain\ltrpar\ql\sl240\slmult1\itap0{\cf2\f0\fs24\lang1033{\*\listtag0}\abinodiroverride\ltrch ClosestColor  4}{\cf2\f0\fs24\lang1033{\*\listtag0}\par}
\pard\plain\ltrpar\ql\sl240\slmult1\itap0{\cf2\f0\fs24\lang1033{\*\listtag0}\abinodiroverride\ltrch GetMenuColors  5}{\cf2\f0\fs24\lang1033{\*\listtag0}\par}
\pard\plain\ltrpar\ql\sl240\slmult1\itap0{\cf2\f0\fs24\lang1033{\*\listtag0}\abinodiroverride\ltrch GetMenuIndexes  5}{\cf2\f0\fs24\lang1033{\*\listtag0}\par}
\pard\plain\ltrpar\ql\sl240\slmult1\itap0{\cf2\f0\fs24\lang1033{\*\listtag0}\abinodiroverride\ltrch RgbToHls  6}{\cf2\f0\fs24\lang1033{\*\listtag0}\par}
\pard\plain\ltrpar\ql\sl240\slmult1\itap0{\cf2\f0\fs24\lang1033{\*\listtag0}\abinodiroverride\ltrch HlsToRgb  6}{\cf2\f0\fs24\lang1033{\*\listtag0}\par}
\pard\plain\ltrpar\ql\sl240\slmult1\itap0{\cf2\f0\fs24\lang1033{\*\listtag0}\par}
\pard\plain\ltrpar\ql\sl240\slmult1\itap0{\cf2\f0\fs24\lang1033{\*\listtag0}\abinodiroverride\ltrch PSTAMP.POE  8}{\cf2\f0\fs24\lang1033{\*\listtag0}\par}
\pard\plain\ltrpar\ql\sl240\slmult1\itap0{\cf2\f0\fs24\lang1033{\*\listtag0}\abinodiroverride\ltrch InitPstampScreen  8}{\cf2\f0\fs24\lang1033{\*\listtag0}\par}
\pard\plain\ltrpar\ql\sl240\slmult1\itap0{\cf2\f0\fs24\lang1033{\*\listtag0}\abinodiroverride\ltrch CleanupPstampScreen  9}{\cf2\f0\fs24\lang1033{\*\listtag0}\par}
\pard\plain\ltrpar\ql\sl240\slmult1\itap0{\cf2\f0\fs24\lang1033{\*\listtag0}\abinodiroverride\ltrch MakePstamp  9}{\cf2\f0\fs24\lang1033{\*\listtag0}\par}
\pard\plain\ltrpar\ql\sl240\slmult1\itap0{\cf2\f0\fs24\lang1033{\*\listtag0}\par}
\pard\plain\ltrpar\ql\sl240\slmult1\itap0{\cf2\f0\fs24\lang1033{\*\listtag0}\abinodiroverride\ltrch PDRACCES.POE 11}{\cf2\f0\fs24\lang1033{\*\listtag0}\par}
\pard\plain\ltrpar\ql\sl240\slmult1\itap0{\cf2\f0\fs24\lang1033{\*\listtag0}\abinodiroverride\ltrch PicDriverUnload 11}{\cf2\f0\fs24\lang1033{\*\listtag0}\par}
\pard\plain\ltrpar\ql\sl240\slmult1\itap0{\cf2\f0\fs24\lang1033{\*\listtag0}\abinodiroverride\ltrch PicDriverLoad 12}{\cf2\f0\fs24\lang1033{\*\listtag0}\par}
\pard\plain\ltrpar\ql\sl240\slmult1\itap0{\cf2\f0\fs24\lang1033{\*\listtag0}\abinodiroverride\ltrch PicDriverFindLoad 12}{\cf2\f0\fs24\lang1033{\*\listtag0}\par}
\pard\plain\ltrpar\ql\sl240\slmult1\itap0{\cf2\f0\fs24\lang1033{\*\listtag0}\abinodiroverride\ltrch PicPdrHasOptions 13}{\cf2\f0\fs24\lang1033{\*\listtag0}\par}
\pard\plain\ltrpar\ql\sl240\slmult1\itap0{\cf2\f0\fs24\lang1033{\*\listtag0}\abinodiroverride\ltrch PicPdrOptionsPreset 13}{\cf2\f0\fs24\lang1033{\*\listtag0}\par}
\pard\plain\ltrpar\ql\sl240\slmult1\itap0{\cf2\f0\fs24\lang1033{\*\listtag0}\abinodiroverride\ltrch PicRgbOptionsPreset 14}{\cf2\f0\fs24\lang1033{\*\listtag0}\par}
\pard\plain\ltrpar\ql\sl240\slmult1\itap0{\cf2\f0\fs24\lang1033{\*\listtag0}\abinodiroverride\ltrch PicPdrOptionsClear 16}{\cf2\f0\fs24\lang1033{\*\listtag0}\par}
\pard\plain\ltrpar\ql\sl240\slmult1\itap0{\cf2\f0\fs24\lang1033{\*\listtag0}\abinodiroverride\ltrch PicRgbOptionsClear 16}{\cf2\f0\fs24\lang1033{\*\listtag0}\par}
\pard\plain\ltrpar\ql\sl240\slmult1\itap0{\cf2\f0\fs24\lang1033{\*\listtag0}\abinodiroverride\ltrch PicGetSize 17}{\cf2\f0\fs24\lang1033{\*\listtag0}\par}
\pard\plain\ltrpar\ql\sl240\slmult1\itap0{\cf2\f0\fs24\lang1033{\*\listtag0}\abinodiroverride\ltrch PicLoad 17}{\cf2\f0\fs24\lang1033{\*\listtag0}\par}
\pard\plain\ltrpar\ql\sl240\slmult1\itap0{\cf2\f0\fs24\lang1033{\*\listtag0}\abinodiroverride\ltrch PicSave 18}{\cf2\f0\fs24\lang1033{\*\listtag0}\par}
\pard\plain\ltrpar\ql\sl240\slmult1\itap0{\cf2\f0\fs24\lang1033{\*\listtag0}\par}
\pard\plain\ltrpar\ql\sl240\slmult1\itap0{\cf2\f0\fs24\lang1033{\*\listtag0}\abinodiroverride\ltrch VSCREEN.POE 20}{\cf2\f0\fs24\lang1033{\*\listtag0}\par}
\pard\plain\ltrpar\ql\sl240\slmult1\itap0{\cf2\f0\fs24\lang1033{\*\listtag0}\abinodiroverride\ltrch MakeCenteredScreen 20}{\cf2\f0\fs24\lang1033{\*\listtag0}\par}
\pard\plain\ltrpar\ql\sl240\slmult1\itap0{\cf2\f0\fs24\lang1033{\*\listtag0}\abinodiroverride\ltrch FreeCenteredScreen 21}{\cf2\f0\fs24\lang1033{\*\listtag0}\par}
\pard\plain\ltrpar\ql\sl240\slmult1\itap0{\cf2\f0\fs24\lang1033{\*\listtag0}\abinodiroverride\ltrch MakeVirtualScreen 21}{\cf2\f0\fs24\lang1033{\*\listtag0}\par}
\pard\plain\ltrpar\ql\sl240\slmult1\itap0{\cf2\f0\fs24\lang1033{\*\listtag0}\abinodiroverride\ltrch FreeVirtualScreen 21}{\cf2\f0\fs24\lang1033{\*\listtag0}\par}
\pard\plain\ltrpar\ql\sl240\slmult1\itap0{\cf2\f0\fs24\lang1033{\*\listtag0}\par}
\pard\plain\ltrpar\ql\sl240\slmult1\itap0{\cf2\f0\fs24\lang1033{\*\listtag0}\abinodiroverride\ltrch FLICPLAY.POE 23}{\cf2\f0\fs24\lang1033{\*\listtag0}\par}
\pard\plain\ltrpar\ql\sl240\slmult1\itap0{\cf2\f0\fs24\lang1033{\*\listtag0}\abinodiroverride\ltrch FlicInfo 24}{\cf2\f0\fs24\lang1033{\*\listtag0}\par}
\pard\plain\ltrpar\ql\sl240\slmult1\itap0{\cf2\f0\fs24\lang1033{\*\listtag0}\abinodiroverride\ltrch FlicOpenInfo 25}{\cf2\f0\fs24\lang1033{\*\listtag0}\par}
\pard\plain\ltrpar\ql\sl240\slmult1\itap0{\cf2\f0\fs24\lang1033{\*\listtag0}\abinodiroverride\ltrch FlicOpen 25}{\cf2\f0\fs24\lang1033{\*\listtag0}\par}
\pard\plain\ltrpar\ql\sl240\slmult1\itap0{\cf2\f0\fs24\lang1033{\*\listtag0}\abinodiroverride\ltrch FlicClose 26}{\cf2\f0\fs24\lang1033{\*\listtag0}\par}
\pard\plain\ltrpar\ql\sl240\slmult1\itap0{\cf2\f0\fs24\lang1033{\*\listtag0}\abinodiroverride\ltrch FlicRewind 26}{\cf2\f0\fs24\lang1033{\*\listtag0}\par}
\pard\plain\ltrpar\ql\sl240\slmult1\itap0{\cf2\f0\fs24\lang1033{\*\listtag0}\abinodiroverride\ltrch FlicSeekFrame 26}{\cf2\f0\fs24\lang1033{\*\listtag0}\par}
\pard\plain\ltrpar\ql\sl240\slmult1\itap0{\cf2\f0\fs24\lang1033{\*\listtag0}\abinodiroverride\ltrch FlicOptions 27}{\cf2\f0\fs24\lang1033{\*\listtag0}\par}
\pard\plain\ltrpar\ql\sl240\slmult1\itap0{\cf2\f0\fs24\lang1033{\*\listtag0}\abinodiroverride\ltrch FlicPlay 28}{\cf2\f0\fs24\lang1033{\*\listtag0}\par}
\pard\plain\ltrpar\ql\sl240\slmult1\itap0{\cf2\f0\fs24\lang1033{\*\listtag0}\abinodiroverride\ltrch FlicPlayOnce 29}{\cf2\f0\fs24\lang1033{\*\listtag0}\par}
\pard\plain\ltrpar\ql\sl240\slmult1\itap0{\cf2\f0\fs24\lang1033{\*\listtag0}\abinodiroverride\ltrch FlicPlayTimed 29}{\cf2\f0\fs24\lang1033{\*\listtag0}\par}
\pard\plain\ltrpar\ql\sl240\slmult1\itap0{\cf2\f0\fs24\lang1033{\*\listtag0}\abinodiroverride\ltrch FlicPlayCount 29}{\cf2\f0\fs24\lang1033{\*\listtag0}\par}
\pard\plain\ltrpar\ql\li1440\sl240\slmult1\itap0{\cf2\f0\fs24\lang1033{\*\listtag0}\par}
\pard\plain\ltrpar\ql\li1440\sl240\slmult1\itap0
\sect\sectd\sbknone\colsx360\headery0\footery0\marglsxn2880\pgncont\ltrsect
\pard\plain\ltrpar\ql\sl240\slmult1\itap0{\cf2\f0\fs24\lang1033{\*\listtag0}\abinodiroverride\ltrch \page }{\cf2\f0\fs24\lang1033{\*\listtag0}\par}
\pard\plain\ltrpar\ql\sl240\slmult1\itap0{\cf2\f0\fs24\lang1033{\*\listtag0}\abinodiroverride\ltrch \page }{\cf2\f0\fs24\lang1033{\*\listtag0}\par}
\pard\plain\ltrpar\ql\sl240\slmult1\itap0{\cf2\f0\fs28\b\lang1033{\*\listtag0}\abinodiroverride\ltrch Introduction}{\cf2\f0\fs28\b\lang1033{\*\listtag0}\par}
\pard\plain\ltrpar\ql\sl240\slmult1\itap0{\cf2\f0\fs24\lang1033{\*\listtag0}\par}
\pard\plain\ltrpar\ql\sl240\slmult1\itap0{\cf2\f0\fs24\lang1033{\*\listtag0}\par}
\pard\plain\ltrpar\ql\sl240\slmult1\itap0{\cf2\f0\fs24\lang1033{\*\listtag0}\abinodiroverride\ltrch This document describes the new Poco library functions provided by several POE module we have coded since the initial release of Autodesk Animator Pro.  These POE modules may be freely distributed along with your Poco programs that use them.  You can obtain the source code for most of these modules by ordering the POEKIT development package from Autodesk Multimedia Developer's Support.  You may }{\cf2\f0\fs24\i\lang1033{\*\listtag0}not}{\cf2\f0\fs24\lang1033{\*\listtag0} freely distribute the source code to these POE modules without the express written permission of Autodesk, Inc.}{\cf2\f0\fs24\lang1033{\*\listtag0}\par}
\pard\plain\ltrpar\ql\sl240\slmult1\itap0{\cf2\f0\fs24\lang1033{\*\listtag0}\par}
\pard\plain\ltrpar\ql\sl240\slmult1\itap0{\cf2\f0\fs24\lang1033{\*\listtag0}\abinodiroverride\ltrch Each of the chapters in this document describes one POE module and the functions it provides.  In addition, the PATCH10A.POE chapter describes several bugs discovered since the release of Animator Pro v1.0, and how the PATCH10A module fixes the bugs.  We highly recommend that you read the PATCH10A chapter in its entirety.}{\cf2\f0\fs24\lang1033{\*\listtag0}\par}
\pard\plain\ltrpar\ql\sl240\slmult1\itap0{\cf2\f0\fs24\lang1033{\*\listtag0}\par}
\pard\plain\ltrpar\ql\sl240\slmult1\itap0{\cf2\f0\fs24\lang1033{\*\listtag0}\abinodiroverride\ltrch \page }{\cf2\f0\fs24\lang1033{\*\listtag0}\par}
\pard\plain\ltrpar\ql\sl240\slmult1\itap0{\cf2\f0\fs24\lang1033{\*\listtag0}\abinodiroverride\ltrch \page }{\cf2\f0\fs24\lang1033{\*\listtag0}\par}
\pard\plain\ltrpar\ql\sl240\slmult1\itap0{\cf2\f0\fs28\b\lang1033{\*\listtag0}\abinodiroverride\ltrch PATCH10A.POE}{\cf2\f0\fs28\b\lang1033{\*\listtag0}\par}
\pard\plain\ltrpar\ql\sl240\slmult1\itap0{\cf2\f0\fs24\lang1033{\*\listtag0}\par}
\pard\plain\ltrpar\ql\sl240\slmult1\itap0{\cf2\f0\fs24\lang1033{\*\listtag0}\abinodiroverride\ltrch Need a description of this stuff, will complete it later.}{\cf2\f0\fs24\lang1033{\*\listtag0}\par}
\pard\plain\ltrpar\ql\sl240\slmult1\itap0{\cf2\f0\fs24\lang1033{\*\listtag0}\abinodiroverride\ltrch \page }{\cf2\f0\fs24\lang1033{\*\listtag0}\par}
\pard\plain\ltrpar\ql\sl240\slmult1\itap0{\cf2\f0\fs24\lang1033{\*\listtag0}\abinodiroverride\ltrch \page }{\cf2\f0\fs24\lang1033{\*\listtag0}\par}
\pard\plain\ltrpar\ql\sl240\slmult1\itap0{\cf2\f0\fs28\b\lang1033{\*\listtag0}\abinodiroverride\ltrch COLORUTL.POE}{\cf2\f0\fs28\b\lang1033{\*\listtag0}\par}
\pard\plain\ltrpar\ql\sl240\slmult1\itap0{\cf2\f0\fs24\lang1033{\*\listtag0}\par}
\pard\plain\ltrpar\ql\sl240\slmult1\itap0{\cf2\f0\fs24\lang1033{\*\listtag0}\par}
\pard\plain\ltrpar\ql\sl240\slmult1\itap0{\cf2\f0\fs24\lang1033{\*\listtag0}\abinodiroverride\ltrch The COLORUTL POE module provides several functions for working with the color palette.  The }{\cf2\f0\fs24\b\lang1033{\*\listtag0}GetMenuColors()}{\cf2\f0\fs24\lang1033{\*\listtag0} function provides information which is not available from any built in library function.  The }{\cf2\f0\fs24\b\lang1033{\*\listtag0}ColorDifference()}{\cf2\f0\fs24\lang1033{\*\listtag0} and }{\cf2\f0\fs24\b\lang1033{\*\listtag0}ClosestColor()}{\cf2\f0\fs24\lang1033{\*\listtag0} functions could be implemented in Poco code, but are much faster in native 80386 POE code.}{\cf2\f0\fs24\lang1033{\*\listtag0}\par}
\pard\plain\ltrpar\ql\sl240\slmult1\itap0{\cf2\f0\fs24\lang1033{\*\listtag0}\par}
\pard\plain\ltrpar\ql\sl240\slmult1\itap0{\cf2\f0\fs24\lang1033{\*\listtag0}\abinodiroverride\ltrch There are two versions of the COLORUTL.POE module available now, v1.0 and v1.1.  Several new functions were added in v1.1, they are identified in the function descriptions below.  If the older version of the library is loaded, your Poco program will abort during compilation if the new functions are referenced in your Poco code.}{\cf2\f0\fs24\lang1033{\*\listtag0}\par}
\pard\plain\ltrpar\ql\sl240\slmult1\itap0{\cf2\f0\fs24\lang1033{\*\listtag0}\par}
\pard\plain\ltrpar\ql\sl240\slmult1\itap0{\cf2\f0\fs24\lang1033{\*\listtag0}\abinodiroverride\ltrch The source code for COLORUTL.POE is included in POEKIT.}{\cf2\f0\fs24\lang1033{\*\listtag0}\par}
\pard\plain\ltrpar\ql\sl240\slmult1\itap0{\cf2\f0\fs24\lang1033{\*\listtag0}\par}
\pard\plain\ltrpar\ql\sl240\slmult1\itap0{\cf2\f0\fs24\b\lang1033{\*\listtag0}\par}
\pard\plain\ltrpar\ql\sl240\slmult1\itap0{\cf2\f0\fs24\b\lang1033{\*\listtag0}\abinodiroverride\ltrch int ColorDifference(int *pcolor1, int *pcolor2)}{\cf2\f0\fs24\b\lang1033{\*\listtag0}\par}
\pard\plain\ltrpar\ql\sl240\slmult1\itap0{\cf2\f0\fs24\lang1033{\*\listtag0}\par}
\pard\plain\ltrpar\ql\sl240\slmult1\itap0{\cf2\f0\fs24\lang1033{\*\listtag0}\abinodiroverride\ltrch This function returns the difference between a pair of rgb colors.  The difference is the sum of the squares of the differences of each of the r,g,b components.  It's useful in determining how similar two colors are.}{\cf2\f0\fs24\lang1033{\*\listtag0}\par}
\pard\plain\ltrpar\ql\sl240\slmult1\itap0{\cf2\f0\fs24\lang1033{\*\listtag0}\par}
\pard\plain\ltrpar\ql\sl240\slmult1\itap0{\cf2\f0\fs24\lang1033{\*\listtag0}\abinodiroverride\ltrch The return value is calculated as:}{\cf2\f0\fs24\lang1033{\*\listtag0}\par}
\pard\plain\ltrpar\ql\sl240\slmult1\itap0{\cf2\f0\fs24\lang1033{\*\listtag0}\par}
\pard\plain\ltrpar\ql\sl240\slmult1\itap0{\cf2\f0\fs24\lang1033{\*\listtag0}\abinodiroverride\ltrch rd = r1-r2}{\cf2\f0\fs24\lang1033{\*\listtag0}\par}
\pard\plain\ltrpar\ql\sl240\slmult1\itap0{\cf2\f0\fs24\lang1033{\*\listtag0}\abinodiroverride\ltrch gd = g1-g2}{\cf2\f0\fs24\lang1033{\*\listtag0}\par}
\pard\plain\ltrpar\ql\sl240\slmult1\itap0{\cf2\f0\fs24\lang1033{\*\listtag0}\abinodiroverride\ltrch bd = b1-b2}{\cf2\f0\fs24\lang1033{\*\listtag0}\par}
\pard\plain\ltrpar\ql\sl240\slmult1\itap0{\cf2\f0\fs24\lang1033{\*\listtag0}\abinodiroverride\ltrch return rd*rd + gd*gd + bd*bd }{\cf2\f0\fs24\lang1033{\*\listtag0}\par}
\pard\plain\ltrpar\ql\sl240\slmult1\itap0{\cf2\f0\fs24\lang1033{\*\listtag0}\par}
\pard\plain\ltrpar\ql\sl240\slmult1\itap0{\cf2\f0\fs24\lang1033{\*\listtag0}\abinodiroverride\ltrch Input:}{\cf2\f0\fs24\lang1033{\*\listtag0}\par}
\pard\plain\ltrpar\ql\sl240\slmult1\itap0{\cf2\f0\fs24\lang1033{\*\listtag0}\par}
\pard\plain\ltrpar\ql\sl240\slmult1\itap0{\cf2\f0\fs24\lang1033{\*\listtag0}\abinodiroverride\ltrch The }{\cf2\f0\fs24\b\lang1033{\*\listtag0}pcolor1}{\cf2\f0\fs24\lang1033{\*\listtag0} and }{\cf2\f0\fs24\b\lang1033{\*\listtag0}pcolor2}{\cf2\f0\fs24\lang1033{\*\listtag0} parameters are pointers rgb triplets.  Each points to an array of 3 integers which hold the red, green, and blue components of a color.}{\cf2\f0\fs24\lang1033{\*\listtag0}\par}
\pard\plain\ltrpar\ql\sl240\slmult1\itap0{\cf2\f0\fs24\lang1033{\*\listtag0}\par}
\pard\plain\ltrpar\ql\sl240\slmult1\itap0{\cf2\f0\fs24\lang1033{\*\listtag0}\abinodiroverride\ltrch Output:}{\cf2\f0\fs24\lang1033{\*\listtag0}\par}
\pard\plain\ltrpar\ql\sl240\slmult1\itap0{\cf2\f0\fs24\lang1033{\*\listtag0}\par}
\pard\plain\ltrpar\ql\sl240\slmult1\itap0{\cf2\f0\fs24\lang1033{\*\listtag0}\abinodiroverride\ltrch A single integer, representing the 'distance' between the two input colors.  Small values indicate that the colors are similar; large values indicate that the colors are relatively far apart in the rgb color space.}{\cf2\f0\fs24\lang1033{\*\listtag0}\par}
\pard\plain\ltrpar\ql\sl240\slmult1\itap0{\cf2\f0\fs24\lang1033{\*\listtag0}\abinodiroverride\ltrch \page }{\cf2\f0\fs24\lang1033{\*\listtag0}\par}
\pard\plain\ltrpar\ql\sl240\slmult1\itap0{\cf2\f0\fs24\lang1033{\*\listtag0}\par}
\pard\plain\ltrpar\ql\sl240\slmult1\itap0{\cf2\f0\fs24\lang1033{\*\listtag0}\abinodiroverride\ltrch Example:}{\cf2\f0\fs24\lang1033{\*\listtag0}\par}
\pard\plain\ltrpar\ql\sl240\slmult1\itap0{\cf2\f0\fs24\lang1033{\*\listtag0}\par}
\pard\plain\ltrpar\ql\sl240\slmult1\itap0{\cf2\f0\fs24\lang1033{\*\listtag0}\abinodiroverride\ltrch The following example loads the entire color palette from the current picscreen into a local array, then determines the degree of difference between the first two colors:}{\cf2\f0\fs24\lang1033{\*\listtag0}\par}
\pard\plain\ltrpar\ql\sl240\slmult1\itap0{\cf2\f0\fs24\b\lang1033{\*\listtag0}\par}
\pard\plain\ltrpar\ql\sl240\slmult1\itap0{\cf2\f0\fs24\b\lang1033{\*\listtag0}\abinodiroverride\ltrch intthemap[256][3];}{\cf2\f0\fs24\b\lang1033{\*\listtag0}\par}
\pard\plain\ltrpar\ql\sl240\slmult1\itap0{\cf2\f0\fs24\b\lang1033{\*\listtag0}\abinodiroverride\ltrch int  diff;}{\cf2\f0\fs24\b\lang1033{\*\listtag0}\par}
\pard\plain\ltrpar\ql\sl240\slmult1\itap0{\cf2\f0\fs24\b\lang1033{\*\listtag0}\abinodiroverride\ltrch GetScreenColorMap(NULL, themap);}{\cf2\f0\fs24\b\lang1033{\*\listtag0}\par}
\pard\plain\ltrpar\ql\sl240\slmult1\itap0{\cf2\f0\fs24\b\lang1033{\*\listtag0}\abinodiroverride\ltrch diff = ColorDifference(themap[0], themap[1]);}{\cf2\f0\fs24\b\lang1033{\*\listtag0}\par}
\pard\plain\ltrpar\ql\sl240\slmult1\itap0{\cf2\f0\fs24\lang1033{\*\listtag0}\par}
\pard\plain\ltrpar\ql\sl240\slmult1\itap0{\cf2\f0\fs24\b\lang1033{\*\listtag0}\par}
\pard\plain\ltrpar\ql\sl240\slmult1\itap0{\cf2\f0\fs24\b\lang1033{\*\listtag0}\abinodiroverride\ltrch int ClosestColor(int *pcolor, int *ptab, int tabcount)}{\cf2\f0\fs24\b\lang1033{\*\listtag0}\par}
\pard\plain\ltrpar\ql\sl240\slmult1\itap0{\cf2\f0\fs24\lang1033{\*\listtag0}\par}
\pard\plain\ltrpar\ql\sl240\slmult1\itap0{\cf2\f0\fs24\lang1033{\*\listtag0}\abinodiroverride\ltrch This function searches a table of rgb color values and returns the index of the color in the table closest to the rgb value specified by }{\cf2\f0\fs24\b\lang1033{\*\listtag0}*pcolor}{\cf2\f0\fs24\lang1033{\*\listtag0}.  }{\cf2\f0\fs24\lang1033{\*\listtag0}\par}
\pard\plain\ltrpar\ql\sl240\slmult1\itap0{\cf2\f0\fs24\lang1033{\*\listtag0}\par}
\pard\plain\ltrpar\ql\sl240\slmult1\itap0{\cf2\f0\fs24\lang1033{\*\listtag0}\abinodiroverride\ltrch Input:}{\cf2\f0\fs24\lang1033{\*\listtag0}\par}
\pard\plain\ltrpar\ql\sl240\slmult1\itap0{\cf2\f0\fs24\lang1033{\*\listtag0}\par}
\pard\plain\ltrpar\ql\sl240\slmult1\itap0{\cf2\f0\fs24\lang1033{\*\listtag0}\abinodiroverride\ltrch The }{\cf2\f0\fs24\b\lang1033{\*\listtag0}pcolor}{\cf2\f0\fs24\lang1033{\*\listtag0} parameter is a pointer to an rgb triplet.  The triplet is an array of 3 integers which hold the red, green, and blue components of the color.  The }{\cf2\f0\fs24\b\lang1033{\*\listtag0}ptab}{\cf2\f0\fs24\lang1033{\*\listtag0} parameter is a pointer to a table of rgb triplets to be searched.  The }{\cf2\f0\fs24\b\lang1033{\*\listtag0}tabcount}{\cf2\f0\fs24\lang1033{\*\listtag0} parameter indicates how many rgb triplets exist in the table.}{\cf2\f0\fs24\lang1033{\*\listtag0}\par}
\pard\plain\ltrpar\ql\sl240\slmult1\itap0{\cf2\f0\fs24\lang1033{\*\listtag0}\par}
\pard\plain\ltrpar\ql\sl240\slmult1\itap0{\cf2\f0\fs24\lang1033{\*\listtag0}\abinodiroverride\ltrch Output:}{\cf2\f0\fs24\lang1033{\*\listtag0}\par}
\pard\plain\ltrpar\ql\sl240\slmult1\itap0{\cf2\f0\fs24\lang1033{\*\listtag0}\par}
\pard\plain\ltrpar\ql\sl240\slmult1\itap0{\cf2\f0\fs24\lang1033{\*\listtag0}\abinodiroverride\ltrch A single integer which is the index of the closest color in the table.  If the table contains zero entries, the return value will be zero.}{\cf2\f0\fs24\lang1033{\*\listtag0}\par}
\pard\plain\ltrpar\ql\sl240\slmult1\itap0{\cf2\f0\fs24\lang1033{\*\listtag0}\par}
\pard\plain\ltrpar\ql\sl240\slmult1\itap0{\cf2\f0\fs24\lang1033{\*\listtag0}\abinodiroverride\ltrch Example:}{\cf2\f0\fs24\lang1033{\*\listtag0}\par}
\pard\plain\ltrpar\ql\sl240\slmult1\itap0{\cf2\f0\fs24\lang1033{\*\listtag0}\par}
\pard\plain\ltrpar\ql\sl240\slmult1\itap0{\cf2\f0\fs24\lang1033{\*\listtag0}\abinodiroverride\ltrch The following example searches the current picscreen color palette to see if a 100% blue color is present.  If not, the closest color is modified to represent pure blue.}{\cf2\f0\fs24\lang1033{\*\listtag0}\par}
\pard\plain\ltrpar\ql\sl240\slmult1\itap0{\cf2\f0\fs24\b\lang1033{\*\listtag0}\par}
\pard\plain\ltrpar\ql\sl240\slmult1\itap0{\cf2\f0\fs24\b\lang1033{\*\listtag0}\abinodiroverride\ltrch intthemap[256][3];}{\cf2\f0\fs24\b\lang1033{\*\listtag0}\par}
\pard\plain\ltrpar\ql\sl240\slmult1\itap0{\cf2\f0\fs24\b\lang1033{\*\listtag0}\abinodiroverride\ltrch intpureblue[3] = \{0, 0, 255\};}{\cf2\f0\fs24\b\lang1033{\*\listtag0}\par}
\pard\plain\ltrpar\ql\sl240\slmult1\itap0{\cf2\f0\fs24\b\lang1033{\*\listtag0}\abinodiroverride\ltrch intclosest;}{\cf2\f0\fs24\b\lang1033{\*\listtag0}\par}
\pard\plain\ltrpar\ql\sl240\slmult1\itap0{\cf2\f0\fs24\b\lang1033{\*\listtag0}\abinodiroverride\ltrch GetScreenColorMap(NULL, themap);}{\cf2\f0\fs24\b\lang1033{\*\listtag0}\par}
\pard\plain\ltrpar\ql\sl240\slmult1\itap0{\cf2\f0\fs24\b\lang1033{\*\listtag0}\abinodiroverride\ltrch closest = ClosestColor(pureblue, themap, 256);}{\cf2\f0\fs24\b\lang1033{\*\listtag0}\par}
\pard\plain\ltrpar\ql\sl240\slmult1\itap0{\cf2\f0\fs24\b\lang1033{\*\listtag0}\abinodiroverride\ltrch if (0 != ColorDifference(pureblue, themap[closest]))}{\cf2\f0\fs24\b\lang1033{\*\listtag0}\par}
\pard\plain\ltrpar\ql\sl240\slmult1\itap0{\cf2\f0\fs24\b\lang1033{\*\listtag0}\abinodiroverride\ltrch SetColorMap(closest, 0, 0, 255);}{\cf2\f0\fs24\b\lang1033{\*\listtag0}\par}
\pard\plain\ltrpar\ql\sl240\slmult1\itap0{\cf2\f0\fs24\lang1033{\*\listtag0}\par}
\pard\plain\ltrpar\ql\sl240\slmult1\itap0{\cf2\f0\fs24\lang1033{\*\listtag0}\abinodiroverride\ltrch \page }{\cf2\f0\fs24\lang1033{\*\listtag0}\par}
\pard\plain\ltrpar\ql\sl240\slmult1\itap0{\cf2\f0\fs24\b\lang1033{\*\listtag0}\par}
\pard\plain\ltrpar\ql\sl240\slmult1\itap0{\cf2\f0\fs24\b\lang1033{\*\listtag0}\abinodiroverride\ltrch void GetMenuColors(int *current, int *preferred)}{\cf2\f0\fs24\b\lang1033{\*\listtag0}\par}
\pard\plain\ltrpar\ql\sl240\slmult1\itap0{\cf2\f0\fs24\lang1033{\*\listtag0}\par}
\pard\plain\ltrpar\ql\sl240\slmult1\itap0{\cf2\f0\fs24\lang1033{\*\listtag0}\abinodiroverride\ltrch This function returns the current and preferred menu colors.  The current colors are the ones in use right now (or the ones the user saw last, if no menus/dialogs are on the Animator Pro screen right now).  The preferred colors are the set the user would like to see.  The preferred colors may differ from the current if exact matches for the preferred colors don't exist in the color palette.}{\cf2\f0\fs24\lang1033{\*\listtag0}\par}
\pard\plain\ltrpar\ql\sl240\slmult1\itap0{\cf2\f0\fs24\lang1033{\*\listtag0}\par}
\pard\plain\ltrpar\ql\sl240\slmult1\itap0{\cf2\f0\fs24\lang1033{\*\listtag0}\abinodiroverride\ltrch This function is useful primary when you are constructing a new color palette programmatically.  If you have some leftover slots in the palette, you can put the user's preferred colors into them; a nice gesture.  (There is no requirement to do this when constructing a color palette. Animator Pro automatically selects the closest available colors from any given palette when the user's exact preferred colors aren't available.)  }{\cf2\f0\fs24\lang1033{\*\listtag0}\par}
\pard\plain\ltrpar\ql\sl240\slmult1\itap0{\cf2\f0\fs24\lang1033{\*\listtag0}\par}
\pard\plain\ltrpar\ql\sl240\slmult1\itap0{\cf2\f0\fs24\lang1033{\*\listtag0}\abinodiroverride\ltrch Input:}{\cf2\f0\fs24\lang1033{\*\listtag0}\par}
\pard\plain\ltrpar\ql\sl240\slmult1\itap0{\cf2\f0\fs24\lang1033{\*\listtag0}\par}
\pard\plain\ltrpar\ql\sl240\slmult1\itap0{\cf2\f0\fs24\lang1033{\*\listtag0}\abinodiroverride\ltrch Pointers to arrays of 5 rgb triplets.  Each triplet is an array of 3 integers which hold the red, green, and blue components of each color.  Either pointer may be }{\cf2\f0\fs24\b\lang1033{\*\listtag0}NULL}{\cf2\f0\fs24\lang1033{\*\listtag0}, indicating that you don't need the corresponding set of colors returned.}{\cf2\f0\fs24\lang1033{\*\listtag0}\par}
\pard\plain\ltrpar\ql\sl240\slmult1\itap0{\cf2\f0\fs24\lang1033{\*\listtag0}\par}
\pard\plain\ltrpar\ql\sl240\slmult1\itap0{\cf2\f0\fs24\lang1033{\*\listtag0}\abinodiroverride\ltrch Output:}{\cf2\f0\fs24\lang1033{\*\listtag0}\par}
\pard\plain\ltrpar\ql\sl240\slmult1\itap0{\cf2\f0\fs24\lang1033{\*\listtag0}\par}
\pard\plain\ltrpar\ql\sl240\slmult1\itap0{\cf2\f0\fs24\lang1033{\*\listtag0}\abinodiroverride\ltrch After the call, the arrays specified by your input pointers will contain the corresponding color sets.}{\cf2\f0\fs24\lang1033{\*\listtag0}\par}
\pard\plain\ltrpar\ql\sl240\slmult1\itap0{\cf2\f0\fs24\lang1033{\*\listtag0}\par}
\pard\plain\ltrpar\ql\sl240\slmult1\itap0{\cf2\f0\fs24\lang1033{\*\listtag0}\abinodiroverride\ltrch Example:}{\cf2\f0\fs24\lang1033{\*\listtag0}\par}
\pard\plain\ltrpar\ql\sl240\slmult1\itap0{\cf2\f0\fs24\lang1033{\*\listtag0}\par}
\pard\plain\ltrpar\ql\sl240\slmult1\itap0{\cf2\f0\fs24\lang1033{\*\listtag0}\abinodiroverride\ltrch The following example loads both the current and preferred menu color sets into local arrays:}{\cf2\f0\fs24\lang1033{\*\listtag0}\par}
\pard\plain\ltrpar\ql\sl240\slmult1\itap0{\cf2\f0\fs24\b\lang1033{\*\listtag0}\par}
\pard\plain\ltrpar\ql\sl240\slmult1\itap0{\cf2\f0\fs24\b\lang1033{\*\listtag0}\abinodiroverride\ltrch intcurrent_colors[5][3];}{\cf2\f0\fs24\b\lang1033{\*\listtag0}\par}
\pard\plain\ltrpar\ql\sl240\slmult1\itap0{\cf2\f0\fs24\b\lang1033{\*\listtag0}\abinodiroverride\ltrch intpreferred_colors[5][3];}{\cf2\f0\fs24\b\lang1033{\*\listtag0}\par}
\pard\plain\ltrpar\ql\sl240\slmult1\itap0{\cf2\f0\fs24\b\lang1033{\*\listtag0}\abinodiroverride\ltrch GetMenuColors(current_colors, preferred_colors);}{\cf2\f0\fs24\b\lang1033{\*\listtag0}\par}
\pard\plain\ltrpar\ql\sl240\slmult1\itap0{\cf2\f0\fs24\lang1033{\*\listtag0}\par}
\pard\plain\ltrpar\ql\sl240\slmult1\itap0{\cf2\f0\fs24\b\lang1033{\*\listtag0}\par}
\pard\plain\ltrpar\ql\sl240\slmult1\itap0{\cf2\f0\fs24\b\lang1033{\*\listtag0}\abinodiroverride\ltrch void GetMenuIndexes(int *indexes)}{\cf2\f0\fs24\b\lang1033{\*\listtag0}\par}
\pard\plain\ltrpar\ql\sl240\slmult1\itap0{\cf2\f0\fs24\lang1033{\*\listtag0}\par}
\pard\plain\ltrpar\ql\sl240\slmult1\itap0{\cf2\f0\fs24\lang1033{\*\listtag0}\abinodiroverride\ltrch This function returns the indexes of the five color palette slots currently being used for menu colors.  This function is available in the v1.1 version of the POE module.}{\cf2\f0\fs24\lang1033{\*\listtag0}\par}
\pard\plain\ltrpar\ql\sl240\slmult1\itap0{\cf2\f0\fs24\lang1033{\*\listtag0}\abinodiroverride\ltrch \page }{\cf2\f0\fs24\lang1033{\*\listtag0}\par}
\pard\plain\ltrpar\ql\sl240\slmult1\itap0{\cf2\f0\fs24\lang1033{\*\listtag0}\par}
\pard\plain\ltrpar\ql\sl240\slmult1\itap0{\cf2\f0\fs24\lang1033{\*\listtag0}\abinodiroverride\ltrch Input:}{\cf2\f0\fs24\lang1033{\*\listtag0}\par}
\pard\plain\ltrpar\ql\sl240\slmult1\itap0{\cf2\f0\fs24\lang1033{\*\listtag0}\par}
\pard\plain\ltrpar\ql\sl240\slmult1\itap0{\cf2\f0\fs24\lang1033{\*\listtag0}\abinodiroverride\ltrch A pointer to an array of five integers.}{\cf2\f0\fs24\lang1033{\*\listtag0}\par}
\pard\plain\ltrpar\ql\sl240\slmult1\itap0{\cf2\f0\fs24\lang1033{\*\listtag0}\par}
\pard\plain\ltrpar\ql\sl240\slmult1\itap0{\cf2\f0\fs24\lang1033{\*\listtag0}\abinodiroverride\ltrch Output:}{\cf2\f0\fs24\lang1033{\*\listtag0}\par}
\pard\plain\ltrpar\ql\sl240\slmult1\itap0{\cf2\f0\fs24\lang1033{\*\listtag0}\par}
\pard\plain\ltrpar\ql\sl240\slmult1\itap0{\cf2\f0\fs24\lang1033{\*\listtag0}\abinodiroverride\ltrch After the call, the array specified by your input pointer will contain the menu color indexes.}{\cf2\f0\fs24\lang1033{\*\listtag0}\par}
\pard\plain\ltrpar\ql\sl240\slmult1\itap0{\cf2\f0\fs24\lang1033{\*\listtag0}\par}
\pard\plain\ltrpar\ql\sl240\slmult1\itap0{\cf2\f0\fs24\lang1033{\*\listtag0}\abinodiroverride\ltrch Example:}{\cf2\f0\fs24\lang1033{\*\listtag0}\par}
\pard\plain\ltrpar\ql\sl240\slmult1\itap0{\cf2\f0\fs24\lang1033{\*\listtag0}\par}
\pard\plain\ltrpar\ql\sl240\slmult1\itap0{\cf2\f0\fs24\lang1033{\*\listtag0}\abinodiroverride\ltrch The following example loads the menu color indexes into a local array.}{\cf2\f0\fs24\lang1033{\*\listtag0}\par}
\pard\plain\ltrpar\ql\sl240\slmult1\itap0{\cf2\f0\fs24\b\lang1033{\*\listtag0}\par}
\pard\plain\ltrpar\ql\sl240\slmult1\itap0{\cf2\f0\fs24\b\lang1033{\*\listtag0}\abinodiroverride\ltrch intmenu_color_indexes[5];}{\cf2\f0\fs24\b\lang1033{\*\listtag0}\par}
\pard\plain\ltrpar\ql\sl240\slmult1\itap0{\cf2\f0\fs24\b\lang1033{\*\listtag0}\abinodiroverride\ltrch GetMenuIndexes(menu_color_indexes);}{\cf2\f0\fs24\b\lang1033{\*\listtag0}\par}
\pard\plain\ltrpar\ql\sl240\slmult1\itap0{\cf2\f0\fs24\lang1033{\*\listtag0}\par}
\pard\plain\ltrpar\ql\sl240\slmult1\itap0{\cf2\f0\fs24\b\lang1033{\*\listtag0}\par}
\pard\plain\ltrpar\ql\sl240\slmult1\itap0{\cf2\f0\fs24\b\lang1033{\*\listtag0}\abinodiroverride\ltrch void RgbToHls(int r, int g, int b, int *h, int *l, int *s)}{\cf2\f0\fs24\b\lang1033{\*\listtag0}\par}
\pard\plain\ltrpar\ql\sl240\slmult1\itap0{\cf2\f0\fs24\lang1033{\*\listtag0}\par}
\pard\plain\ltrpar\ql\sl240\slmult1\itap0{\cf2\f0\fs24\lang1033{\*\listtag0}\abinodiroverride\ltrch This function converts an RGB color value to the equivalent HLS color value.  This function is available in the v1.1 version of the POE module.}{\cf2\f0\fs24\lang1033{\*\listtag0}\par}
\pard\plain\ltrpar\ql\sl240\slmult1\itap0{\cf2\f0\fs24\lang1033{\*\listtag0}\par}
\pard\plain\ltrpar\ql\sl240\slmult1\itap0{\cf2\f0\fs24\lang1033{\*\listtag0}\abinodiroverride\ltrch Input:}{\cf2\f0\fs24\lang1033{\*\listtag0}\par}
\pard\plain\ltrpar\ql\sl240\slmult1\itap0{\cf2\f0\fs24\lang1033{\*\listtag0}\par}
\pard\plain\ltrpar\ql\sl240\slmult1\itap0{\cf2\f0\fs24\lang1033{\*\listtag0}\abinodiroverride\ltrch The }{\cf2\f0\fs24\b\lang1033{\*\listtag0}r}{\cf2\f0\fs24\lang1033{\*\listtag0}, }{\cf2\f0\fs24\b\lang1033{\*\listtag0}b}{\cf2\f0\fs24\lang1033{\*\listtag0}, and }{\cf2\f0\fs24\b\lang1033{\*\listtag0}b}{\cf2\f0\fs24\lang1033{\*\listtag0} parameters are integers containing the RGB color components.  The }{\cf2\f0\fs24\b\lang1033{\*\listtag0}h}{\cf2\f0\fs24\lang1033{\*\listtag0}, }{\cf2\f0\fs24\b\lang1033{\*\listtag0}l}{\cf2\f0\fs24\lang1033{\*\listtag0}, and }{\cf2\f0\fs24\b\lang1033{\*\listtag0}s}{\cf2\f0\fs24\lang1033{\*\listtag0} parameters are pointers to integers which will receive the converted values.}{\cf2\f0\fs24\lang1033{\*\listtag0}\par}
\pard\plain\ltrpar\ql\sl240\slmult1\itap0{\cf2\f0\fs24\lang1033{\*\listtag0}\par}
\pard\plain\ltrpar\ql\sl240\slmult1\itap0{\cf2\f0\fs24\lang1033{\*\listtag0}\abinodiroverride\ltrch Output:}{\cf2\f0\fs24\lang1033{\*\listtag0}\par}
\pard\plain\ltrpar\ql\sl240\slmult1\itap0{\cf2\f0\fs24\lang1033{\*\listtag0}\par}
\pard\plain\ltrpar\ql\sl240\slmult1\itap0{\cf2\f0\fs24\lang1033{\*\listtag0}\abinodiroverride\ltrch After the call, integers pointed to by }{\cf2\f0\fs24\b\lang1033{\*\listtag0}*h}{\cf2\f0\fs24\lang1033{\*\listtag0}, }{\cf2\f0\fs24\b\lang1033{\*\listtag0}*l}{\cf2\f0\fs24\lang1033{\*\listtag0}, and }{\cf2\f0\fs24\b\lang1033{\*\listtag0}*s}{\cf2\f0\fs24\lang1033{\*\listtag0} will contain the hue, luminence, and saturation values.}{\cf2\f0\fs24\lang1033{\*\listtag0}\par}
\pard\plain\ltrpar\ql\sl240\slmult1\itap0{\cf2\f0\fs24\lang1033{\*\listtag0}\par}
\pard\plain\ltrpar\ql\sl240\slmult1\itap0{\cf2\f0\fs24\lang1033{\*\listtag0}\abinodiroverride\ltrch Example:}{\cf2\f0\fs24\lang1033{\*\listtag0}\par}
\pard\plain\ltrpar\ql\sl240\slmult1\itap0{\cf2\f0\fs24\lang1033{\*\listtag0}\par}
\pard\plain\ltrpar\ql\sl240\slmult1\itap0{\cf2\f0\fs24\lang1033{\*\listtag0}\abinodiroverride\ltrch The following example loads color #27 from the palette, then converts it to its HLS equivalent:}{\cf2\f0\fs24\lang1033{\*\listtag0}\par}
\pard\plain\ltrpar\ql\sl240\slmult1\itap0{\cf2\f0\fs24\b\lang1033{\*\listtag0}\par}
\pard\plain\ltrpar\ql\sl240\slmult1\itap0{\cf2\f0\fs24\b\lang1033{\*\listtag0}\abinodiroverride\ltrch intr,g,b;}{\cf2\f0\fs24\b\lang1033{\*\listtag0}\par}
\pard\plain\ltrpar\ql\sl240\slmult1\itap0{\cf2\f0\fs24\b\lang1033{\*\listtag0}\abinodiroverride\ltrch inth,l,s;}{\cf2\f0\fs24\b\lang1033{\*\listtag0}\par}
\pard\plain\ltrpar\ql\sl240\slmult1\itap0{\cf2\f0\fs24\b\lang1033{\*\listtag0}\abinodiroverride\ltrch GetColorMap(27, &r, &g, &b);}{\cf2\f0\fs24\b\lang1033{\*\listtag0}\par}
\pard\plain\ltrpar\ql\sl240\slmult1\itap0{\cf2\f0\fs24\b\lang1033{\*\listtag0}\abinodiroverride\ltrch RgbToHls(r, g, b, &h, &l, &s);}{\cf2\f0\fs24\b\lang1033{\*\listtag0}\par}
\pard\plain\ltrpar\ql\sl240\slmult1\itap0{\cf2\f0\fs24\lang1033{\*\listtag0}\par}
\pard\plain\ltrpar\ql\sl240\slmult1\itap0{\cf2\f0\fs24\b\lang1033{\*\listtag0}\par}
\pard\plain\ltrpar\ql\sl240\slmult1\itap0{\cf2\f0\fs24\b\lang1033{\*\listtag0}\abinodiroverride\ltrch void HlsToRgb(int *r, int *g, int *b, int h, int l, int s)}{\cf2\f0\fs24\b\lang1033{\*\listtag0}\par}
\pard\plain\ltrpar\ql\sl240\slmult1\itap0{\cf2\f0\fs24\lang1033{\*\listtag0}\par}
\pard\plain\ltrpar\ql\sl240\slmult1\itap0{\cf2\f0\fs24\lang1033{\*\listtag0}\abinodiroverride\ltrch This function converts an HLS color value to the equivalent RGB color value.  This function is available in the v1.1 version of the POE module.}{\cf2\f0\fs24\lang1033{\*\listtag0}\par}
\pard\plain\ltrpar\ql\sl240\slmult1\itap0{\cf2\f0\fs24\lang1033{\*\listtag0}\abinodiroverride\ltrch \page }{\cf2\f0\fs24\lang1033{\*\listtag0}\par}
\pard\plain\ltrpar\ql\sl240\slmult1\itap0{\cf2\f0\fs24\lang1033{\*\listtag0}\par}
\pard\plain\ltrpar\ql\sl240\slmult1\itap0{\cf2\f0\fs24\lang1033{\*\listtag0}\abinodiroverride\ltrch Input:}{\cf2\f0\fs24\lang1033{\*\listtag0}\par}
\pard\plain\ltrpar\ql\sl240\slmult1\itap0{\cf2\f0\fs24\lang1033{\*\listtag0}\par}
\pard\plain\ltrpar\ql\sl240\slmult1\itap0{\cf2\f0\fs24\lang1033{\*\listtag0}\abinodiroverride\ltrch The }{\cf2\f0\fs24\b\lang1033{\*\listtag0}h}{\cf2\f0\fs24\lang1033{\*\listtag0}, }{\cf2\f0\fs24\b\lang1033{\*\listtag0}l}{\cf2\f0\fs24\lang1033{\*\listtag0}, and }{\cf2\f0\fs24\b\lang1033{\*\listtag0}s}{\cf2\f0\fs24\lang1033{\*\listtag0} parameters are integers containing the HLS color components.  The }{\cf2\f0\fs24\b\lang1033{\*\listtag0}r}{\cf2\f0\fs24\lang1033{\*\listtag0}, }{\cf2\f0\fs24\b\lang1033{\*\listtag0}g}{\cf2\f0\fs24\lang1033{\*\listtag0}, and }{\cf2\f0\fs24\b\lang1033{\*\listtag0}b}{\cf2\f0\fs24\lang1033{\*\listtag0} parameters are pointers to integers which will receive the converted values.}{\cf2\f0\fs24\lang1033{\*\listtag0}\par}
\pard\plain\ltrpar\ql\sl240\slmult1\itap0{\cf2\f0\fs24\lang1033{\*\listtag0}\par}
\pard\plain\ltrpar\ql\sl240\slmult1\itap0{\cf2\f0\fs24\lang1033{\*\listtag0}\abinodiroverride\ltrch Output:}{\cf2\f0\fs24\lang1033{\*\listtag0}\par}
\pard\plain\ltrpar\ql\sl240\slmult1\itap0{\cf2\f0\fs24\lang1033{\*\listtag0}\par}
\pard\plain\ltrpar\ql\sl240\slmult1\itap0{\cf2\f0\fs24\lang1033{\*\listtag0}\abinodiroverride\ltrch After the call, integers pointed to by }{\cf2\f0\fs24\b\lang1033{\*\listtag0}*r}{\cf2\f0\fs24\lang1033{\*\listtag0}, }{\cf2\f0\fs24\b\lang1033{\*\listtag0}*g}{\cf2\f0\fs24\lang1033{\*\listtag0}, and }{\cf2\f0\fs24\b\lang1033{\*\listtag0}*b}{\cf2\f0\fs24\lang1033{\*\listtag0} will contain the red, green, and blue color values.}{\cf2\f0\fs24\lang1033{\*\listtag0}\par}
\pard\plain\ltrpar\ql\sl240\slmult1\itap0{\cf2\f0\fs24\lang1033{\*\listtag0}\par}
\pard\plain\ltrpar\ql\sl240\slmult1\itap0{\cf2\f0\fs24\lang1033{\*\listtag0}\abinodiroverride\ltrch Example:}{\cf2\f0\fs24\lang1033{\*\listtag0}\par}
\pard\plain\ltrpar\ql\sl240\slmult1\itap0{\cf2\f0\fs24\lang1033{\*\listtag0}\par}
\pard\plain\ltrpar\ql\sl240\slmult1\itap0{\cf2\f0\fs24\lang1033{\*\listtag0}\abinodiroverride\ltrch The following example converts an HLS color to RGB:}{\cf2\f0\fs24\lang1033{\*\listtag0}\par}
\pard\plain\ltrpar\ql\sl240\slmult1\itap0{\cf2\f0\fs24\b\lang1033{\*\listtag0}\par}
\pard\plain\ltrpar\ql\sl240\slmult1\itap0{\cf2\f0\fs24\b\lang1033{\*\listtag0}\abinodiroverride\ltrch intr,g,b;}{\cf2\f0\fs24\b\lang1033{\*\listtag0}\par}
\pard\plain\ltrpar\ql\sl240\slmult1\itap0{\cf2\f0\fs24\b\lang1033{\*\listtag0}\abinodiroverride\ltrch inth,l,s;}{\cf2\f0\fs24\b\lang1033{\*\listtag0}\par}
\pard\plain\ltrpar\ql\sl240\slmult1\itap0{\cf2\f0\fs24\b\lang1033{\*\listtag0}\abinodiroverride\ltrch HlsToRgb(&r, &g, &b, h, l, s);}{\cf2\f0\fs24\b\lang1033{\*\listtag0}\par}
\pard\plain\ltrpar\ql\sl240\slmult1\itap0{\cf2\f0\fs24\b\lang1033{\*\listtag0}\abinodiroverride\ltrch \page }{\cf2\f0\fs24\b\lang1033{\*\listtag0}\par}
\pard\plain\ltrpar\ql\sl240\slmult1\itap0{\cf2\f0\fs24\lang1033{\*\listtag0}\abinodiroverride\ltrch \page }{\cf2\f0\fs24\lang1033{\*\listtag0}\par}
\pard\plain\ltrpar\ql\sl240\slmult1\itap0{\cf2\f0\fs28\b\lang1033{\*\listtag0}\abinodiroverride\ltrch PSTAMP.POE}{\cf2\f0\fs28\b\lang1033{\*\listtag0}\par}
\pard\plain\ltrpar\ql\sl240\slmult1\itap0{\cf2\f0\fs24\lang1033{\*\listtag0}\par}
\pard\plain\ltrpar\ql\sl240\slmult1\itap0{\cf2\f0\fs24\lang1033{\*\listtag0}\par}
\pard\plain\ltrpar\ql\sl240\slmult1\itap0{\cf2\f0\fs24\lang1033{\*\listtag0}\abinodiroverride\ltrch The PSTAMP POE module provides 3 related functions for shrinking the image on an arbitrary screen to a }{\cf2\f0\fs24\i\lang1033{\*\listtag0}postage stamp}{\cf2\f0\fs24\lang1033{\*\listtag0} sized image on another screen.  Two of the functions provide housekeeping functions to initialize and finalize the output screen.  The other function performs the actual image reduction work.}{\cf2\f0\fs24\lang1033{\*\listtag0}\par}
\pard\plain\ltrpar\ql\sl240\slmult1\itap0{\cf2\f0\fs24\lang1033{\*\listtag0}\par}
\pard\plain\ltrpar\ql\sl240\slmult1\itap0{\cf2\f0\fs24\lang1033{\*\listtag0}\abinodiroverride\ltrch This module was originally written to provide a performance boost to FLISUMRY.POC, a Poco program which summarizes an entire flic into a series of postage stamp images on a single frame or two.  Since there may be other good uses for a function that downscales images quickly, the interface to the workhorse scaling function was kept fairly general.}{\cf2\f0\fs24\lang1033{\*\listtag0}\par}
\pard\plain\ltrpar\ql\sl240\slmult1\itap0{\cf2\f0\fs24\lang1033{\*\listtag0}\par}
\pard\plain\ltrpar\ql\sl240\slmult1\itap0{\cf2\f0\fs24\lang1033{\*\listtag0}\abinodiroverride\ltrch PSTAMP uses a }{\cf2\f0\fs24\i\lang1033{\*\listtag0}six-cube}{\cf2\f0\fs24\lang1033{\*\listtag0} color palette to provide independence from the palette(s) of the input images.  The six-cube palette takes advantage of the fact that a reduced-size image can get away with a reduced-accuracy color palette while still conveying the basic information of the original.  A variety of input images with vastly different color palettes can be quickly rendered as postage stamp images on a single output screen.  The six-cube palette sacrifices some color accuracy instead of using the extremely time-consuming method of reducing all the input palettes to a single 'best fit' output palette.}{\cf2\f0\fs24\lang1033{\*\listtag0}\par}
\pard\plain\ltrpar\ql\sl240\slmult1\itap0{\cf2\f0\fs24\lang1033{\*\listtag0}\par}
\pard\plain\ltrpar\ql\sl240\slmult1\itap0{\cf2\f0\fs24\lang1033{\*\listtag0}\abinodiroverride\ltrch Any type of Animator Pro screen can be used for the input and output screens.  This includes the current frame of the flic (the picscreen), the swapscreen, the celscreen, or a virtual or ram-based screen created by another POE module.}{\cf2\f0\fs24\lang1033{\*\listtag0}\par}
\pard\plain\ltrpar\ql\sl240\slmult1\itap0{\cf2\f0\fs24\lang1033{\*\listtag0}\par}
\pard\plain\ltrpar\ql\sl240\slmult1\itap0{\cf2\f0\fs24\lang1033{\*\listtag0}\abinodiroverride\ltrch The source code for PSTAMP.POE is included in POEKIT.}{\cf2\f0\fs24\lang1033{\*\listtag0}\par}
\pard\plain\ltrpar\ql\sl240\slmult1\itap0{\cf2\f0\fs24\lang1033{\*\listtag0}\par}
\pard\plain\ltrpar\ql\sl240\slmult1\itap0{\cf2\f0\fs24\b\lang1033{\*\listtag0}\par}
\pard\plain\ltrpar\ql\sl240\slmult1\itap0{\cf2\f0\fs24\b\lang1033{\*\listtag0}\abinodiroverride\ltrch void InitPstampScreen(Screen *s)}{\cf2\f0\fs24\b\lang1033{\*\listtag0}\par}
\pard\plain\ltrpar\ql\sl240\slmult1\itap0{\cf2\f0\fs24\lang1033{\*\listtag0}\par}
\pard\plain\ltrpar\ql\sl240\slmult1\itap0{\cf2\f0\fs24\lang1033{\*\listtag0}\abinodiroverride\ltrch This function prepares a screen to receive postage stamp images.  A screen }{\cf2\f0\fs24\i\lang1033{\*\listtag0}must}{\cf2\f0\fs24\lang1033{\*\listtag0} be initialized with this function before it is used as the destination of a }{\cf2\f0\fs24\b\lang1033{\*\listtag0}MakePstamp()}{\cf2\f0\fs24\lang1033{\*\listtag0} operation.  This function creates the six-cube color palette and loads it into the screen's color map, and clears the screen to color index zero.}{\cf2\f0\fs24\lang1033{\*\listtag0}\par}
\pard\plain\ltrpar\ql\sl240\slmult1\itap0{\cf2\f0\fs24\lang1033{\*\listtag0}\abinodiroverride\ltrch \page }{\cf2\f0\fs24\lang1033{\*\listtag0}\par}
\pard\plain\ltrpar\ql\sl240\slmult1\itap0{\cf2\f0\fs24\lang1033{\*\listtag0}\par}
\pard\plain\ltrpar\ql\sl240\slmult1\itap0{\cf2\f0\fs24\lang1033{\*\listtag0}\abinodiroverride\ltrch Input:}{\cf2\f0\fs24\lang1033{\*\listtag0}\par}
\pard\plain\ltrpar\ql\sl240\slmult1\itap0{\cf2\f0\fs24\lang1033{\*\listtag0}\par}
\pard\plain\ltrpar\ql\sl240\slmult1\itap0{\cf2\f0\fs24\lang1033{\*\listtag0}\abinodiroverride\ltrch A pointer to a screen.  From Poco, this is a }{\cf2\f0\fs24\b\lang1033{\*\listtag0}Screen*}{\cf2\f0\fs24\lang1033{\*\listtag0} type.  From another POE module, this is any type of }{\cf2\f0\fs24\b\lang1033{\*\listtag0}Rcel}{\cf2\f0\fs24\lang1033{\*\listtag0}.}{\cf2\f0\fs24\lang1033{\*\listtag0}\par}
\pard\plain\ltrpar\ql\sl240\slmult1\itap0{\cf2\f0\fs24\lang1033{\*\listtag0}\par}
\pard\plain\ltrpar\ql\sl240\slmult1\itap0{\cf2\f0\fs24\b\lang1033{\*\listtag0}\par}
\pard\plain\ltrpar\ql\sl240\slmult1\itap0{\cf2\f0\fs24\b\lang1033{\*\listtag0}\abinodiroverride\ltrch void CleanupPstampScreen(Screen *s)}{\cf2\f0\fs24\b\lang1033{\*\listtag0}\par}
\pard\plain\ltrpar\ql\sl240\slmult1\itap0{\cf2\f0\fs24\lang1033{\*\listtag0}\par}
\pard\plain\ltrpar\ql\sl240\slmult1\itap0{\cf2\f0\fs24\lang1033{\*\listtag0}\abinodiroverride\ltrch This function releases system resources acquired by the }{\cf2\f0\fs24\b\lang1033{\*\listtag0}InitPstampScreen()}{\cf2\f0\fs24\lang1033{\*\listtag0} function, and indicates that you are done drawing postage stamp images to the screen.  You }{\cf2\f0\fs24\i\lang1033{\*\listtag0}must}{\cf2\f0\fs24\lang1033{\*\listtag0} call this when you are done rendering postage stamps on a given screen.  When the screen is the current flic frame (the picscreen), you must call this before moving to another frame in the flic.  (It is this function that signals to Animator Pro that the contents of the picscreen have been modified, and the frame needs to be recompressed.)}{\cf2\f0\fs24\lang1033{\*\listtag0}\par}
\pard\plain\ltrpar\ql\sl240\slmult1\itap0{\cf2\f0\fs24\lang1033{\*\listtag0}\par}
\pard\plain\ltrpar\ql\sl240\slmult1\itap0{\cf2\f0\fs24\lang1033{\*\listtag0}\abinodiroverride\ltrch Input:}{\cf2\f0\fs24\lang1033{\*\listtag0}\par}
\pard\plain\ltrpar\ql\sl240\slmult1\itap0{\cf2\f0\fs24\lang1033{\*\listtag0}\par}
\pard\plain\ltrpar\ql\sl240\slmult1\itap0{\cf2\f0\fs24\lang1033{\*\listtag0}\abinodiroverride\ltrch A pointer to a screen; the same pointer that was passed to the }{\cf2\f0\fs24\b\lang1033{\*\listtag0}InitPstampScreen()}{\cf2\f0\fs24\lang1033{\*\listtag0} function.}{\cf2\f0\fs24\lang1033{\*\listtag0}\par}
\pard\plain\ltrpar\ql\sl240\slmult1\itap0{\cf2\f0\fs24\lang1033{\*\listtag0}\par}
\pard\plain\ltrpar\ql\sl240\slmult1\itap0{\cf2\f0\fs24\b\lang1033{\*\listtag0}\par}
\pard\plain\ltrpar\ql\sl240\slmult1\itap0{\cf2\f0\fs24\b\lang1033{\*\listtag0}\abinodiroverride\ltrch void MakePstamp(Screen *source, Screen *dest,}{\cf2\f0\fs24\b\lang1033{\*\listtag0}\par}
\pard\plain\ltrpar\ql\sl240\slmult1\itap0{\cf2\f0\fs24\b\lang1033{\*\listtag0}\abinodiroverride\ltrch       int dx, int dy, int dw, int dh, }{\cf2\f0\fs24\b\lang1033{\*\listtag0}\par}
\pard\plain\ltrpar\ql\sl240\slmult1\itap0{\cf2\f0\fs24\b\lang1033{\*\listtag0}\abinodiroverride\ltrch       Boolean draw_border)}{\cf2\f0\fs24\b\lang1033{\*\listtag0}\par}
\pard\plain\ltrpar\ql\sl240\slmult1\itap0{\cf2\f0\fs24\lang1033{\*\listtag0}\par}
\pard\plain\ltrpar\ql\sl240\slmult1\itap0{\cf2\f0\fs24\lang1033{\*\listtag0}\par}
\pard\plain\ltrpar\ql\sl240\slmult1\itap0{\cf2\f0\fs24\lang1033{\*\listtag0}\abinodiroverride\ltrch This function reduces the image stored in the }{\cf2\f0\fs24\b\lang1033{\*\listtag0}source}{\cf2\f0\fs24\lang1033{\*\listtag0} screen to a smaller image on the }{\cf2\f0\fs24\b\lang1033{\*\listtag0}dest}{\cf2\f0\fs24\lang1033{\*\listtag0} screen.  }{\cf2\f0\fs24\lang1033{\*\listtag0}\par}
\pard\plain\ltrpar\ql\sl240\slmult1\itap0{\cf2\f0\fs24\lang1033{\*\listtag0}\par}
\pard\plain\ltrpar\ql\sl240\slmult1\itap0{\cf2\f0\fs24\lang1033{\*\listtag0}\abinodiroverride\ltrch The entire input screen is processed; there is no way to specify a subset of the input screen for processing.  You can, of course, clip a portion of an image into the celscreen and then use that as input to this function.  Other POE modules, which have access to GFX library functions, may build a virtual raster over the input screen, and use the virtual raster as the }{\cf2\f0\fs24\b\lang1033{\*\listtag0}source}{\cf2\f0\fs24\lang1033{\*\listtag0} parameter to this function.  Poco programs don't have direct access to virtual rasters.}{\cf2\f0\fs24\lang1033{\*\listtag0}\par}
\pard\plain\ltrpar\ql\sl240\slmult1\itap0{\cf2\f0\fs24\lang1033{\*\listtag0}\par}
\pard\plain\ltrpar\ql\sl240\slmult1\itap0{\cf2\f0\fs24\lang1033{\*\listtag0}\abinodiroverride\ltrch The reduced size output image is placed on the }{\cf2\f0\fs24\b\lang1033{\*\listtag0}dest}{\cf2\f0\fs24\lang1033{\*\listtag0} screen as specified in the }{\cf2\f0\fs24\b\lang1033{\*\listtag0}dx}{\cf2\f0\fs24\lang1033{\*\listtag0}, }{\cf2\f0\fs24\b\lang1033{\*\listtag0}dy}{\cf2\f0\fs24\lang1033{\*\listtag0}, }{\cf2\f0\fs24\b\lang1033{\*\listtag0}dw}{\cf2\f0\fs24\lang1033{\*\listtag0}, and }{\cf2\f0\fs24\b\lang1033{\*\listtag0}dh}{\cf2\f0\fs24\lang1033{\*\listtag0} parameters.  The }{\cf2\f0\fs24\b\lang1033{\*\listtag0}dest}{\cf2\f0\fs24\lang1033{\*\listtag0} screen can be of any size and type, and need not be the same size or type as the }{\cf2\f0\fs24\b\lang1033{\*\listtag0}source}{\cf2\f0\fs24\lang1033{\*\listtag0} screen.  }{\cf2\f0\fs24\lang1033{\*\listtag0}\par}
\pard\plain\ltrpar\ql\sl240\slmult1\itap0{\cf2\f0\fs24\lang1033{\*\listtag0}\par}
\pard\plain\ltrpar\ql\sl240\slmult1\itap0{\cf2\f0\fs24\lang1033{\*\listtag0}\abinodiroverride\ltrch If the }{\cf2\f0\fs24\b\lang1033{\*\listtag0}draw_border}{\cf2\f0\fs24\lang1033{\*\listtag0} parameter is non-zero (}{\cf2\f0\fs24\b\lang1033{\*\listtag0}TRUE}{\cf2\f0\fs24\lang1033{\*\listtag0}), a border box is drawn around the postage stamp image.  By default, the border box is a medium blue color.  It is drawn with color index 255; that index is not used by the six-cube}{\cf2\f0\fs24\lang1033{\*\listtag0}\par}
\pard\plain\ltrpar\ql\sl240\slmult1\itap0{\cf2\f0\fs24\lang1033{\*\listtag0}\abinodiroverride\ltrch \page  color space.  You can change the color of palette slot 255 to any value you want without disturbing the postage stamp images.  (Change the palette }{\cf2\f0\fs24\i\lang1033{\*\listtag0}after}{\cf2\f0\fs24\lang1033{\*\listtag0} calling }{\cf2\f0\fs24\b\lang1033{\*\listtag0}InitPstampScreen()}{\cf2\f0\fs24\lang1033{\*\listtag0}, but }{\cf2\f0\fs24\i\lang1033{\*\listtag0}before}{\cf2\f0\fs24\lang1033{\*\listtag0} }{\cf2\f0\fs24\b\lang1033{\*\listtag0}CleanupPstampScreen()}{\cf2\f0\fs24\lang1033{\*\listtag0}.)}{\cf2\f0\fs24\lang1033{\*\listtag0}\par}
\pard\plain\ltrpar\ql\sl240\slmult1\itap0{\cf2\f0\fs24\lang1033{\*\listtag0}\par}
\pard\plain\ltrpar\ql\sl240\slmult1\itap0{\cf2\f0\fs24\lang1033{\*\listtag0}\abinodiroverride\ltrch It is }{\cf2\f0\fs24\i\lang1033{\*\listtag0}not}{\cf2\f0\fs24\lang1033{\*\listtag0} possible to expand an image with this function.  If the }{\cf2\f0\fs24\b\lang1033{\*\listtag0}dw}{\cf2\f0\fs24\lang1033{\*\listtag0} or }{\cf2\f0\fs24\b\lang1033{\*\listtag0}dh}{\cf2\f0\fs24\lang1033{\*\listtag0} parameters are larger than the source screen's width or height, the scaling is forced to 1:1 internally for that axis.  If both }{\cf2\f0\fs24\b\lang1033{\*\listtag0}dw}{\cf2\f0\fs24\lang1033{\*\listtag0} and }{\cf2\f0\fs24\b\lang1033{\*\listtag0}dh}{\cf2\f0\fs24\lang1033{\*\listtag0} are greater than or equal to the source screen sizes, the net effect is that the image will be rendered at 1:1 scaling in a six-cube color space.  It is unlikely that this will produce desirable results.}{\cf2\f0\fs24\lang1033{\*\listtag0}\par}
\pard\plain\ltrpar\ql\sl240\slmult1\itap0{\cf2\f0\fs24\lang1033{\*\listtag0}\par}
\pard\plain\ltrpar\ql\sl240\slmult1\itap0{\cf2\f0\fs24\lang1033{\*\listtag0}\abinodiroverride\ltrch It }{\cf2\f0\fs24\i\lang1033{\*\listtag0}is}{\cf2\f0\fs24\lang1033{\*\listtag0} possible (but generally not useful) to change the aspect ratio of an image as it is scaled.  It is your responsibility to ensure that the aspect ratio is maintained by providing }{\cf2\f0\fs24\b\lang1033{\*\listtag0}dw}{\cf2\f0\fs24\lang1033{\*\listtag0} and }{\cf2\f0\fs24\b\lang1033{\*\listtag0}dh}{\cf2\f0\fs24\lang1033{\*\listtag0} values that are properly proportional to the source screen's width and height.  (That is, if the width is being reduced by a factor of 3, make sure the height parameter also reflects a 3:1 reduction.)}{\cf2\f0\fs24\lang1033{\*\listtag0}\par}
\pard\plain\ltrpar\ql\sl240\slmult1\itap0{\cf2\f0\fs24\lang1033{\*\listtag0}\par}
\pard\plain\ltrpar\ql\sl240\slmult1\itap0{\cf2\f0\fs24\lang1033{\*\listtag0}\abinodiroverride\ltrch The smallest legal }{\cf2\f0\fs24\b\lang1033{\*\listtag0}dw}{\cf2\f0\fs24\lang1033{\*\listtag0}, }{\cf2\f0\fs24\b\lang1033{\*\listtag0}dh}{\cf2\f0\fs24\lang1033{\*\listtag0} values are 10, 10.  (A picture rendered smaller than 10x10 on the destination screen is not likely to carry useable detail, after all.)  In general, the smaller the output postage stamp, the faster the rendering.  (A 1:1 reduction is the slowest, a 5:1 (or more) reduction screams right along.)}{\cf2\f0\fs24\lang1033{\*\listtag0}\par}
\pard\plain\ltrpar\ql\sl240\slmult1\itap0{\cf2\f0\fs24\lang1033{\*\listtag0}\par}
\pard\plain\ltrpar\ql\sl240\slmult1\itap0{\cf2\f0\fs24\lang1033{\*\listtag0}\abinodiroverride\ltrch Input:}{\cf2\f0\fs24\lang1033{\*\listtag0}\par}
\pard\plain\ltrpar\ql\sl240\slmult1\itap0{\cf2\f0\fs24\lang1033{\*\listtag0}\par}
\pard\plain\ltrpar\ql\sl240\slmult1\itap0{\cf2\f0\fs24\lang1033{\*\listtag0}\abinodiroverride\ltrch The }{\cf2\f0\fs24\b\lang1033{\*\listtag0}source}{\cf2\f0\fs24\lang1033{\*\listtag0} parameter is a pointer to the input screen.  The }{\cf2\f0\fs24\b\lang1033{\*\listtag0}dest}{\cf2\f0\fs24\lang1033{\*\listtag0} parameter is a pointer to the output screen.  The }{\cf2\f0\fs24\b\lang1033{\*\listtag0}dx}{\cf2\f0\fs24\lang1033{\*\listtag0} and }{\cf2\f0\fs24\b\lang1033{\*\listtag0}dy}{\cf2\f0\fs24\lang1033{\*\listtag0} parameters specify the x,y location of the upper left corner of the postage stamp image on the output screen.  The }{\cf2\f0\fs24\b\lang1033{\*\listtag0}dw}{\cf2\f0\fs24\lang1033{\*\listtag0} and }{\cf2\f0\fs24\b\lang1033{\*\listtag0}dh}{\cf2\f0\fs24\lang1033{\*\listtag0} parameters specify the width and height of the postage stamp image on the output screen.  The }{\cf2\f0\fs24\b\lang1033{\*\listtag0}draw_border}{\cf2\f0\fs24\lang1033{\*\listtag0} parameter, when non-zero, causes a bordering box to be drawn around the }{\cf2\f0\fs24\b\lang1033{\*\listtag0}dx}{\cf2\f0\fs24\lang1033{\*\listtag0}, }{\cf2\f0\fs24\b\lang1033{\*\listtag0}dy}{\cf2\f0\fs24\lang1033{\*\listtag0}, }{\cf2\f0\fs24\b\lang1033{\*\listtag0}dw}{\cf2\f0\fs24\lang1033{\*\listtag0}, }{\cf2\f0\fs24\b\lang1033{\*\listtag0}dh}{\cf2\f0\fs24\lang1033{\*\listtag0} coordinates of the output screen.}{\cf2\f0\fs24\lang1033{\*\listtag0}\par}
\pard\plain\ltrpar\ql\sl240\slmult1\itap0{\cf2\f0\fs24\lang1033{\*\listtag0}\abinodiroverride\ltrch \page }{\cf2\f0\fs24\lang1033{\*\listtag0}\par}
\pard\plain\ltrpar\ql\sl240\slmult1\itap0{\cf2\f0\fs24\lang1033{\*\listtag0}\abinodiroverride\ltrch \page }{\cf2\f0\fs24\lang1033{\*\listtag0}\par}
\pard\plain\ltrpar\ql\sl240\slmult1\itap0{\cf2\f0\fs28\b\lang1033{\*\listtag0}\abinodiroverride\ltrch PDRACCES.POE}{\cf2\f0\fs28\b\lang1033{\*\listtag0}\par}
\pard\plain\ltrpar\ql\sl240\slmult1\itap0{\cf2\f0\fs24\lang1033{\*\listtag0}\par}
\pard\plain\ltrpar\ql\sl240\slmult1\itap0{\cf2\f0\fs24\lang1033{\*\listtag0}\par}
\pard\plain\ltrpar\ql\sl240\slmult1\itap0{\cf2\f0\fs24\lang1033{\*\listtag0}\abinodiroverride\ltrch The PDRACCES POE module provides a set of functions for accessing the full capabilities of a picture driver (PDR) module.  Animator Pro has direct support for the basic PDR operations.  The ANICONV image conversion program contains support for extended PDR operations, including RGB input, and prompting of the user for output options.  The PDRACCES POE module provides access to the extended PDR operations from within Animator Pro.}{\cf2\f0\fs24\lang1033{\*\listtag0}\par}
\pard\plain\ltrpar\ql\sl240\slmult1\itap0{\cf2\f0\fs24\lang1033{\*\listtag0}\par}
\pard\plain\ltrpar\ql\sl240\slmult1\itap0{\cf2\f0\fs24\lang1033{\*\listtag0}\par}
\pard\plain\ltrpar\ql\sl240\slmult1\itap0{\cf2\f0\fs24\lang1033{\*\listtag0}\abinodiroverride\ltrch PDRACCES contains a built in table which maps file types to the PDR that handles that type.  (The file type is based on the name of the file.)  When you use the }{\cf2\f0\fs24\b\lang1033{\*\listtag0}PicSave()}{\cf2\f0\fs24\lang1033{\*\listtag0} and }{\cf2\f0\fs24\b\lang1033{\*\listtag0}PicLoad()}{\cf2\f0\fs24\lang1033{\*\listtag0} functions, PDRACCES automatically searches this table and loads the appropriate PDR module (unless a PDR was pre-loaded with }{\cf2\f0\fs24\b\lang1033{\*\listtag0}PicDriverLoad()}{\cf2\f0\fs24\lang1033{\*\listtag0}).  The following table shows the built in relationships between filetypes and PDR modules:}{\cf2\f0\fs24\lang1033{\*\listtag0}\par}
\pard\plain\ltrpar\ql\sl240\slmult1\itap0{\cf2\f0\fs24\lang1033{\*\listtag0}\par}
\pard\plain\ltrpar\ql\sl240\slmult1\itap0{\cf2\f0\fs24\lang1033{\*\listtag0}\abinodiroverride\ltrch     }{\cf2\f0\fs24\ul\lang1033{\*\listtag0}File Type}{\cf2\f0\fs24\lang1033{\*\listtag0}    }{\cf2\f0\fs24\ul\lang1033{\*\listtag0}Picture Driver}{\cf2\f0\fs24\lang1033{\*\listtag0}\par}
\pard\plain\ltrpar\ql\sl240\slmult1\itap0{\cf2\f0\fs24\lang1033{\*\listtag0}\abinodiroverride\ltrch .GIF      GIF.PDR}{\cf2\f0\fs24\lang1033{\*\listtag0}\par}
\pard\plain\ltrpar\ql\sl240\slmult1\itap0{\cf2\f0\fs24\lang1033{\*\listtag0}\abinodiroverride\ltrch .PCX      PCX.PDR}{\cf2\f0\fs24\lang1033{\*\listtag0}\par}
\pard\plain\ltrpar\ql\sl240\slmult1\itap0{\cf2\f0\fs24\lang1033{\*\listtag0}\abinodiroverride\ltrch .TIF      TIFF.PDR}{\cf2\f0\fs24\lang1033{\*\listtag0}\par}
\pard\plain\ltrpar\ql\sl240\slmult1\itap0{\cf2\f0\fs24\lang1033{\*\listtag0}\abinodiroverride\ltrch .TGA      TARGA.PDR}{\cf2\f0\fs24\lang1033{\*\listtag0}\par}
\pard\plain\ltrpar\ql\sl240\slmult1\itap0{\cf2\f0\fs24\lang1033{\*\listtag0}\abinodiroverride\ltrch .LBM      LBM.PDR}{\cf2\f0\fs24\lang1033{\*\listtag0}\par}
\pard\plain\ltrpar\ql\sl240\slmult1\itap0{\cf2\f0\fs24\lang1033{\*\listtag0}\abinodiroverride\ltrch .RIF      RIF.PDR}{\cf2\f0\fs24\lang1033{\*\listtag0}\par}
\pard\plain\ltrpar\ql\sl240\slmult1\itap0{\cf2\f0\fs24\lang1033{\*\listtag0}\abinodiroverride\ltrch .MAC      MAC.PDR}{\cf2\f0\fs24\lang1033{\*\listtag0}\par}
\pard\plain\ltrpar\ql\sl240\slmult1\itap0{\cf2\f0\fs24\lang1033{\*\listtag0}\abinodiroverride\ltrch .NEO      NEO.PDR}{\cf2\f0\fs24\lang1033{\*\listtag0}\par}
\pard\plain\ltrpar\ql\sl240\slmult1\itap0{\cf2\f0\fs24\lang1033{\*\listtag0}\abinodiroverride\ltrch .PI? .PC? DEGAS.PDR}{\cf2\f0\fs24\lang1033{\*\listtag0}\par}
\pard\plain\ltrpar\ql\sl240\slmult1\itap0{\cf2\f0\fs24\lang1033{\*\listtag0}\abinodiroverride\ltrch .SLD      SLD.PDR}{\cf2\f0\fs24\lang1033{\*\listtag0}\par}
\pard\plain\ltrpar\ql\sl240\slmult1\itap0{\cf2\f0\fs24\lang1033{\*\listtag0}\abinodiroverride\ltrch .ANI      ANIM.PDR}{\cf2\f0\fs24\lang1033{\*\listtag0}\par}
\pard\plain\ltrpar\ql\sl240\slmult1\itap0{\cf2\f0\fs24\lang1033{\*\listtag0}\abinodiroverride\ltrch .PCT      PICT.PDR}{\cf2\f0\fs24\lang1033{\*\listtag0}\par}
\pard\plain\ltrpar\ql\sl240\slmult1\itap0{\cf2\f0\fs24\lang1033{\*\listtag0}\abinodiroverride\ltrch .BMP .RLE BMP.PDR}{\cf2\f0\fs24\lang1033{\*\listtag0}\par}
\pard\plain\ltrpar\ql\sl240\slmult1\itap0{\cf2\f0\fs24\lang1033{\*\listtag0}\abinodiroverride\ltrch .MOV      MOV.PDR}{\cf2\f0\fs24\lang1033{\*\listtag0}\par}
\pard\plain\ltrpar\ql\sl240\slmult1\itap0{\cf2\f0\fs24\lang1033{\*\listtag0}\abinodiroverride\ltrch .RND      RND.PDR}{\cf2\f0\fs24\lang1033{\*\listtag0}\par}
\pard\plain\ltrpar\ql\sl240\slmult1\itap0{\cf2\f0\fs24\lang1033{\*\listtag0}\par}
\pard\plain\ltrpar\ql\sl240\slmult1\itap0{\cf2\f0\fs24\lang1033{\*\listtag0}\abinodiroverride\ltrch Two versions of this POE module exist.  PDRACCES is the full version, PDRDEMO is an abbreviated version that doesn't contain the RGB input support.  The source code for PDRDEMO is included in the POEKIT development package, but the RGB processing code is proprietary, and the full PDRACCES source code cannot be distributed.}{\cf2\f0\fs24\lang1033{\*\listtag0}\par}
\pard\plain\ltrpar\ql\sl240\slmult1\itap0{\cf2\f0\fs24\lang1033{\*\listtag0}\par}
\pard\plain\ltrpar\ql\sl240\slmult1\itap0{\cf2\f0\fs24\b\lang1033{\*\listtag0}\par}
\pard\plain\ltrpar\ql\sl240\slmult1\itap0{\cf2\f0\fs24\b\lang1033{\*\listtag0}\abinodiroverride\ltrch void PicDriverUnload(void)}{\cf2\f0\fs24\b\lang1033{\*\listtag0}\par}
\pard\plain\ltrpar\ql\sl240\slmult1\itap0{\cf2\f0\fs24\lang1033{\*\listtag0}\par}
\pard\plain\ltrpar\ql\sl240\slmult1\itap0{\cf2\f0\fs24\lang1033{\*\listtag0}\abinodiroverride\ltrch This function unloads the currently-loaded picture driver module (if any).  This function can be called any number}{\cf2\f0\fs24\lang1033{\*\listtag0}\par}
\pard\plain\ltrpar\ql\sl240\slmult1\itap0{\cf2\f0\fs24\lang1033{\*\listtag0}\abinodiroverride\ltrch \page  of times, even if a picture driver isn't currently loaded.}{\cf2\f0\fs24\lang1033{\*\listtag0}\par}
\pard\plain\ltrpar\ql\sl240\slmult1\itap0{\cf2\f0\fs24\lang1033{\*\listtag0}\par}
\pard\plain\ltrpar\ql\sl240\slmult1\itap0{\cf2\f0\fs24\b\lang1033{\*\listtag0}\par}
\pard\plain\ltrpar\ql\sl240\slmult1\itap0{\cf2\f0\fs24\b\lang1033{\*\listtag0}\abinodiroverride\ltrch Errcode PicDriverLoad(char *pdrname)}{\cf2\f0\fs24\b\lang1033{\*\listtag0}\par}
\pard\plain\ltrpar\ql\sl240\slmult1\itap0{\cf2\f0\fs24\lang1033{\*\listtag0}\par}
\pard\plain\ltrpar\ql\sl240\slmult1\itap0{\cf2\f0\fs24\lang1033{\*\listtag0}\abinodiroverride\ltrch This function loads the named picture driver module.  The picture driver is always loaded from the Ani Pro resource directory.  This means that the name specified by }{\cf2\f0\fs24\b\lang1033{\*\listtag0}*pdrname}{\cf2\f0\fs24\lang1033{\*\listtag0} must not contain any drive or path information.}{\cf2\f0\fs24\lang1033{\*\listtag0}\par}
\pard\plain\ltrpar\ql\sl240\slmult1\itap0{\cf2\f0\fs24\lang1033{\*\listtag0}\par}
\pard\plain\ltrpar\ql\sl240\slmult1\itap0{\cf2\f0\fs24\lang1033{\*\listtag0}\abinodiroverride\ltrch You may not need to use this function.  The }{\cf2\f0\fs24\b\lang1033{\*\listtag0}PicSave()}{\cf2\f0\fs24\lang1033{\*\listtag0} and }{\cf2\f0\fs24\b\lang1033{\*\listtag0}PicLoad()}{\cf2\f0\fs24\lang1033{\*\listtag0} functions attempt to find and load the proper PDR module (based on the filetype) automatically.  You can, however, pre-load a PDR module to sidestep the automatic search and force a given file format regardless of the filetype contained in the filename.}{\cf2\f0\fs24\lang1033{\*\listtag0}\par}
\pard\plain\ltrpar\ql\sl240\slmult1\itap0{\cf2\f0\fs24\lang1033{\*\listtag0}\par}
\pard\plain\ltrpar\ql\sl240\slmult1\itap0{\cf2\f0\fs24\lang1033{\*\listtag0}\abinodiroverride\ltrch You must use this function to work with a PDR not contained in the table (above) that maps filetypes to PDR names.}{\cf2\f0\fs24\lang1033{\*\listtag0}\par}
\pard\plain\ltrpar\ql\sl240\slmult1\itap0{\cf2\f0\fs24\lang1033{\*\listtag0}\par}
\pard\plain\ltrpar\ql\sl240\slmult1\itap0{\cf2\f0\fs24\lang1033{\*\listtag0}\abinodiroverride\ltrch If another PDR is already loaded when this function is called, it is unloaded automatically.}{\cf2\f0\fs24\lang1033{\*\listtag0}\par}
\pard\plain\ltrpar\ql\sl240\slmult1\itap0{\cf2\f0\fs24\lang1033{\*\listtag0}\par}
\pard\plain\ltrpar\ql\sl240\slmult1\itap0{\cf2\f0\fs24\lang1033{\*\listtag0}\abinodiroverride\ltrch Input:}{\cf2\f0\fs24\lang1033{\*\listtag0}\par}
\pard\plain\ltrpar\ql\sl240\slmult1\itap0{\cf2\f0\fs24\lang1033{\*\listtag0}\par}
\pard\plain\ltrpar\ql\sl240\slmult1\itap0{\cf2\f0\fs24\lang1033{\*\listtag0}\abinodiroverride\ltrch The }{\cf2\f0\fs24\b\lang1033{\*\listtag0}pdrname}{\cf2\f0\fs24\lang1033{\*\listtag0} parameter is a pointer to a string which names the PDR module to load.  The filetype (.PDR, generally) must appear in the name.}{\cf2\f0\fs24\lang1033{\*\listtag0}\par}
\pard\plain\ltrpar\ql\sl240\slmult1\itap0{\cf2\f0\fs24\lang1033{\*\listtag0}\par}
\pard\plain\ltrpar\ql\sl240\slmult1\itap0{\cf2\f0\fs24\lang1033{\*\listtag0}\abinodiroverride\ltrch Output:}{\cf2\f0\fs24\lang1033{\*\listtag0}\par}
\pard\plain\ltrpar\ql\sl240\slmult1\itap0{\cf2\f0\fs24\b\lang1033{\*\listtag0}\par}
\pard\plain\ltrpar\ql\sl240\slmult1\itap0{\cf2\f0\fs24\b\lang1033{\*\listtag0}\abinodiroverride\ltrch Success}{\cf2\f0\fs24\lang1033{\*\listtag0} (0) if the PDR was loaded, or an appropriate negative }{\cf2\f0\fs24\b\lang1033{\*\listtag0}Errcode}{\cf2\f0\fs24\lang1033{\*\listtag0} value.}{\cf2\f0\fs24\b\lang1033{\*\listtag0}\par}
\pard\plain\ltrpar\ql\sl240\slmult1\itap0{\cf2\f0\fs24\lang1033{\*\listtag0}\par}
\pard\plain\ltrpar\ql\sl240\slmult1\itap0{\cf2\f0\fs24\b\lang1033{\*\listtag0}\par}
\pard\plain\ltrpar\ql\sl240\slmult1\itap0{\cf2\f0\fs24\b\lang1033{\*\listtag0}\abinodiroverride\ltrch Errcode PicDriverFindLoad(char *picpath)}{\cf2\f0\fs24\b\lang1033{\*\listtag0}\par}
\pard\plain\ltrpar\ql\sl240\slmult1\itap0{\cf2\f0\fs24\lang1033{\*\listtag0}\par}
\pard\plain\ltrpar\ql\sl240\slmult1\itap0{\cf2\f0\fs24\lang1033{\*\listtag0}\abinodiroverride\ltrch This function finds the PDR associated with the specified file and loads it.  This is analogous to the action taken automatically by the }{\cf2\f0\fs24\b\lang1033{\*\listtag0}PicSave()}{\cf2\f0\fs24\lang1033{\*\listtag0} and }{\cf2\f0\fs24\b\lang1033{\*\listtag0}PicLoad()}{\cf2\f0\fs24\lang1033{\*\listtag0} functions.}{\cf2\f0\fs24\lang1033{\*\listtag0}\par}
\pard\plain\ltrpar\ql\sl240\slmult1\itap0{\cf2\f0\fs24\lang1033{\*\listtag0}\par}
\pard\plain\ltrpar\ql\sl240\slmult1\itap0{\cf2\f0\fs24\lang1033{\*\listtag0}\abinodiroverride\ltrch This function can be useful if you anticipate loading or saving a series of pictures of the same type.  By pre-loading, you eliminate the overhead of loading and unloading the PDR on each }{\cf2\f0\fs24\b\lang1033{\*\listtag0}PicSave()}{\cf2\f0\fs24\lang1033{\*\listtag0} or }{\cf2\f0\fs24\b\lang1033{\*\listtag0}PicLoad()}{\cf2\f0\fs24\lang1033{\*\listtag0} call.}{\cf2\f0\fs24\lang1033{\*\listtag0}\par}
\pard\plain\ltrpar\ql\sl240\slmult1\itap0{\cf2\f0\fs24\lang1033{\*\listtag0}\par}
\pard\plain\ltrpar\ql\sl240\slmult1\itap0{\cf2\f0\fs24\lang1033{\*\listtag0}\abinodiroverride\ltrch If another PDR is already loaded when this function is called, it is unloaded automatically.}{\cf2\f0\fs24\lang1033{\*\listtag0}\par}
\pard\plain\ltrpar\ql\sl240\slmult1\itap0{\cf2\f0\fs24\lang1033{\*\listtag0}\abinodiroverride\ltrch \page }{\cf2\f0\fs24\lang1033{\*\listtag0}\par}
\pard\plain\ltrpar\ql\sl240\slmult1\itap0{\cf2\f0\fs24\lang1033{\*\listtag0}\par}
\pard\plain\ltrpar\ql\sl240\slmult1\itap0{\cf2\f0\fs24\lang1033{\*\listtag0}\abinodiroverride\ltrch Input:}{\cf2\f0\fs24\lang1033{\*\listtag0}\par}
\pard\plain\ltrpar\ql\sl240\slmult1\itap0{\cf2\f0\fs24\lang1033{\*\listtag0}\par}
\pard\plain\ltrpar\ql\sl240\slmult1\itap0{\cf2\f0\fs24\lang1033{\*\listtag0}\abinodiroverride\ltrch The }{\cf2\f0\fs24\b\lang1033{\*\listtag0}picpath}{\cf2\f0\fs24\lang1033{\*\listtag0} parameter is a pointer to a string, ostensibly a filename.  The filetype at the end of the string is used in the table lookup which associates filetypes with PDR modules.}{\cf2\f0\fs24\lang1033{\*\listtag0}\par}
\pard\plain\ltrpar\ql\sl240\slmult1\itap0{\cf2\f0\fs24\lang1033{\*\listtag0}\par}
\pard\plain\ltrpar\ql\sl240\slmult1\itap0{\cf2\f0\fs24\lang1033{\*\listtag0}\abinodiroverride\ltrch Output:}{\cf2\f0\fs24\lang1033{\*\listtag0}\par}
\pard\plain\ltrpar\ql\sl240\slmult1\itap0{\cf2\f0\fs24\b\lang1033{\*\listtag0}\par}
\pard\plain\ltrpar\ql\sl240\slmult1\itap0{\cf2\f0\fs24\b\lang1033{\*\listtag0}\abinodiroverride\ltrch Success}{\cf2\f0\fs24\lang1033{\*\listtag0} (0) if the PDR was loaded, or an appropriate negative }{\cf2\f0\fs24\b\lang1033{\*\listtag0}Errcode}{\cf2\f0\fs24\lang1033{\*\listtag0} value.}{\cf2\f0\fs24\b\lang1033{\*\listtag0}\par}
\pard\plain\ltrpar\ql\sl240\slmult1\itap0{\cf2\f0\fs24\lang1033{\*\listtag0}\par}
\pard\plain\ltrpar\ql\sl240\slmult1\itap0{\cf2\f0\fs24\b\lang1033{\*\listtag0}\par}
\pard\plain\ltrpar\ql\sl240\slmult1\itap0{\cf2\f0\fs24\b\lang1033{\*\listtag0}\abinodiroverride\ltrch Boolean PicPdrHasOptions(void)}{\cf2\f0\fs24\b\lang1033{\*\listtag0}\par}
\pard\plain\ltrpar\ql\sl240\slmult1\itap0{\cf2\f0\fs24\lang1033{\*\listtag0}\par}
\pard\plain\ltrpar\ql\sl240\slmult1\itap0{\cf2\f0\fs24\lang1033{\*\listtag0}\abinodiroverride\ltrch This function determines whether the currently-loaded PDR module has output options.  Call this only when you know a PDR module is currently loaded.}{\cf2\f0\fs24\lang1033{\*\listtag0}\par}
\pard\plain\ltrpar\ql\sl240\slmult1\itap0{\cf2\f0\fs24\lang1033{\*\listtag0}\par}
\pard\plain\ltrpar\ql\sl240\slmult1\itap0{\cf2\f0\fs24\lang1033{\*\listtag0}\abinodiroverride\ltrch Output:}{\cf2\f0\fs24\lang1033{\*\listtag0}\par}
\pard\plain\ltrpar\ql\sl240\slmult1\itap0{\cf2\f0\fs24\b\lang1033{\*\listtag0}\par}
\pard\plain\ltrpar\ql\sl240\slmult1\itap0{\cf2\f0\fs24\b\lang1033{\*\listtag0}\abinodiroverride\ltrch TRUE}{\cf2\f0\fs24\lang1033{\*\listtag0} if the currently-loaded PDR has output options, }{\cf2\f0\fs24\b\lang1033{\*\listtag0}FALSE}{\cf2\f0\fs24\lang1033{\*\listtag0} if it does not.  Your Poco program will abort if there is no currently-loaded PDR.}{\cf2\f0\fs24\b\lang1033{\*\listtag0}\par}
\pard\plain\ltrpar\ql\sl240\slmult1\itap0{\cf2\f0\fs24\lang1033{\*\listtag0}\par}
\pard\plain\ltrpar\ql\sl240\slmult1\itap0{\cf2\f0\fs24\b\lang1033{\*\listtag0}\par}
\pard\plain\ltrpar\ql\sl240\slmult1\itap0{\cf2\f0\fs24\b\lang1033{\*\listtag0}\abinodiroverride\ltrch long PicPdrOptionsPreset(Boolean do_dialog, long options)}{\cf2\f0\fs24\b\lang1033{\*\listtag0}\par}
\pard\plain\ltrpar\ql\sl240\slmult1\itap0{\cf2\f0\fs24\lang1033{\*\listtag0}\par}
\pard\plain\ltrpar\ql\sl240\slmult1\itap0{\cf2\f0\fs24\lang1033{\*\listtag0}\abinodiroverride\ltrch This function pre-sets the output options for the currently-loaded PDR.  }{\cf2\f0\fs24\lang1033{\*\listtag0}\par}
\pard\plain\ltrpar\ql\sl240\slmult1\itap0{\cf2\f0\fs24\lang1033{\*\listtag0}\par}
\pard\plain\ltrpar\ql\sl240\slmult1\itap0{\cf2\f0\fs24\lang1033{\*\listtag0}\abinodiroverride\ltrch PDR output options are specific to any given PDR module.  The PDR itself contains the dialogs used to get the options from the user.  Not all PDR modules support output options; the }{\cf2\f0\fs24\b\lang1033{\*\listtag0}PicPdrHasOptions()}{\cf2\f0\fs24\lang1033{\*\listtag0} function determines whether a given PDR supports output options.}{\cf2\f0\fs24\lang1033{\*\listtag0}\par}
\pard\plain\ltrpar\ql\sl240\slmult1\itap0{\cf2\f0\fs24\lang1033{\*\listtag0}\par}
\pard\plain\ltrpar\ql\sl240\slmult1\itap0{\cf2\f0\fs24\lang1033{\*\listtag0}\abinodiroverride\ltrch If the }{\cf2\f0\fs24\b\lang1033{\*\listtag0}do_dialog}{\cf2\f0\fs24\lang1033{\*\listtag0} parameter is }{\cf2\f0\fs24\b\lang1033{\*\listtag0}TRUE}{\cf2\f0\fs24\lang1033{\*\listtag0}, the output options dialogs are conducted, and the options are pre-set based on the user's selections.  The user's selections are also returned as four bytes (one per option) packed into a longword.  When the }{\cf2\f0\fs24\b\lang1033{\*\listtag0}do_dialog}{\cf2\f0\fs24\lang1033{\*\listtag0} parameter is }{\cf2\f0\fs24\b\lang1033{\*\listtag0}TRUE}{\cf2\f0\fs24\lang1033{\*\listtag0}, the }{\cf2\f0\fs24\b\lang1033{\*\listtag0}options}{\cf2\f0\fs24\lang1033{\*\listtag0} parameter is ignored.}{\cf2\f0\fs24\lang1033{\*\listtag0}\par}
\pard\plain\ltrpar\ql\sl240\slmult1\itap0{\cf2\f0\fs24\lang1033{\*\listtag0}\par}
\pard\plain\ltrpar\ql\sl240\slmult1\itap0{\cf2\f0\fs24\lang1033{\*\listtag0}\abinodiroverride\ltrch If the }{\cf2\f0\fs24\b\lang1033{\*\listtag0}do_dialog}{\cf2\f0\fs24\lang1033{\*\listtag0} parameter is }{\cf2\f0\fs24\b\lang1033{\*\listtag0}FALSE}{\cf2\f0\fs24\lang1033{\*\listtag0}, the PDR's output options are pre-set to the contents of the }{\cf2\f0\fs24\b\lang1033{\*\listtag0}options}{\cf2\f0\fs24\lang1033{\*\listtag0} parameter.  The }{\cf2\f0\fs24\b\lang1033{\*\listtag0}options}{\cf2\f0\fs24\lang1033{\*\listtag0} parameter contains four options values, one byte per value, packed into a longword.}{\cf2\f0\fs24\lang1033{\*\listtag0}\par}
\pard\plain\ltrpar\ql\sl240\slmult1\itap0{\cf2\f0\fs24\lang1033{\*\listtag0}\par}
\pard\plain\ltrpar\ql\sl240\slmult1\itap0{\cf2\f0\fs24\lang1033{\*\listtag0}\abinodiroverride\ltrch When a PDR supports output options, and the options have not been pre-set, the }{\cf2\f0\fs24\b\lang1033{\*\listtag0}PicSave()}{\cf2\f0\fs24\lang1033{\*\listtag0} function automatically conducts the options dialogs with the user.  If you want}{\cf2\f0\fs24\lang1033{\*\listtag0}\par}
\pard\plain\ltrpar\ql\sl240\slmult1\itap0{\cf2\f0\fs24\lang1033{\*\listtag0}\abinodiroverride\ltrch \page  to save a series of images using the same options, this function provides a method a specifying the options just once, rather than prompting the user for the options on each }{\cf2\f0\fs24\b\lang1033{\*\listtag0}PicSave()}{\cf2\f0\fs24\lang1033{\*\listtag0} call.  Use a sequence such as:}{\cf2\f0\fs24\lang1033{\*\listtag0}\par}
\pard\plain\ltrpar\ql\sl240\slmult1\itap0{\cf2\f0\fs24\lang1033{\*\listtag0}\par}
\pard\plain\ltrpar\ql\sl240\slmult1\itap0{\cf2\f0\fs24\lang1033{\*\listtag0}\abinodiroverride\ltrch   -call }{\cf2\f0\fs24\b\lang1033{\*\listtag0}PicDriverLoad()}{\cf2\f0\fs24\lang1033{\*\listtag0} or }{\cf2\f0\fs24\b\lang1033{\*\listtag0}PicDriverFindLoad()}{\cf2\f0\fs24\lang1033{\*\listtag0}.}{\cf2\f0\fs24\lang1033{\*\listtag0}\par}
\pard\plain\ltrpar\ql\sl240\slmult1\itap0{\cf2\f0\fs24\lang1033{\*\listtag0}\abinodiroverride\ltrch   -call }{\cf2\f0\fs24\b\lang1033{\*\listtag0}PicPdrHasOptions()}{\cf2\f0\fs24\lang1033{\*\listtag0} to see if the PDR supports any output options.}{\cf2\f0\fs24\lang1033{\*\listtag0}\par}
\pard\plain\ltrpar\ql\sl240\slmult1\itap0{\cf2\f0\fs24\lang1033{\*\listtag0}\abinodiroverride\ltrch   -if the PDR has options, call }{\cf2\f0\fs24\b\lang1033{\*\listtag0}PicPdrOptionsPreset(TRUE, 0)}{\cf2\f0\fs24\lang1033{\*\listtag0}.}{\cf2\f0\fs24\lang1033{\*\listtag0}\par}
\pard\plain\ltrpar\ql\sl240\slmult1\itap0{\cf2\f0\fs24\lang1033{\*\listtag0}\abinodiroverride\ltrch   -call }{\cf2\f0\fs24\b\lang1033{\*\listtag0}PicSave()}{\cf2\f0\fs24\lang1033{\*\listtag0} repeatedly.}{\cf2\f0\fs24\lang1033{\*\listtag0}\par}
\pard\plain\ltrpar\ql\sl240\slmult1\itap0{\cf2\f0\fs24\lang1033{\*\listtag0}\abinodiroverride\ltrch   -call }{\cf2\f0\fs24\b\lang1033{\*\listtag0}PicDriverUnload()}{\cf2\f0\fs24\lang1033{\*\listtag0} when done.}{\cf2\f0\fs24\lang1033{\*\listtag0}\par}
\pard\plain\ltrpar\ql\sl240\slmult1\itap0{\cf2\f0\fs24\lang1033{\*\listtag0}\par}
\pard\plain\ltrpar\ql\sl240\slmult1\itap0{\cf2\f0\fs24\lang1033{\*\listtag0}\abinodiroverride\ltrch You can also call this function with the }{\cf2\f0\fs24\b\lang1033{\*\listtag0}do_dialog}{\cf2\f0\fs24\lang1033{\*\listtag0} parameter }{\cf2\f0\fs24\b\lang1033{\*\listtag0}TRUE}{\cf2\f0\fs24\lang1033{\*\listtag0} and save the return value.  Then you can pass this return value later with a }{\cf2\f0\fs24\b\lang1033{\*\listtag0}do_dialog}{\cf2\f0\fs24\lang1033{\*\listtag0} parameter of }{\cf2\f0\fs24\b\lang1033{\*\listtag0}FALSE}{\cf2\f0\fs24\lang1033{\*\listtag0} to reestablish the same options without conducting the dialogs again.  This can be useful for gathering the user's options interactively and then writing a 'script' Poco program to run later in a non-interactive batch mode.}{\cf2\f0\fs24\lang1033{\*\listtag0}\par}
\pard\plain\ltrpar\ql\sl240\slmult1\itap0{\cf2\f0\fs24\lang1033{\*\listtag0}\par}
\pard\plain\ltrpar\ql\sl240\slmult1\itap0{\cf2\f0\fs24\lang1033{\*\listtag0}\abinodiroverride\ltrch When a new PDR is loaded, all pre-set PDR options are cleared.}{\cf2\f0\fs24\lang1033{\*\listtag0}\par}
\pard\plain\ltrpar\ql\sl240\slmult1\itap0{\cf2\f0\fs24\lang1033{\*\listtag0}\par}
\pard\plain\ltrpar\ql\sl240\slmult1\itap0{\cf2\f0\fs24\lang1033{\*\listtag0}\abinodiroverride\ltrch Input:}{\cf2\f0\fs24\lang1033{\*\listtag0}\par}
\pard\plain\ltrpar\ql\sl240\slmult1\itap0{\cf2\f0\fs24\lang1033{\*\listtag0}\par}
\pard\plain\ltrpar\ql\sl240\slmult1\itap0{\cf2\f0\fs24\lang1033{\*\listtag0}\abinodiroverride\ltrch The }{\cf2\f0\fs24\b\lang1033{\*\listtag0}do_dialog}{\cf2\f0\fs24\lang1033{\*\listtag0} parameter, when non-zero, indicates that the user is to be prompted for output options.  When zero, it indicates that the }{\cf2\f0\fs24\b\lang1033{\*\listtag0}options}{\cf2\f0\fs24\lang1033{\*\listtag0} parameter is to be used to pre-set the output options without user interaction.  The }{\cf2\f0\fs24\b\lang1033{\*\listtag0}options}{\cf2\f0\fs24\lang1033{\*\listtag0} parameter is a 32-bit value returned by a prior call to this function.}{\cf2\f0\fs24\lang1033{\*\listtag0}\par}
\pard\plain\ltrpar\ql\sl240\slmult1\itap0{\cf2\f0\fs24\lang1033{\*\listtag0}\par}
\pard\plain\ltrpar\ql\sl240\slmult1\itap0{\cf2\f0\fs24\lang1033{\*\listtag0}\abinodiroverride\ltrch Output:}{\cf2\f0\fs24\lang1033{\*\listtag0}\par}
\pard\plain\ltrpar\ql\sl240\slmult1\itap0{\cf2\f0\fs24\lang1033{\*\listtag0}\par}
\pard\plain\ltrpar\ql\sl240\slmult1\itap0{\cf2\f0\fs24\lang1033{\*\listtag0}\abinodiroverride\ltrch A longword which contains an encoded form of the options selected by the user.  If there is no currently-loaded PDR when this function is called, your Poco program will abort.}{\cf2\f0\fs24\lang1033{\*\listtag0}\par}
\pard\plain\ltrpar\ql\sl240\slmult1\itap0{\cf2\f0\fs24\lang1033{\*\listtag0}\par}
\pard\plain\ltrpar\ql\sl240\slmult1\itap0{\cf2\f0\fs24\b\lang1033{\*\listtag0}\par}
\pard\plain\ltrpar\ql\sl240\slmult1\itap0{\cf2\f0\fs24\b\lang1033{\*\listtag0}\abinodiroverride\ltrch long PicRgbOptionsPreset(Boolean do_dialog, long options)}{\cf2\f0\fs24\b\lang1033{\*\listtag0}\par}
\pard\plain\ltrpar\ql\sl240\slmult1\itap0{\cf2\f0\fs24\lang1033{\*\listtag0}\par}
\pard\plain\ltrpar\ql\sl240\slmult1\itap0{\cf2\f0\fs24\lang1033{\*\listtag0}\abinodiroverride\ltrch This function pre-sets the RGB input processing options. }{\cf2\f0\fs24\lang1033{\*\listtag0}\par}
\pard\plain\ltrpar\ql\sl240\slmult1\itap0{\cf2\f0\fs24\lang1033{\*\listtag0}\par}
\pard\plain\ltrpar\ql\sl240\slmult1\itap0{\cf2\f0\fs24\lang1033{\*\listtag0}\abinodiroverride\ltrch Unlike PDR output options, which are specific to a given PDR module, the RGB input options dictate options taken by PDRACCES.POE when an RGB input file is encountered. They are applicable to all PDR modules which support RGB input, and the dialog presented to the user is always the same, regardless of the currently-loaded PDR.}{\cf2\f0\fs24\lang1033{\*\listtag0}\par}
\pard\plain\ltrpar\ql\sl240\slmult1\itap0{\cf2\f0\fs24\lang1033{\*\listtag0}\abinodiroverride\ltrch \page }{\cf2\f0\fs24\lang1033{\*\listtag0}\par}
\pard\plain\ltrpar\ql\sl240\slmult1\itap0{\cf2\f0\fs24\lang1033{\*\listtag0}\par}
\pard\plain\ltrpar\ql\sl240\slmult1\itap0{\cf2\f0\fs24\lang1033{\*\listtag0}\abinodiroverride\ltrch The RGB input options dictate how PDRACCES handles the conversion of RGB data to color-mapped format is done.  Currently, PDRACCES supports the following conversions:}{\cf2\f0\fs24\lang1033{\*\listtag0}\par}
\pard\plain\ltrpar\ql\sl240\slmult1\itap0{\cf2\f0\fs24\lang1033{\*\listtag0}\par}
\pard\plain\ltrpar\ql\sl240\slmult1\itap0{\cf2\f0\fs24\lang1033{\*\listtag0}\abinodiroverride\ltrch   -Load color approximation.  This converts the RGB pixels to a six-cube color space.  The conversion is very fast, but not at all accurate.  This method is appropriate for a 'preview' of the picture.}{\cf2\f0\fs24\lang1033{\*\listtag0}\par}
\pard\plain\ltrpar\ql\sl240\slmult1\itap0{\cf2\f0\fs24\lang1033{\*\listtag0}\par}
\pard\plain\ltrpar\ql\sl240\slmult1\itap0{\cf2\f0\fs24\lang1033{\*\listtag0}\abinodiroverride\ltrch   -Load grayscale.  This converts the RGB pixels to a 256-level grayscale color map.  The conversion is very fast, and fairly accurate.  The RGB colors are mapped to grey via simple averaging: (r+g+b)/3.}{\cf2\f0\fs24\lang1033{\*\listtag0}\par}
\pard\plain\ltrpar\ql\sl240\slmult1\itap0{\cf2\f0\fs24\lang1033{\*\listtag0}\par}
\pard\plain\ltrpar\ql\sl240\slmult1\itap0{\cf2\f0\fs24\lang1033{\*\listtag0}\abinodiroverride\ltrch   -Load 64-level color.  This converts the RGB pixels to a 'best fit' color map which is constructed dynamically.  Because many SuperVGA cards only support 64 levels of each color red, green, and blue color component, this is often the best option for accurate conversion.}{\cf2\f0\fs24\lang1033{\*\listtag0}\par}
\pard\plain\ltrpar\ql\sl240\slmult1\itap0{\cf2\f0\fs24\lang1033{\*\listtag0}\par}
\pard\plain\ltrpar\ql\sl240\slmult1\itap0{\cf2\f0\fs24\lang1033{\*\listtag0}\abinodiroverride\ltrch   -Load 256-level color.  This is similar to 64-level color conversion, except that 256 levels of each color component are supported.  This is slower than the 64-level conversion, but gives much better results when the graphics hardware supports 256-level color components (ie, 8 bit DACs).  This method requires that approximately 2.5mb of memory be free at the time of the }{\cf2\f0\fs24\b\lang1033{\*\listtag0}PicLoad()}{\cf2\f0\fs24\lang1033{\*\listtag0} call.}{\cf2\f0\fs24\lang1033{\*\listtag0}\par}
\pard\plain\ltrpar\ql\sl240\slmult1\itap0{\cf2\f0\fs24\lang1033{\*\listtag0}\par}
\pard\plain\ltrpar\ql\sl240\slmult1\itap0{\cf2\f0\fs24\lang1033{\*\listtag0}\abinodiroverride\ltrch   -Dithering.  This is a TRUE/FALSE option which modifies the 64- and 256-level color conversions to apply a simple error-correction dithering.  The dithering slows down the conversion, but often yields better results, especially with the 64-level method.}{\cf2\f0\fs24\lang1033{\*\listtag0}\par}
\pard\plain\ltrpar\ql\sl240\slmult1\itap0{\cf2\f0\fs24\lang1033{\*\listtag0}\par}
\pard\plain\ltrpar\ql\sl240\slmult1\itap0{\cf2\f0\fs24\lang1033{\*\listtag0}\abinodiroverride\ltrch If the }{\cf2\f0\fs24\b\lang1033{\*\listtag0}do_dialog}{\cf2\f0\fs24\lang1033{\*\listtag0} parameter is }{\cf2\f0\fs24\b\lang1033{\*\listtag0}TRUE}{\cf2\f0\fs24\lang1033{\*\listtag0}, the RGB input options dialog is conducted, and the options are pre-set based on the user's selections.  The user's selections are also returned as four bytes (one per option) packed into a longword.  When the }{\cf2\f0\fs24\b\lang1033{\*\listtag0}do_dialog}{\cf2\f0\fs24\lang1033{\*\listtag0} parameter is }{\cf2\f0\fs24\b\lang1033{\*\listtag0}TRUE}{\cf2\f0\fs24\lang1033{\*\listtag0}, the }{\cf2\f0\fs24\b\lang1033{\*\listtag0}options}{\cf2\f0\fs24\lang1033{\*\listtag0} parameter is ignored.}{\cf2\f0\fs24\lang1033{\*\listtag0}\par}
\pard\plain\ltrpar\ql\sl240\slmult1\itap0{\cf2\f0\fs24\lang1033{\*\listtag0}\par}
\pard\plain\ltrpar\ql\sl240\slmult1\itap0{\cf2\f0\fs24\lang1033{\*\listtag0}\abinodiroverride\ltrch If the }{\cf2\f0\fs24\b\lang1033{\*\listtag0}do_dialog}{\cf2\f0\fs24\lang1033{\*\listtag0} parameter is }{\cf2\f0\fs24\b\lang1033{\*\listtag0}FALSE}{\cf2\f0\fs24\lang1033{\*\listtag0}, the RGB input options are pre-set to the contents of the }{\cf2\f0\fs24\b\lang1033{\*\listtag0}options}{\cf2\f0\fs24\lang1033{\*\listtag0} parameter.  The }{\cf2\f0\fs24\b\lang1033{\*\listtag0}options}{\cf2\f0\fs24\lang1033{\*\listtag0} parameter contains several values, one byte per value, packed into a longword.}{\cf2\f0\fs24\lang1033{\*\listtag0}\par}
\pard\plain\ltrpar\ql\sl240\slmult1\itap0{\cf2\f0\fs24\lang1033{\*\listtag0}\par}
\pard\plain\ltrpar\ql\sl240\slmult1\itap0{\cf2\f0\fs24\lang1033{\*\listtag0}\abinodiroverride\ltrch When an RGB image is encountered, and RGB input options have not been pre-set, the }{\cf2\f0\fs24\b\lang1033{\*\listtag0}PicLoad()}{\cf2\f0\fs24\lang1033{\*\listtag0} function automatically conducts the options dialogs with the user. }{\cf2\f0\fs24\lang1033{\*\listtag0}\par}
\pard\plain\ltrpar\ql\sl240\slmult1\itap0{\cf2\f0\fs24\lang1033{\*\listtag0}\abinodiroverride\ltrch \page  If you want to load a series of images using the same options, this function provides a method a specifying the options just once, rather than prompting the user for the options on each }{\cf2\f0\fs24\b\lang1033{\*\listtag0}PicLoad()}{\cf2\f0\fs24\lang1033{\*\listtag0} call.  Simply call this function before calling }{\cf2\f0\fs24\b\lang1033{\*\listtag0}PicLoad()}{\cf2\f0\fs24\lang1033{\*\listtag0} for the first time.  The options will remain in effect until your Poco program ends, or you explicitly clear them with a call to }{\cf2\f0\fs24\b\lang1033{\*\listtag0}PicRgbOptionsClear()}{\cf2\f0\fs24\lang1033{\*\listtag0}.  }{\cf2\f0\fs24\lang1033{\*\listtag0}\par}
\pard\plain\ltrpar\ql\sl240\slmult1\itap0{\cf2\f0\fs24\lang1033{\*\listtag0}\par}
\pard\plain\ltrpar\ql\sl240\slmult1\itap0{\cf2\f0\fs24\lang1033{\*\listtag0}\abinodiroverride\ltrch You can also call this function with the }{\cf2\f0\fs24\b\lang1033{\*\listtag0}do_dialog}{\cf2\f0\fs24\lang1033{\*\listtag0} parameter }{\cf2\f0\fs24\b\lang1033{\*\listtag0}TRUE}{\cf2\f0\fs24\lang1033{\*\listtag0} and save the return value.  Then you can pass this return value later with a }{\cf2\f0\fs24\b\lang1033{\*\listtag0}do_dialog}{\cf2\f0\fs24\lang1033{\*\listtag0} parameter of }{\cf2\f0\fs24\b\lang1033{\*\listtag0}FALSE}{\cf2\f0\fs24\lang1033{\*\listtag0} to reestablish the same options without conducting the dialogs again.  This can be useful for gathering the user's options interactively and then writing a 'script' Poco program to run later in a non-interactive batch mode.}{\cf2\f0\fs24\lang1033{\*\listtag0}\par}
\pard\plain\ltrpar\ql\sl240\slmult1\itap0{\cf2\f0\fs24\lang1033{\*\listtag0}\par}
\pard\plain\ltrpar\ql\sl240\slmult1\itap0{\cf2\f0\fs24\lang1033{\*\listtag0}\abinodiroverride\ltrch When a new PDR is loaded, pre-set RGB options are }{\cf2\f0\fs24\i\lang1033{\*\listtag0}not}{\cf2\f0\fs24\lang1033{\*\listtag0} cleared.}{\cf2\f0\fs24\lang1033{\*\listtag0}\par}
\pard\plain\ltrpar\ql\sl240\slmult1\itap0{\cf2\f0\fs24\lang1033{\*\listtag0}\par}
\pard\plain\ltrpar\ql\sl240\slmult1\itap0{\cf2\f0\fs24\lang1033{\*\listtag0}\abinodiroverride\ltrch Input:}{\cf2\f0\fs24\lang1033{\*\listtag0}\par}
\pard\plain\ltrpar\ql\sl240\slmult1\itap0{\cf2\f0\fs24\lang1033{\*\listtag0}\par}
\pard\plain\ltrpar\ql\sl240\slmult1\itap0{\cf2\f0\fs24\lang1033{\*\listtag0}\abinodiroverride\ltrch The }{\cf2\f0\fs24\b\lang1033{\*\listtag0}do_dialog}{\cf2\f0\fs24\lang1033{\*\listtag0} parameter, when non-zero, indicates that the user is to be prompted for output options.  When zero, it indicates that the }{\cf2\f0\fs24\b\lang1033{\*\listtag0}options}{\cf2\f0\fs24\lang1033{\*\listtag0} parameter is to be used to pre-set the output options without user interaction.  The }{\cf2\f0\fs24\b\lang1033{\*\listtag0}options}{\cf2\f0\fs24\lang1033{\*\listtag0} parameter is a 32-bit value returned by a prior call to this function.}{\cf2\f0\fs24\lang1033{\*\listtag0}\par}
\pard\plain\ltrpar\ql\sl240\slmult1\itap0{\cf2\f0\fs24\lang1033{\*\listtag0}\par}
\pard\plain\ltrpar\ql\sl240\slmult1\itap0{\cf2\f0\fs24\lang1033{\*\listtag0}\abinodiroverride\ltrch Output:}{\cf2\f0\fs24\lang1033{\*\listtag0}\par}
\pard\plain\ltrpar\ql\sl240\slmult1\itap0{\cf2\f0\fs24\lang1033{\*\listtag0}\par}
\pard\plain\ltrpar\ql\sl240\slmult1\itap0{\cf2\f0\fs24\lang1033{\*\listtag0}\abinodiroverride\ltrch A longword which contains an encoded form of the options selected by the user.}{\cf2\f0\fs24\lang1033{\*\listtag0}\par}
\pard\plain\ltrpar\ql\sl240\slmult1\itap0{\cf2\f0\fs24\lang1033{\*\listtag0}\par}
\pard\plain\ltrpar\ql\sl240\slmult1\itap0{\cf2\f0\fs24\b\lang1033{\*\listtag0}\par}
\pard\plain\ltrpar\ql\sl240\slmult1\itap0{\cf2\f0\fs24\b\lang1033{\*\listtag0}\abinodiroverride\ltrch void PicPdrOptionsClear(void)}{\cf2\f0\fs24\b\lang1033{\*\listtag0}\par}
\pard\plain\ltrpar\ql\sl240\slmult1\itap0{\cf2\f0\fs24\lang1033{\*\listtag0}\par}
\pard\plain\ltrpar\ql\sl240\slmult1\itap0{\cf2\f0\fs24\lang1033{\*\listtag0}\abinodiroverride\ltrch This function clears any PDR output options for the currently-loaded PDR.  It can be called any number of times, even if options were not previously pre-set.  }{\cf2\f0\fs24\lang1033{\*\listtag0}\par}
\pard\plain\ltrpar\ql\sl240\slmult1\itap0{\cf2\f0\fs24\lang1033{\*\listtag0}\par}
\pard\plain\ltrpar\ql\sl240\slmult1\itap0{\cf2\f0\fs24\lang1033{\*\listtag0}\abinodiroverride\ltrch PDR options are also cleared automatically whenever a new PDR module is loaded.}{\cf2\f0\fs24\lang1033{\*\listtag0}\par}
\pard\plain\ltrpar\ql\sl240\slmult1\itap0{\cf2\f0\fs24\b\lang1033{\*\listtag0}\par}
\pard\plain\ltrpar\ql\sl240\slmult1\itap0{\cf2\f0\fs24\b\lang1033{\*\listtag0}\abinodiroverride\ltrch void PicRgbOptionsClear(void)}{\cf2\f0\fs24\b\lang1033{\*\listtag0}\par}
\pard\plain\ltrpar\ql\sl240\slmult1\itap0{\cf2\f0\fs24\lang1033{\*\listtag0}\par}
\pard\plain\ltrpar\ql\sl240\slmult1\itap0{\cf2\f0\fs24\lang1033{\*\listtag0}\abinodiroverride\ltrch This function clears any RGB input options for the currently-loaded PDR.  It can be called any number of times, even if options were not previously pre-set.}{\cf2\f0\fs24\lang1033{\*\listtag0}\par}
\pard\plain\ltrpar\ql\sl240\slmult1\itap0{\cf2\f0\fs24\lang1033{\*\listtag0}\abinodiroverride\ltrch \page }{\cf2\f0\fs24\lang1033{\*\listtag0}\par}
\pard\plain\ltrpar\ql\sl240\slmult1\itap0{\cf2\f0\fs24\lang1033{\*\listtag0}\par}
\pard\plain\ltrpar\ql\sl240\slmult1\itap0{\cf2\f0\fs24\lang1033{\*\listtag0}\abinodiroverride\ltrch RGB options are }{\cf2\f0\fs24\i\lang1033{\*\listtag0}not}{\cf2\f0\fs24\lang1033{\*\listtag0} cleared automatically when a new PDR module is loaded; RGB options are not PDR-specific.}{\cf2\f0\fs24\lang1033{\*\listtag0}\par}
\pard\plain\ltrpar\ql\sl240\slmult1\itap0{\cf2\f0\fs24\lang1033{\*\listtag0}\par}
\pard\plain\ltrpar\ql\sl240\slmult1\itap0{\cf2\f0\fs24\b\lang1033{\*\listtag0}\par}
\pard\plain\ltrpar\ql\sl240\slmult1\itap0{\cf2\f0\fs24\b\lang1033{\*\listtag0}\abinodiroverride\ltrch Errcode PicGetSize(char *path, int *width, int *height, int *depth)}{\cf2\f0\fs24\b\lang1033{\*\listtag0}\par}
\pard\plain\ltrpar\ql\sl240\slmult1\itap0{\cf2\f0\fs24\lang1033{\*\listtag0}\par}
\pard\plain\ltrpar\ql\sl240\slmult1\itap0{\cf2\f0\fs24\lang1033{\*\listtag0}\abinodiroverride\ltrch This function returns information about the specified picture file.  As with }{\cf2\f0\fs24\b\lang1033{\*\listtag0}PicLoad()}{\cf2\f0\fs24\lang1033{\*\listtag0}, this function first attempts to use the currently-loaded PDR (if any) to read the picture file, and if that fails, it will unload the current PDR and load on that can handle the picture format.  It chooses a PDR based on the filetype at the end of }{\cf2\f0\fs24\b\lang1033{\*\listtag0}*path}{\cf2\f0\fs24\lang1033{\*\listtag0}, as per the table above.}{\cf2\f0\fs24\lang1033{\*\listtag0}\par}
\pard\plain\ltrpar\ql\sl240\slmult1\itap0{\cf2\f0\fs24\lang1033{\*\listtag0}\par}
\pard\plain\ltrpar\ql\sl240\slmult1\itap0{\cf2\f0\fs24\lang1033{\*\listtag0}\abinodiroverride\ltrch Input:}{\cf2\f0\fs24\lang1033{\*\listtag0}\par}
\pard\plain\ltrpar\ql\sl240\slmult1\itap0{\cf2\f0\fs24\lang1033{\*\listtag0}\par}
\pard\plain\ltrpar\ql\sl240\slmult1\itap0{\cf2\f0\fs24\lang1033{\*\listtag0}\abinodiroverride\ltrch The }{\cf2\f0\fs24\b\lang1033{\*\listtag0}path}{\cf2\f0\fs24\lang1033{\*\listtag0} parameter is a pointer to a filename (device and/or path info is optional) on which information is to be returned.  The }{\cf2\f0\fs24\b\lang1033{\*\listtag0}width}{\cf2\f0\fs24\lang1033{\*\listtag0}, }{\cf2\f0\fs24\b\lang1033{\*\listtag0}height}{\cf2\f0\fs24\lang1033{\*\listtag0}, and }{\cf2\f0\fs24\b\lang1033{\*\listtag0}depth}{\cf2\f0\fs24\lang1033{\*\listtag0} parameters are pointers to 32-bit integers; the picture information is returned into the locations these parameters point to.}{\cf2\f0\fs24\lang1033{\*\listtag0}\par}
\pard\plain\ltrpar\ql\sl240\slmult1\itap0{\cf2\f0\fs24\lang1033{\*\listtag0}\par}
\pard\plain\ltrpar\ql\sl240\slmult1\itap0{\cf2\f0\fs24\lang1033{\*\listtag0}\abinodiroverride\ltrch Output:}{\cf2\f0\fs24\lang1033{\*\listtag0}\par}
\pard\plain\ltrpar\ql\sl240\slmult1\itap0{\cf2\f0\fs24\b\lang1033{\*\listtag0}\par}
\pard\plain\ltrpar\ql\sl240\slmult1\itap0{\cf2\f0\fs24\b\lang1033{\*\listtag0}\abinodiroverride\ltrch Success}{\cf2\f0\fs24\lang1033{\*\listtag0} (0) if the information is returned, or an appropriate negative }{\cf2\f0\fs24\b\lang1033{\*\listtag0}Errcode}{\cf2\f0\fs24\lang1033{\*\listtag0} value.  After the call, the memory locations at }{\cf2\f0\fs24\b\lang1033{\*\listtag0}*width}{\cf2\f0\fs24\lang1033{\*\listtag0}, }{\cf2\f0\fs24\b\lang1033{\*\listtag0}*height}{\cf2\f0\fs24\lang1033{\*\listtag0}, and }{\cf2\f0\fs24\b\lang1033{\*\listtag0}*depth}{\cf2\f0\fs24\lang1033{\*\listtag0} contain the picture information.  The depth value is in bits; a value greater than 8 indicates the picture file contains RGB data.}{\cf2\f0\fs24\b\lang1033{\*\listtag0}\par}
\pard\plain\ltrpar\ql\sl240\slmult1\itap0{\cf2\f0\fs24\lang1033{\*\listtag0}\par}
\pard\plain\ltrpar\ql\sl240\slmult1\itap0{\cf2\f0\fs24\b\lang1033{\*\listtag0}\par}
\pard\plain\ltrpar\ql\sl240\slmult1\itap0{\cf2\f0\fs24\b\lang1033{\*\listtag0}\abinodiroverride\ltrch Errcode PicLoad(char *path, Screen *screen)}{\cf2\f0\fs24\b\lang1033{\*\listtag0}\par}
\pard\plain\ltrpar\ql\sl240\slmult1\itap0{\cf2\f0\fs24\lang1033{\*\listtag0}\par}
\pard\plain\ltrpar\ql\sl240\slmult1\itap0{\cf2\f0\fs24\lang1033{\*\listtag0}\abinodiroverride\ltrch This function loads a picture from disk into the specified screen.  Its behavior is different from the built in library }{\cf2\f0\fs24\b\lang1033{\*\listtag0}LoadPic()}{\cf2\f0\fs24\lang1033{\*\listtag0} function, in that it can process RGB input data.}{\cf2\f0\fs24\lang1033{\*\listtag0}\par}
\pard\plain\ltrpar\ql\sl240\slmult1\itap0{\cf2\f0\fs24\lang1033{\*\listtag0}\par}
\pard\plain\ltrpar\ql\sl240\slmult1\itap0{\cf2\f0\fs24\lang1033{\*\listtag0}\abinodiroverride\ltrch If a PDR has been pre-loaded, this function attempts to use that PDR to load the picture.  If there is no pre-loaded PDR, or if the pre-loaded PDR fails to process the picture, the filetype-to-PDR mapping table is used to load the proper PDR for the picture file type.  If the filetype is not in the mapping table, or if the picture still can't be loaded, this function returns the error status reported by the PDR.  Whenever this function returns an error status, you must assume that there is no longer a currently-loaded PDR, even if you pre-loaded one earlier.}{\cf2\f0\fs24\lang1033{\*\listtag0}\par}
\pard\plain\ltrpar\ql\sl240\slmult1\itap0{\cf2\f0\fs24\lang1033{\*\listtag0}\abinodiroverride\ltrch \page }{\cf2\f0\fs24\lang1033{\*\listtag0}\par}
\pard\plain\ltrpar\ql\sl240\slmult1\itap0{\cf2\f0\fs24\lang1033{\*\listtag0}\par}
\pard\plain\ltrpar\ql\sl240\slmult1\itap0{\cf2\f0\fs24\lang1033{\*\listtag0}\abinodiroverride\ltrch This function handles RGB input images.  If the RGB input options have been pre-set with }{\cf2\f0\fs24\b\lang1033{\*\listtag0}PicRgbOptionsPreset()}{\cf2\f0\fs24\lang1033{\*\listtag0}, those options are applied without user interaction.  If the options have not been pre-set, the user is prompted for the processing options.}{\cf2\f0\fs24\lang1033{\*\listtag0}\par}
\pard\plain\ltrpar\ql\sl240\slmult1\itap0{\cf2\f0\fs24\lang1033{\*\listtag0}\par}
\pard\plain\ltrpar\ql\sl240\slmult1\itap0{\cf2\f0\fs24\lang1033{\*\listtag0}\abinodiroverride\ltrch When the picture is not the same size as the destination screen, it is automatically centered within the screen, and clipped around the edges as needed.}{\cf2\f0\fs24\lang1033{\*\listtag0}\par}
\pard\plain\ltrpar\ql\sl240\slmult1\itap0{\cf2\f0\fs24\lang1033{\*\listtag0}\par}
\pard\plain\ltrpar\ql\sl240\slmult1\itap0{\cf2\f0\fs24\lang1033{\*\listtag0}\abinodiroverride\ltrch Input:}{\cf2\f0\fs24\lang1033{\*\listtag0}\par}
\pard\plain\ltrpar\ql\sl240\slmult1\itap0{\cf2\f0\fs24\lang1033{\*\listtag0}\par}
\pard\plain\ltrpar\ql\sl240\slmult1\itap0{\cf2\f0\fs24\lang1033{\*\listtag0}\abinodiroverride\ltrch The }{\cf2\f0\fs24\b\lang1033{\*\listtag0}path}{\cf2\f0\fs24\lang1033{\*\listtag0} parameter is a pointer to a string which contains the filename to load.  The filename can include drive and path information.  The }{\cf2\f0\fs24\b\lang1033{\*\listtag0}screen}{\cf2\f0\fs24\lang1033{\*\listtag0} parameter is a handle for the screen into which the picture is loaded.  The }{\cf2\f0\fs24\b\lang1033{\*\listtag0}screen}{\cf2\f0\fs24\lang1033{\*\listtag0} parameter can be }{\cf2\f0\fs24\b\lang1033{\*\listtag0}NULL}{\cf2\f0\fs24\lang1033{\*\listtag0}, indicating that the destination is the main picscreen.}{\cf2\f0\fs24\lang1033{\*\listtag0}\par}
\pard\plain\ltrpar\ql\sl240\slmult1\itap0{\cf2\f0\fs24\lang1033{\*\listtag0}\par}
\pard\plain\ltrpar\ql\sl240\slmult1\itap0{\cf2\f0\fs24\lang1033{\*\listtag0}\abinodiroverride\ltrch Output:}{\cf2\f0\fs24\lang1033{\*\listtag0}\par}
\pard\plain\ltrpar\ql\sl240\slmult1\itap0{\cf2\f0\fs24\b\lang1033{\*\listtag0}\par}
\pard\plain\ltrpar\ql\sl240\slmult1\itap0{\cf2\f0\fs24\b\lang1033{\*\listtag0}\abinodiroverride\ltrch Success}{\cf2\f0\fs24\lang1033{\*\listtag0} (0), or an appropriate negative }{\cf2\f0\fs24\b\lang1033{\*\listtag0}Errcode}{\cf2\f0\fs24\lang1033{\*\listtag0} value. }{\cf2\f0\fs24\b\lang1033{\*\listtag0}\par}
\pard\plain\ltrpar\ql\sl240\slmult1\itap0{\cf2\f0\fs24\lang1033{\*\listtag0}\par}
\pard\plain\ltrpar\ql\sl240\slmult1\itap0{\cf2\f0\fs24\b\lang1033{\*\listtag0}\par}
\pard\plain\ltrpar\ql\sl240\slmult1\itap0{\cf2\f0\fs24\b\lang1033{\*\listtag0}\abinodiroverride\ltrch Errcode PicSave(char *path, Screen *screen)}{\cf2\f0\fs24\b\lang1033{\*\listtag0}\par}
\pard\plain\ltrpar\ql\sl240\slmult1\itap0{\cf2\f0\fs24\lang1033{\*\listtag0}\par}
\pard\plain\ltrpar\ql\sl240\slmult1\itap0{\cf2\f0\fs24\lang1033{\*\listtag0}\abinodiroverride\ltrch This function saves the contents of the specified screen to a file.  Its behavior is different from the built in library }{\cf2\f0\fs24\b\lang1033{\*\listtag0}SavePic()}{\cf2\f0\fs24\lang1033{\*\listtag0} function, in that it can process output options if the PDR supports them.}{\cf2\f0\fs24\lang1033{\*\listtag0}\par}
\pard\plain\ltrpar\ql\sl240\slmult1\itap0{\cf2\f0\fs24\lang1033{\*\listtag0}\par}
\pard\plain\ltrpar\ql\sl240\slmult1\itap0{\cf2\f0\fs24\lang1033{\*\listtag0}\abinodiroverride\ltrch If a PDR has been pre-loaded, it is used to save the picture.  If there is no pre-loaded PDR, one will be loaded, based on the filetype-to-PDR mapping table. }{\cf2\f0\fs24\lang1033{\*\listtag0}\par}
\pard\plain\ltrpar\ql\sl240\slmult1\itap0{\cf2\f0\fs24\lang1033{\*\listtag0}\par}
\pard\plain\ltrpar\ql\sl240\slmult1\itap0{\cf2\f0\fs24\lang1033{\*\listtag0}\abinodiroverride\ltrch Unlike the }{\cf2\f0\fs24\b\lang1033{\*\listtag0}PicLoad()}{\cf2\f0\fs24\lang1033{\*\listtag0} routine, this function has no automatic retry logic.  If the pre-loaded PDR fails to save the picture, the PDR remains loaded, and the error status is returned.}{\cf2\f0\fs24\lang1033{\*\listtag0}\par}
\pard\plain\ltrpar\ql\sl240\slmult1\itap0{\cf2\f0\fs24\lang1033{\*\listtag0}\par}
\pard\plain\ltrpar\ql\sl240\slmult1\itap0{\cf2\f0\fs24\lang1033{\*\listtag0}\abinodiroverride\ltrch If the PDR supports output options, and the options have been pre-set using }{\cf2\f0\fs24\b\lang1033{\*\listtag0}PicPdrOptionsPreset()}{\cf2\f0\fs24\lang1033{\*\listtag0}, the picture is saved without user interaction.  If the output options have not been pre-set, the user is prompted for options.}{\cf2\f0\fs24\lang1033{\*\listtag0}\par}
\pard\plain\ltrpar\ql\sl240\slmult1\itap0{\cf2\f0\fs24\lang1033{\*\listtag0}\par}
\pard\plain\ltrpar\ql\sl240\slmult1\itap0{\cf2\f0\fs24\lang1033{\*\listtag0}\abinodiroverride\ltrch The picture is always saved using the width & height of the specified screen.}{\cf2\f0\fs24\lang1033{\*\listtag0}\par}
\pard\plain\ltrpar\ql\sl240\slmult1\itap0{\cf2\f0\fs24\lang1033{\*\listtag0}\par}
\pard\plain\ltrpar\ql\sl240\slmult1\itap0{\cf2\f0\fs24\lang1033{\*\listtag0}\abinodiroverride\ltrch Input:}{\cf2\f0\fs24\lang1033{\*\listtag0}\par}
\pard\plain\ltrpar\ql\sl240\slmult1\itap0{\cf2\f0\fs24\lang1033{\*\listtag0}\par}
\pard\plain\ltrpar\ql\sl240\slmult1\itap0{\cf2\f0\fs24\lang1033{\*\listtag0}\abinodiroverride\ltrch The }{\cf2\f0\fs24\b\lang1033{\*\listtag0}path}{\cf2\f0\fs24\lang1033{\*\listtag0} parameter is a pointer to a string which contains the filename to save.  The filename can include}{\cf2\f0\fs24\lang1033{\*\listtag0}\par}
\pard\plain\ltrpar\ql\sl240\slmult1\itap0{\cf2\f0\fs24\lang1033{\*\listtag0}\abinodiroverride\ltrch \page  drive and path information.  The }{\cf2\f0\fs24\b\lang1033{\*\listtag0}screen}{\cf2\f0\fs24\lang1033{\*\listtag0} parameter is a handle for the screen from which the picture is saved.  The }{\cf2\f0\fs24\b\lang1033{\*\listtag0}screen}{\cf2\f0\fs24\lang1033{\*\listtag0} parameter can be }{\cf2\f0\fs24\b\lang1033{\*\listtag0}NULL}{\cf2\f0\fs24\lang1033{\*\listtag0}, indicating that the source is the main picscreen.}{\cf2\f0\fs24\lang1033{\*\listtag0}\par}
\pard\plain\ltrpar\ql\sl240\slmult1\itap0{\cf2\f0\fs24\lang1033{\*\listtag0}\par}
\pard\plain\ltrpar\ql\sl240\slmult1\itap0{\cf2\f0\fs24\lang1033{\*\listtag0}\abinodiroverride\ltrch Output:}{\cf2\f0\fs24\lang1033{\*\listtag0}\par}
\pard\plain\ltrpar\ql\sl240\slmult1\itap0{\cf2\f0\fs24\b\lang1033{\*\listtag0}\par}
\pard\plain\ltrpar\ql\sl240\slmult1\itap0{\cf2\f0\fs24\b\lang1033{\*\listtag0}\abinodiroverride\ltrch Success}{\cf2\f0\fs24\lang1033{\*\listtag0} (0), or an appropriate negative }{\cf2\f0\fs24\b\lang1033{\*\listtag0}Errcode}{\cf2\f0\fs24\lang1033{\*\listtag0} value. }{\cf2\f0\fs24\b\lang1033{\*\listtag0}\par}
\pard\plain\ltrpar\ql\sl240\slmult1\itap0{\cf2\f0\fs24\lang1033{\*\listtag0}\abinodiroverride\ltrch \page }{\cf2\f0\fs24\lang1033{\*\listtag0}\par}
\pard\plain\ltrpar\ql\sl240\slmult1\itap0{\cf2\f0\fs24\lang1033{\*\listtag0}\abinodiroverride\ltrch \page }{\cf2\f0\fs24\lang1033{\*\listtag0}\par}
\pard\plain\ltrpar\ql\sl240\slmult1\itap0{\cf2\f0\fs28\b\lang1033{\*\listtag0}\abinodiroverride\ltrch VSCREEN.POE}{\cf2\f0\fs28\b\lang1033{\*\listtag0}\par}
\pard\plain\ltrpar\ql\sl240\slmult1\itap0{\cf2\f0\fs24\lang1033{\*\listtag0}\par}
\pard\plain\ltrpar\ql\sl240\slmult1\itap0{\cf2\f0\fs24\lang1033{\*\listtag0}\par}
\pard\plain\ltrpar\ql\sl240\slmult1\itap0{\cf2\f0\fs24\lang1033{\*\listtag0}\abinodiroverride\ltrch The VSCREEN POE provides several functions for manipulating virtual screens.  A virtual screen is a rectangular portion of another screen, referred to as the }{\cf2\f0\fs24\i\lang1033{\*\listtag0}root}{\cf2\f0\fs24\lang1033{\*\listtag0} screen.  The virtual screen can describe a rectangular portion which is either smaller or larger than the root screen.  When the virtual screen is larger than the root, clipping I/O routines are automatically used to access the virtual screen pixels.}{\cf2\f0\fs24\lang1033{\*\listtag0}\par}
\pard\plain\ltrpar\ql\sl240\slmult1\itap0{\cf2\f0\fs24\lang1033{\*\listtag0}\par}
\pard\plain\ltrpar\ql\sl240\slmult1\itap0{\cf2\f0\fs24\lang1033{\*\listtag0}\abinodiroverride\ltrch Several built in and POE-based functions operate on an entire screen of data, and have no provision for specifying a subset rectangle for processing.  You can create a virtual screen that maps a rectangular subset of a screen, and then pass the virtual screen handle to the function.  This gives the effect of operating on a subset of the root screen.}{\cf2\f0\fs24\lang1033{\*\listtag0}\par}
\pard\plain\ltrpar\ql\sl240\slmult1\itap0{\cf2\f0\fs24\lang1033{\*\listtag0}\par}
\pard\plain\ltrpar\ql\sl240\slmult1\itap0{\cf2\f0\fs24\b\lang1033{\*\listtag0}\par}
\pard\plain\ltrpar\ql\sl240\slmult1\itap0{\cf2\f0\fs24\b\lang1033{\*\listtag0}\abinodiroverride\ltrch Screen *MakeCenteredScreen(Screen *root, int w, int h)}{\cf2\f0\fs24\b\lang1033{\*\listtag0}\par}
\pard\plain\ltrpar\ql\sl240\slmult1\itap0{\cf2\f0\fs24\lang1033{\*\listtag0}\par}
\pard\plain\ltrpar\ql\sl240\slmult1\itap0{\cf2\f0\fs24\lang1033{\*\listtag0}\abinodiroverride\ltrch This function builds a virtual screen which is centered over or within the root screen.  }{\cf2\f0\fs24\lang1033{\*\listtag0}\par}
\pard\plain\ltrpar\ql\sl240\slmult1\itap0{\cf2\f0\fs24\lang1033{\*\listtag0}\par}
\pard\plain\ltrpar\ql\sl240\slmult1\itap0{\cf2\f0\fs24\lang1033{\*\listtag0}\abinodiroverride\ltrch When the specified sizes for the virtual screen are smaller than the root screen, the virtual screen is in effect a window within the root.  The window is centered in each axis within the root.  Write operations outside the virtual screen's boundaries are clipped (not performed at all), and read operations return zeroes for pixels outside the virtual screen's boundaries.}{\cf2\f0\fs24\lang1033{\*\listtag0}\par}
\pard\plain\ltrpar\ql\sl240\slmult1\itap0{\cf2\f0\fs24\lang1033{\*\listtag0}\par}
\pard\plain\ltrpar\ql\sl240\slmult1\itap0{\cf2\f0\fs24\lang1033{\*\listtag0}\abinodiroverride\ltrch When the specified virtual screen sizes are larger than the root screen's sizes, the larger virtual screen is centered over the root screen in each axis.  Write operations outside the root screen's boundaries are clipped, and read operations outside the root boundaries return zeroes.}{\cf2\f0\fs24\lang1033{\*\listtag0}\par}
\pard\plain\ltrpar\ql\sl240\slmult1\itap0{\cf2\f0\fs24\lang1033{\*\listtag0}\par}
\pard\plain\ltrpar\ql\sl240\slmult1\itap0{\cf2\f0\fs24\lang1033{\*\listtag0}\abinodiroverride\ltrch The virtual screen will be deleted automatically when your Poco program ends.  You cannot allocate a virtual screen in one program and refer to it in another.}{\cf2\f0\fs24\lang1033{\*\listtag0}\par}
\pard\plain\ltrpar\ql\sl240\slmult1\itap0{\cf2\f0\fs24\lang1033{\*\listtag0}\par}
\pard\plain\ltrpar\ql\sl240\slmult1\itap0{\cf2\f0\fs24\lang1033{\*\listtag0}\abinodiroverride\ltrch Input:}{\cf2\f0\fs24\lang1033{\*\listtag0}\par}
\pard\plain\ltrpar\ql\sl240\slmult1\itap0{\cf2\f0\fs24\lang1033{\*\listtag0}\par}
\pard\plain\ltrpar\ql\sl240\slmult1\itap0{\cf2\f0\fs24\lang1033{\*\listtag0}\abinodiroverride\ltrch The }{\cf2\f0\fs24\b\lang1033{\*\listtag0}root}{\cf2\f0\fs24\lang1033{\*\listtag0} parameter is a screen handle.  It can refer to any type of screen, including another virtual screen.  The }{\cf2\f0\fs24\b\lang1033{\*\listtag0}w}{\cf2\f0\fs24\lang1033{\*\listtag0} and }{\cf2\f0\fs24\b\lang1033{\*\listtag0}h}{\cf2\f0\fs24\lang1033{\*\listtag0} parameters contain the sizes for the new virtual screen; they must be greater than zero.}{\cf2\f0\fs24\lang1033{\*\listtag0}\par}
\pard\plain\ltrpar\ql\sl240\slmult1\itap0{\cf2\f0\fs24\lang1033{\*\listtag0}\abinodiroverride\ltrch \page }{\cf2\f0\fs24\lang1033{\*\listtag0}\par}
\pard\plain\ltrpar\ql\sl240\slmult1\itap0{\cf2\f0\fs24\lang1033{\*\listtag0}\par}
\pard\plain\ltrpar\ql\sl240\slmult1\itap0{\cf2\f0\fs24\lang1033{\*\listtag0}\abinodiroverride\ltrch Output:}{\cf2\f0\fs24\lang1033{\*\listtag0}\par}
\pard\plain\ltrpar\ql\sl240\slmult1\itap0{\cf2\f0\fs24\lang1033{\*\listtag0}\par}
\pard\plain\ltrpar\ql\sl240\slmult1\itap0{\cf2\f0\fs24\lang1033{\*\listtag0}\abinodiroverride\ltrch A handle to the virtual screen.  This will never be }{\cf2\f0\fs24\b\lang1033{\*\listtag0}NULL}{\cf2\f0\fs24\lang1033{\*\listtag0}; the only error that can happen is an out-of-memory condition, and that will abort the Poco program automatically.}{\cf2\f0\fs24\lang1033{\*\listtag0}\par}
\pard\plain\ltrpar\ql\sl240\slmult1\itap0{\cf2\f0\fs24\lang1033{\*\listtag0}\par}
\pard\plain\ltrpar\ql\sl240\slmult1\itap0{\cf2\f0\fs24\b\lang1033{\*\listtag0}\par}
\pard\plain\ltrpar\ql\sl240\slmult1\itap0{\cf2\f0\fs24\b\lang1033{\*\listtag0}\abinodiroverride\ltrch void FreeCenteredScreen(Screen *vscreen)}{\cf2\f0\fs24\b\lang1033{\*\listtag0}\par}
\pard\plain\ltrpar\ql\sl240\slmult1\itap0{\cf2\f0\fs24\lang1033{\*\listtag0}\par}
\pard\plain\ltrpar\ql\sl240\slmult1\itap0{\cf2\f0\fs24\lang1033{\*\listtag0}\abinodiroverride\ltrch This function frees a virtual screen allocated by }{\cf2\f0\fs24\b\lang1033{\*\listtag0}MakeCenteredScreen()}{\cf2\f0\fs24\lang1033{\*\listtag0}.}{\cf2\f0\fs24\lang1033{\*\listtag0}\par}
\pard\plain\ltrpar\ql\sl240\slmult1\itap0{\cf2\f0\fs24\lang1033{\*\listtag0}\par}
\pard\plain\ltrpar\ql\sl240\slmult1\itap0{\cf2\f0\fs24\lang1033{\*\listtag0}\abinodiroverride\ltrch Input:}{\cf2\f0\fs24\lang1033{\*\listtag0}\par}
\pard\plain\ltrpar\ql\sl240\slmult1\itap0{\cf2\f0\fs24\lang1033{\*\listtag0}\par}
\pard\plain\ltrpar\ql\sl240\slmult1\itap0{\cf2\f0\fs24\lang1033{\*\listtag0}\abinodiroverride\ltrch The }{\cf2\f0\fs24\b\lang1033{\*\listtag0}vscreen}{\cf2\f0\fs24\lang1033{\*\listtag0} parameter is the handle of a screen previously created by }{\cf2\f0\fs24\b\lang1033{\*\listtag0}MakeCenteredScreen()}{\cf2\f0\fs24\lang1033{\*\listtag0}.}{\cf2\f0\fs24\lang1033{\*\listtag0}\par}
\pard\plain\ltrpar\ql\sl240\slmult1\itap0{\cf2\f0\fs24\lang1033{\*\listtag0}\par}
\pard\plain\ltrpar\ql\sl240\slmult1\itap0{\cf2\f0\fs24\b\lang1033{\*\listtag0}\par}
\pard\plain\ltrpar\ql\sl240\slmult1\itap0{\cf2\f0\fs24\b\lang1033{\*\listtag0}\abinodiroverride\ltrch Screen *MakeVirtualScreen(Screen *root, int x, int y, int w, int h)}{\cf2\f0\fs24\b\lang1033{\*\listtag0}\par}
\pard\plain\ltrpar\ql\sl240\slmult1\itap0{\cf2\f0\fs24\lang1033{\*\listtag0}\par}
\pard\plain\ltrpar\ql\sl240\slmult1\itap0{\cf2\f0\fs24\lang1033{\*\listtag0}\abinodiroverride\ltrch This function builds a virtual screen at an arbitrary offset over or within the root screen.  This function is similar to }{\cf2\f0\fs24\b\lang1033{\*\listtag0}MakeCenteredScreen()}{\cf2\f0\fs24\lang1033{\*\listtag0} in all ways, except that instead of centering the virtual screen, this function places the virtual screen at the x/y offset you specify.  }{\cf2\f0\fs24\lang1033{\*\listtag0}\par}
\pard\plain\ltrpar\ql\sl240\slmult1\itap0{\cf2\f0\fs24\lang1033{\*\listtag0}\abinodiroverride\ltrch Negative x/y values are legal.}{\cf2\f0\fs24\lang1033{\*\listtag0}\par}
\pard\plain\ltrpar\ql\sl240\slmult1\itap0{\cf2\f0\fs24\lang1033{\*\listtag0}\par}
\pard\plain\ltrpar\ql\sl240\slmult1\itap0{\cf2\f0\fs24\lang1033{\*\listtag0}\abinodiroverride\ltrch Input:}{\cf2\f0\fs24\lang1033{\*\listtag0}\par}
\pard\plain\ltrpar\ql\sl240\slmult1\itap0{\cf2\f0\fs24\lang1033{\*\listtag0}\par}
\pard\plain\ltrpar\ql\sl240\slmult1\itap0{\cf2\f0\fs24\lang1033{\*\listtag0}\abinodiroverride\ltrch The }{\cf2\f0\fs24\b\lang1033{\*\listtag0}root}{\cf2\f0\fs24\lang1033{\*\listtag0} parameter is a screen handle.  It can refer to any type of screen, including another virtual screen.  The }{\cf2\f0\fs24\b\lang1033{\*\listtag0}x}{\cf2\f0\fs24\lang1033{\*\listtag0} and }{\cf2\f0\fs24\b\lang1033{\*\listtag0}y}{\cf2\f0\fs24\lang1033{\*\listtag0} parameters specify the placement of the upper left corner of the virtual screen, relative to the root screen.  The }{\cf2\f0\fs24\b\lang1033{\*\listtag0}w}{\cf2\f0\fs24\lang1033{\*\listtag0} and }{\cf2\f0\fs24\b\lang1033{\*\listtag0}h}{\cf2\f0\fs24\lang1033{\*\listtag0} parameters contain the sizes for the new virtual screen; they must be greater than 0.}{\cf2\f0\fs24\lang1033{\*\listtag0}\par}
\pard\plain\ltrpar\ql\sl240\slmult1\itap0{\cf2\f0\fs24\lang1033{\*\listtag0}\par}
\pard\plain\ltrpar\ql\sl240\slmult1\itap0{\cf2\f0\fs24\lang1033{\*\listtag0}\abinodiroverride\ltrch Output:}{\cf2\f0\fs24\lang1033{\*\listtag0}\par}
\pard\plain\ltrpar\ql\sl240\slmult1\itap0{\cf2\f0\fs24\lang1033{\*\listtag0}\par}
\pard\plain\ltrpar\ql\sl240\slmult1\itap0{\cf2\f0\fs24\lang1033{\*\listtag0}\abinodiroverride\ltrch A handle to the virtual screen.  This will never be }{\cf2\f0\fs24\b\lang1033{\*\listtag0}NULL}{\cf2\f0\fs24\lang1033{\*\listtag0}; the only error that can happen is an out-of-memory condition, and that will abort the Poco program automatically.}{\cf2\f0\fs24\lang1033{\*\listtag0}\par}
\pard\plain\ltrpar\ql\sl240\slmult1\itap0{\cf2\f0\fs24\lang1033{\*\listtag0}\par}
\pard\plain\ltrpar\ql\sl240\slmult1\itap0{\cf2\f0\fs24\b\lang1033{\*\listtag0}\par}
\pard\plain\ltrpar\ql\sl240\slmult1\itap0{\cf2\f0\fs24\b\lang1033{\*\listtag0}\abinodiroverride\ltrch void FreeVirtualScreen(Screen *vscreen)}{\cf2\f0\fs24\b\lang1033{\*\listtag0}\par}
\pard\plain\ltrpar\ql\sl240\slmult1\itap0{\cf2\f0\fs24\lang1033{\*\listtag0}\par}
\pard\plain\ltrpar\ql\sl240\slmult1\itap0{\cf2\f0\fs24\lang1033{\*\listtag0}\abinodiroverride\ltrch This function frees a virtual screen allocated by }{\cf2\f0\fs24\b\lang1033{\*\listtag0}MakeVirtualScreen()}{\cf2\f0\fs24\lang1033{\*\listtag0}.}{\cf2\f0\fs24\lang1033{\*\listtag0}\par}
\pard\plain\ltrpar\ql\sl240\slmult1\itap0{\cf2\f0\fs24\lang1033{\*\listtag0}\abinodiroverride\ltrch \page }{\cf2\f0\fs24\lang1033{\*\listtag0}\par}
\pard\plain\ltrpar\ql\sl240\slmult1\itap0{\cf2\f0\fs24\lang1033{\*\listtag0}\par}
\pard\plain\ltrpar\ql\sl240\slmult1\itap0{\cf2\f0\fs24\lang1033{\*\listtag0}\abinodiroverride\ltrch Input:}{\cf2\f0\fs24\lang1033{\*\listtag0}\par}
\pard\plain\ltrpar\ql\sl240\slmult1\itap0{\cf2\f0\fs24\lang1033{\*\listtag0}\par}
\pard\plain\ltrpar\ql\sl240\slmult1\itap0{\cf2\f0\fs24\lang1033{\*\listtag0}\abinodiroverride\ltrch The }{\cf2\f0\fs24\b\lang1033{\*\listtag0}vscreen}{\cf2\f0\fs24\lang1033{\*\listtag0} parameter is the handle of a screen previously created by }{\cf2\f0\fs24\b\lang1033{\*\listtag0}MakeVirtualScreen()}{\cf2\f0\fs24\lang1033{\*\listtag0}.}{\cf2\f0\fs24\lang1033{\*\listtag0}\par}
\pard\plain\ltrpar\ql\sl240\slmult1\itap0{\cf2\f0\fs24\lang1033{\*\listtag0}\par}
\pard\plain\ltrpar\ql\sl240\slmult1\itap0{\cf2\f0\fs24\lang1033{\*\listtag0}\abinodiroverride\ltrch \page }{\cf2\f0\fs24\lang1033{\*\listtag0}\par}
\pard\plain\ltrpar\ql\sl240\slmult1\itap0{\cf2\f0\fs24\lang1033{\*\listtag0}\abinodiroverride\ltrch \page }{\cf2\f0\fs24\lang1033{\*\listtag0}\par}
\pard\plain\ltrpar\ql\sl240\slmult1\itap0{\cf2\f0\fs28\b\lang1033{\*\listtag0}\abinodiroverride\ltrch FLICPLAY.POE}{\cf2\f0\fs28\b\lang1033{\*\listtag0}\par}
\pard\plain\ltrpar\ql\sl240\slmult1\itap0{\cf2\f0\fs24\lang1033{\*\listtag0}\par}
\pard\plain\ltrpar\ql\sl240\slmult1\itap0{\cf2\f0\fs24\lang1033{\*\listtag0}\par}
\pard\plain\ltrpar\ql\sl240\slmult1\itap0{\cf2\f0\fs24\lang1033{\*\listtag0}\abinodiroverride\ltrch The FLICPLAY POE provides several functions for reading flic files from disk without loading them into the current flic (picscreen) or AnimCel.  The playback occurs straight from disk.  There are a variety of reasons for using FLICPLAY functions instead of built in Poco library functions.  Among them are:}{\cf2\f0\fs24\lang1033{\*\listtag0}\par}
\pard\plain\ltrpar\ql\sl240\slmult1\itap0{\cf2\f0\fs24\lang1033{\*\listtag0}\par}
\pard\plain\ltrpar\ql\sl240\slmult1\itap0{\cf2\f0\fs24\lang1033{\*\listtag0}\abinodiroverride\ltrch   -If you only want to play the flic once, it's faster to play it straight from disk, as opposed to loading it as the current flic then playing it.}{\cf2\f0\fs24\lang1033{\*\listtag0}\par}
\pard\plain\ltrpar\ql\sl240\slmult1\itap0{\cf2\f0\fs24\lang1033{\*\listtag0}\par}
\pard\plain\ltrpar\ql\sl240\slmult1\itap0{\cf2\f0\fs24\lang1033{\*\listtag0}\abinodiroverride\ltrch   -The built in function plays a specified number of frames then stops.  FLICPLAY functions allow you to play the whole flic once then stop, play until a key or mouse button is hit, play a specified number of frames, or play for a specified length of time.}{\cf2\f0\fs24\lang1033{\*\listtag0}\par}
\pard\plain\ltrpar\ql\sl240\slmult1\itap0{\cf2\f0\fs24\lang1033{\*\listtag0}\par}
\pard\plain\ltrpar\ql\sl240\slmult1\itap0{\cf2\f0\fs24\lang1033{\*\listtag0}\abinodiroverride\ltrch   -The FLICPLAY functions allow you to play a flic to any arbitrary screen, including virtual and RAM-allocated screens.  This is useful when you want to programmatically composite multiple flics, or otherwise process one or more input flics into a single output flic.  (In this case, you use PLAYFLIC to read flic frames into a RAM screen, then create the new flic into the current flic; the picscreen.)}{\cf2\f0\fs24\lang1033{\*\listtag0}\par}
\pard\plain\ltrpar\ql\sl240\slmult1\itap0{\cf2\f0\fs24\lang1033{\*\listtag0}\par}
\pard\plain\ltrpar\ql\sl240\slmult1\itap0{\cf2\f0\fs24\lang1033{\*\listtag0}\abinodiroverride\ltrch By default, flic playback occurs on the picscreen (that is, the video screen).  Since the picscreen is really the current frame of the currently-loaded flic, this destroys the current frame.  The }{\cf2\f0\fs24\b\lang1033{\*\listtag0}FlicOptions()}{\cf2\f0\fs24\lang1033{\*\listtag0} function allows you to specify a different screen as the playback destination.  As long as you call }{\cf2\f0\fs24\b\lang1033{\*\listtag0}FlicOptions()}{\cf2\f0\fs24\lang1033{\*\listtag0} after opening the flic and before calling a playback function, the currently-loaded flic is not disturbed.}{\cf2\f0\fs24\lang1033{\*\listtag0}\par}
\pard\plain\ltrpar\ql\sl240\slmult1\itap0{\cf2\f0\fs24\lang1033{\*\listtag0}\par}
\pard\plain\ltrpar\ql\sl240\slmult1\itap0{\cf2\f0\fs24\lang1033{\*\listtag0}\abinodiroverride\ltrch The general sequence of processing for playing a flic straight from disk to the video screen is:}{\cf2\f0\fs24\lang1033{\*\listtag0}\par}
\pard\plain\ltrpar\ql\sl240\slmult1\itap0{\cf2\f0\fs24\lang1033{\*\listtag0}\par}
\pard\plain\ltrpar\ql\sl240\slmult1\itap0{\cf2\f0\fs24\lang1033{\*\listtag0}\abinodiroverride\ltrch   -Call }{\cf2\f0\fs24\b\lang1033{\*\listtag0}FlicOpen()}{\cf2\f0\fs24\lang1033{\*\listtag0} or }{\cf2\f0\fs24\b\lang1033{\*\listtag0}FlicOpenInfo()}{\cf2\f0\fs24\lang1033{\*\listtag0} to open and validate the flic file.}{\cf2\f0\fs24\lang1033{\*\listtag0}\par}
\pard\plain\ltrpar\ql\sl240\slmult1\itap0{\cf2\f0\fs24\lang1033{\*\listtag0}\par}
\pard\plain\ltrpar\ql\sl240\slmult1\itap0{\cf2\f0\fs24\lang1033{\*\listtag0}\abinodiroverride\ltrch   -(Optional).  Call }{\cf2\f0\fs24\b\lang1033{\*\listtag0}FlicOptions()}{\cf2\f0\fs24\lang1033{\*\listtag0} if you want to override the default playback options.}{\cf2\f0\fs24\lang1033{\*\listtag0}\par}
\pard\plain\ltrpar\ql\sl240\slmult1\itap0{\cf2\f0\fs24\lang1033{\*\listtag0}\par}
\pard\plain\ltrpar\ql\sl240\slmult1\itap0{\cf2\f0\fs24\lang1033{\*\listtag0}\abinodiroverride\ltrch   -(Optional).  Call the }{\cf2\f0\fs24\b\lang1033{\*\listtag0}Clear()}{\cf2\f0\fs24\lang1033{\*\listtag0} and/or }{\cf2\f0\fs24\b\lang1033{\*\listtag0}HideCursor()}{\cf2\f0\fs24\lang1033{\*\listtag0} built in functions, if desired.}{\cf2\f0\fs24\lang1033{\*\listtag0}\par}
\pard\plain\ltrpar\ql\sl240\slmult1\itap0{\cf2\f0\fs24\lang1033{\*\listtag0}\abinodiroverride\ltrch \page }{\cf2\f0\fs24\lang1033{\*\listtag0}\par}
\pard\plain\ltrpar\ql\sl240\slmult1\itap0{\cf2\f0\fs24\lang1033{\*\listtag0}\par}
\pard\plain\ltrpar\ql\sl240\slmult1\itap0{\cf2\f0\fs24\lang1033{\*\listtag0}\abinodiroverride\ltrch   -Call }{\cf2\f0\fs24\b\lang1033{\*\listtag0}FlicPlay()}{\cf2\f0\fs24\lang1033{\*\listtag0}, }{\cf2\f0\fs24\b\lang1033{\*\listtag0}FlicPlayOnce()}{\cf2\f0\fs24\lang1033{\*\listtag0}, }{\cf2\f0\fs24\b\lang1033{\*\listtag0}FlicPlayTimed()}{\cf2\f0\fs24\lang1033{\*\listtag0}, or }{\cf2\f0\fs24\b\lang1033{\*\listtag0}FlicPlayCount()}{\cf2\f0\fs24\lang1033{\*\listtag0} to show the flic on the screen.}{\cf2\f0\fs24\lang1033{\*\listtag0}\par}
\pard\plain\ltrpar\ql\sl240\slmult1\itap0{\cf2\f0\fs24\lang1033{\*\listtag0}\par}
\pard\plain\ltrpar\ql\sl240\slmult1\itap0{\cf2\f0\fs24\lang1033{\*\listtag0}\abinodiroverride\ltrch   -Call }{\cf2\f0\fs24\b\lang1033{\*\listtag0}FlicClose()}{\cf2\f0\fs24\lang1033{\*\listtag0} when you're done with the flic. }{\cf2\f0\fs24\lang1033{\*\listtag0}\par}
\pard\plain\ltrpar\ql\sl240\slmult1\itap0{\cf2\f0\fs24\lang1033{\*\listtag0}\par}
\pard\plain\ltrpar\ql\sl240\slmult1\itap0{\cf2\f0\fs24\lang1033{\*\listtag0}\abinodiroverride\ltrch The general sequence of processing for playing a flic to a RAM-allocated screen for compositing is:}{\cf2\f0\fs24\lang1033{\*\listtag0}\par}
\pard\plain\ltrpar\ql\sl240\slmult1\itap0{\cf2\f0\fs24\lang1033{\*\listtag0}\par}
\pard\plain\ltrpar\ql\sl240\slmult1\itap0{\cf2\f0\fs24\lang1033{\*\listtag0}\abinodiroverride\ltrch   -Call }{\cf2\f0\fs24\b\lang1033{\*\listtag0}AllocScreen()}{\cf2\f0\fs24\lang1033{\*\listtag0} to build the RAM screen.}{\cf2\f0\fs24\lang1033{\*\listtag0}\par}
\pard\plain\ltrpar\ql\sl240\slmult1\itap0{\cf2\f0\fs24\lang1033{\*\listtag0}\par}
\pard\plain\ltrpar\ql\sl240\slmult1\itap0{\cf2\f0\fs24\lang1033{\*\listtag0}\abinodiroverride\ltrch   -Call }{\cf2\f0\fs24\b\lang1033{\*\listtag0}FlicOpen()}{\cf2\f0\fs24\lang1033{\*\listtag0} or }{\cf2\f0\fs24\b\lang1033{\*\listtag0}FlicOpenInfo() }{\cf2\f0\fs24\lang1033{\*\listtag0}to open and validate the flic file.}{\cf2\f0\fs24\lang1033{\*\listtag0}\par}
\pard\plain\ltrpar\ql\sl240\slmult1\itap0{\cf2\f0\fs24\lang1033{\*\listtag0}\par}
\pard\plain\ltrpar\ql\sl240\slmult1\itap0{\cf2\f0\fs24\lang1033{\*\listtag0}\abinodiroverride\ltrch   -Call }{\cf2\f0\fs24\b\lang1033{\*\listtag0}FlicOptions()}{\cf2\f0\fs24\lang1033{\*\listtag0} to tie the playback to the RAM screen, and override other playback options as needed.}{\cf2\f0\fs24\lang1033{\*\listtag0}\par}
\pard\plain\ltrpar\ql\sl240\slmult1\itap0{\cf2\f0\fs24\lang1033{\*\listtag0}\par}
\pard\plain\ltrpar\ql\sl240\slmult1\itap0{\cf2\f0\fs24\lang1033{\*\listtag0}\abinodiroverride\ltrch   -For each frame of the input flic:}{\cf2\f0\fs24\lang1033{\*\listtag0}\par}
\pard\plain\ltrpar\ql\sl240\slmult1\itap0{\cf2\f0\fs24\lang1033{\*\listtag0}\abinodiroverride\ltrch   -Call }{\cf2\f0\fs24\b\lang1033{\*\listtag0}FlicPlayCount()}{\cf2\f0\fs24\lang1033{\*\listtag0} with a frame count of 1.}{\cf2\f0\fs24\lang1033{\*\listtag0}\par}
\pard\plain\ltrpar\ql\sl240\slmult1\itap0{\cf2\f0\fs24\lang1033{\*\listtag0}\abinodiroverride\ltrch   -Process the frame in whatever way you want.}{\cf2\f0\fs24\lang1033{\*\listtag0}\par}
\pard\plain\ltrpar\ql\sl240\slmult1\itap0{\cf2\f0\fs24\lang1033{\*\listtag0}\par}
\pard\plain\ltrpar\ql\sl240\slmult1\itap0{\cf2\f0\fs24\lang1033{\*\listtag0}\abinodiroverride\ltrch   -Call }{\cf2\f0\fs24\b\lang1033{\*\listtag0}FlicClose()}{\cf2\f0\fs24\lang1033{\*\listtag0} when you're done with the flic.}{\cf2\f0\fs24\lang1033{\*\listtag0}\par}
\pard\plain\ltrpar\ql\sl240\slmult1\itap0{\cf2\f0\fs24\lang1033{\*\listtag0}\par}
\pard\plain\ltrpar\ql\sl240\slmult1\itap0{\cf2\f0\fs24\lang1033{\*\listtag0}\abinodiroverride\ltrch The FLICPLAY functions all use a }{\cf2\f0\fs24\b\lang1033{\*\listtag0}Flic}{\cf2\f0\fs24\lang1033{\*\listtag0} handle.  This is an opaque datatype automatically defined when you request the FLICPLAY.POE module in your Poco program.  The open functions return a }{\cf2\f0\fs24\b\lang1033{\*\listtag0}Flic}{\cf2\f0\fs24\lang1033{\*\listtag0} handle, and you pass the handle to the other FLICPLAY functions.  You can declare a variable of }{\cf2\f0\fs24\b\lang1033{\*\listtag0}Flic\~*}{\cf2\f0\fs24\lang1033{\*\listtag0} type to hold the handle, but you cannot examine or modify the memory it points to.}{\cf2\f0\fs24\lang1033{\*\listtag0}\par}
\pard\plain\ltrpar\ql\sl240\slmult1\itap0{\cf2\f0\fs24\lang1033{\*\listtag0}\par}
\pard\plain\ltrpar\ql\sl240\slmult1\itap0{\cf2\f0\fs24\lang1033{\*\listtag0}\abinodiroverride\ltrch Any number of flic files can be open at the same time.  The }{\cf2\f0\fs24\b\lang1033{\*\listtag0}Flic}{\cf2\f0\fs24\lang1033{\*\listtag0} handle is used more or less like a }{\cf2\f0\fs24\b\lang1033{\*\listtag0}FILE}{\cf2\f0\fs24\lang1033{\*\listtag0} handle, allowing you to specify which input flic is the source data for any given operation.  When you process multiple input flics concurrently, use the }{\cf2\f0\fs24\b\lang1033{\*\listtag0}FlicOptions()}{\cf2\f0\fs24\lang1033{\*\listtag0} function to tie each flic to a different screen.  Attempting to concurrently read multiple flics onto the same screen will yield unpredictable results.}{\cf2\f0\fs24\lang1033{\*\listtag0}\par}
\pard\plain\ltrpar\ql\sl240\slmult1\itap0{\cf2\f0\fs24\lang1033{\*\listtag0}\par}
\pard\plain\ltrpar\ql\sl240\slmult1\itap0{\cf2\f0\fs24\b\lang1033{\*\listtag0}\par}
\pard\plain\ltrpar\ql\sl240\slmult1\itap0{\cf2\f0\fs24\b\lang1033{\*\listtag0}\abinodiroverride\ltrch Errcode *FlicInfo(char *path, int *width, int *height,}{\cf2\f0\fs24\b\lang1033{\*\listtag0}\par}
\pard\plain\ltrpar\ql\sl240\slmult1\itap0{\cf2\f0\fs24\b\lang1033{\*\listtag0}\abinodiroverride\ltrch    int *speed, int *num_frames)}{\cf2\f0\fs24\b\lang1033{\*\listtag0}\par}
\pard\plain\ltrpar\ql\sl240\slmult1\itap0{\cf2\f0\fs24\lang1033{\*\listtag0}\par}
\pard\plain\ltrpar\ql\sl240\slmult1\itap0{\cf2\f0\fs24\lang1033{\*\listtag0}\abinodiroverride\ltrch This function returns information about a flic file.  It opens the file, gets the info, then closes the file.  }{\cf2\f0\fs24\lang1033{\*\listtag0}\par}
\pard\plain\ltrpar\ql\sl240\slmult1\itap0{\cf2\f0\fs24\lang1033{\*\listtag0}\par}
\pard\plain\ltrpar\ql\sl240\slmult1\itap0{\cf2\f0\fs24\lang1033{\*\listtag0}\abinodiroverride\ltrch If the file does not exist or is not a valid flic file, this function does }{\cf2\f0\fs24\i\lang1033{\*\listtag0}not}{\cf2\f0\fs24\lang1033{\*\listtag0} abort your Poco program.  Instead, it returns an }{\cf2\f0\fs24\b\lang1033{\*\listtag0}Errcode}{\cf2\f0\fs24\lang1033{\*\listtag0} status describing the problem.  All other FLICPLAY functions abort your Poco program if there is any problem processing the file.  This function}{\cf2\f0\fs24\lang1033{\*\listtag0}\par}
\pard\plain\ltrpar\ql\sl240\slmult1\itap0{\cf2\f0\fs24\lang1033{\*\listtag0}\abinodiroverride\ltrch \page  provides a safe method of validating a flic file before processing it.}{\cf2\f0\fs24\lang1033{\*\listtag0}\par}
\pard\plain\ltrpar\ql\sl240\slmult1\itap0{\cf2\f0\fs24\lang1033{\*\listtag0}\par}
\pard\plain\ltrpar\ql\sl240\slmult1\itap0{\cf2\f0\fs24\lang1033{\*\listtag0}\abinodiroverride\ltrch Input:}{\cf2\f0\fs24\lang1033{\*\listtag0}\par}
\pard\plain\ltrpar\ql\sl240\slmult1\itap0{\cf2\f0\fs24\lang1033{\*\listtag0}\par}
\pard\plain\ltrpar\ql\sl240\slmult1\itap0{\cf2\f0\fs24\lang1033{\*\listtag0}\abinodiroverride\ltrch The }{\cf2\f0\fs24\b\lang1033{\*\listtag0}path}{\cf2\f0\fs24\lang1033{\*\listtag0} parameter is a pointer to a string containing the flic file name, including (optional) device and path information.  The }{\cf2\f0\fs24\b\lang1033{\*\listtag0}width}{\cf2\f0\fs24\lang1033{\*\listtag0}, }{\cf2\f0\fs24\b\lang1033{\*\listtag0}height}{\cf2\f0\fs24\lang1033{\*\listtag0}, }{\cf2\f0\fs24\b\lang1033{\*\listtag0}speed}{\cf2\f0\fs24\lang1033{\*\listtag0}, and }{\cf2\f0\fs24\b\lang1033{\*\listtag0}num_frames}{\cf2\f0\fs24\lang1033{\*\listtag0} parameters are pointers to integer variables, into which the corresponding information is returned.  Any of these parameters may be }{\cf2\f0\fs24\b\lang1033{\*\listtag0}NULL}{\cf2\f0\fs24\lang1033{\*\listtag0}, indicating that you don't need the corresponding piece of information returned.}{\cf2\f0\fs24\lang1033{\*\listtag0}\par}
\pard\plain\ltrpar\ql\sl240\slmult1\itap0{\cf2\f0\fs24\lang1033{\*\listtag0}\par}
\pard\plain\ltrpar\ql\sl240\slmult1\itap0{\cf2\f0\fs24\lang1033{\*\listtag0}\abinodiroverride\ltrch Output:}{\cf2\f0\fs24\lang1033{\*\listtag0}\par}
\pard\plain\ltrpar\ql\sl240\slmult1\itap0{\cf2\f0\fs24\b\lang1033{\*\listtag0}\par}
\pard\plain\ltrpar\ql\sl240\slmult1\itap0{\cf2\f0\fs24\b\lang1033{\*\listtag0}\abinodiroverride\ltrch Success}{\cf2\f0\fs24\lang1033{\*\listtag0} (0), or an appropriate negative }{\cf2\f0\fs24\b\lang1033{\*\listtag0}Errcode}{\cf2\f0\fs24\lang1033{\*\listtag0} value.}{\cf2\f0\fs24\b\lang1033{\*\listtag0}\par}
\pard\plain\ltrpar\ql\sl240\slmult1\itap0{\cf2\f0\fs24\lang1033{\*\listtag0}\par}
\pard\plain\ltrpar\ql\sl240\slmult1\itap0{\cf2\f0\fs24\b\lang1033{\*\listtag0}\par}
\pard\plain\ltrpar\ql\sl240\slmult1\itap0{\cf2\f0\fs24\b\lang1033{\*\listtag0}\abinodiroverride\ltrch Flic*FlicOpenInfo(char *path, int *width, int *height,}{\cf2\f0\fs24\b\lang1033{\*\listtag0}\par}
\pard\plain\ltrpar\ql\sl240\slmult1\itap0{\cf2\f0\fs24\b\lang1033{\*\listtag0}\abinodiroverride\ltrch     int *speed, int\~*frames)}{\cf2\f0\fs24\b\lang1033{\*\listtag0}\par}
\pard\plain\ltrpar\ql\sl240\slmult1\itap0{\cf2\f0\fs24\lang1033{\*\listtag0}\par}
\pard\plain\ltrpar\ql\sl240\slmult1\itap0{\cf2\f0\fs24\lang1033{\*\listtag0}\abinodiroverride\ltrch This function opens a flic file for further processing, and returns information about the file.  }{\cf2\f0\fs24\lang1033{\*\listtag0}\par}
\pard\plain\ltrpar\ql\sl240\slmult1\itap0{\cf2\f0\fs24\lang1033{\*\listtag0}\par}
\pard\plain\ltrpar\ql\sl240\slmult1\itap0{\cf2\f0\fs24\lang1033{\*\listtag0}\abinodiroverride\ltrch If the file cannot be opened and validated, your Poco program aborts.}{\cf2\f0\fs24\lang1033{\*\listtag0}\par}
\pard\plain\ltrpar\ql\sl240\slmult1\itap0{\cf2\f0\fs24\lang1033{\*\listtag0}\par}
\pard\plain\ltrpar\ql\sl240\slmult1\itap0{\cf2\f0\fs24\lang1033{\*\listtag0}\abinodiroverride\ltrch Input:}{\cf2\f0\fs24\lang1033{\*\listtag0}\par}
\pard\plain\ltrpar\ql\sl240\slmult1\itap0{\cf2\f0\fs24\lang1033{\*\listtag0}\par}
\pard\plain\ltrpar\ql\sl240\slmult1\itap0{\cf2\f0\fs24\lang1033{\*\listtag0}\abinodiroverride\ltrch The }{\cf2\f0\fs24\b\lang1033{\*\listtag0}path}{\cf2\f0\fs24\lang1033{\*\listtag0} parameter is a pointer to a string containing the flic file name, including (optional) device and path information.  The }{\cf2\f0\fs24\b\lang1033{\*\listtag0}width}{\cf2\f0\fs24\lang1033{\*\listtag0}, }{\cf2\f0\fs24\b\lang1033{\*\listtag0}height}{\cf2\f0\fs24\lang1033{\*\listtag0}, }{\cf2\f0\fs24\b\lang1033{\*\listtag0}speed}{\cf2\f0\fs24\lang1033{\*\listtag0}, and }{\cf2\f0\fs24\b\lang1033{\*\listtag0}num_frames}{\cf2\f0\fs24\lang1033{\*\listtag0} parameters are pointers to integer variables, into which the corresponding information is returned.  Any of these parameters may be }{\cf2\f0\fs24\b\lang1033{\*\listtag0}NULL}{\cf2\f0\fs24\lang1033{\*\listtag0}, indicating that you don't need the corresponding piece of information returned.}{\cf2\f0\fs24\lang1033{\*\listtag0}\par}
\pard\plain\ltrpar\ql\sl240\slmult1\itap0{\cf2\f0\fs24\lang1033{\*\listtag0}\par}
\pard\plain\ltrpar\ql\sl240\slmult1\itap0{\cf2\f0\fs24\lang1033{\*\listtag0}\abinodiroverride\ltrch Output:}{\cf2\f0\fs24\lang1033{\*\listtag0}\par}
\pard\plain\ltrpar\ql\sl240\slmult1\itap0{\cf2\f0\fs24\lang1033{\*\listtag0}\par}
\pard\plain\ltrpar\ql\sl240\slmult1\itap0{\cf2\f0\fs24\lang1033{\*\listtag0}\abinodiroverride\ltrch A }{\cf2\f0\fs24\b\lang1033{\*\listtag0}Flic}{\cf2\f0\fs24\lang1033{\*\listtag0} handle.}{\cf2\f0\fs24\lang1033{\*\listtag0}\par}
\pard\plain\ltrpar\ql\sl240\slmult1\itap0{\cf2\f0\fs24\lang1033{\*\listtag0}\par}
\pard\plain\ltrpar\ql\sl240\slmult1\itap0{\cf2\f0\fs24\b\lang1033{\*\listtag0}\par}
\pard\plain\ltrpar\ql\sl240\slmult1\itap0{\cf2\f0\fs24\b\lang1033{\*\listtag0}\abinodiroverride\ltrch Flic*FlicOpen(char *path)}{\cf2\f0\fs24\b\lang1033{\*\listtag0}\par}
\pard\plain\ltrpar\ql\sl240\slmult1\itap0{\cf2\f0\fs24\lang1033{\*\listtag0}\par}
\pard\plain\ltrpar\ql\sl240\slmult1\itap0{\cf2\f0\fs24\lang1033{\*\listtag0}\abinodiroverride\ltrch This function opens a flic file for further processing.}{\cf2\f0\fs24\lang1033{\*\listtag0}\par}
\pard\plain\ltrpar\ql\sl240\slmult1\itap0{\cf2\f0\fs24\lang1033{\*\listtag0}\par}
\pard\plain\ltrpar\ql\sl240\slmult1\itap0{\cf2\f0\fs24\lang1033{\*\listtag0}\abinodiroverride\ltrch If the file cannot be opened and validated, your Poco program aborts.}{\cf2\f0\fs24\lang1033{\*\listtag0}\par}
\pard\plain\ltrpar\ql\sl240\slmult1\itap0{\cf2\f0\fs24\lang1033{\*\listtag0}\abinodiroverride\ltrch \page }{\cf2\f0\fs24\lang1033{\*\listtag0}\par}
\pard\plain\ltrpar\ql\sl240\slmult1\itap0{\cf2\f0\fs24\lang1033{\*\listtag0}\par}
\pard\plain\ltrpar\ql\sl240\slmult1\itap0{\cf2\f0\fs24\lang1033{\*\listtag0}\abinodiroverride\ltrch Input:}{\cf2\f0\fs24\lang1033{\*\listtag0}\par}
\pard\plain\ltrpar\ql\sl240\slmult1\itap0{\cf2\f0\fs24\lang1033{\*\listtag0}\par}
\pard\plain\ltrpar\ql\sl240\slmult1\itap0{\cf2\f0\fs24\lang1033{\*\listtag0}\abinodiroverride\ltrch The }{\cf2\f0\fs24\b\lang1033{\*\listtag0}path}{\cf2\f0\fs24\lang1033{\*\listtag0} parameter is a pointer to a string containing the flic file name, including (optional) device and path information.}{\cf2\f0\fs24\lang1033{\*\listtag0}\par}
\pard\plain\ltrpar\ql\sl240\slmult1\itap0{\cf2\f0\fs24\lang1033{\*\listtag0}\par}
\pard\plain\ltrpar\ql\sl240\slmult1\itap0{\cf2\f0\fs24\lang1033{\*\listtag0}\abinodiroverride\ltrch Output:}{\cf2\f0\fs24\lang1033{\*\listtag0}\par}
\pard\plain\ltrpar\ql\sl240\slmult1\itap0{\cf2\f0\fs24\lang1033{\*\listtag0}\par}
\pard\plain\ltrpar\ql\sl240\slmult1\itap0{\cf2\f0\fs24\lang1033{\*\listtag0}\abinodiroverride\ltrch A }{\cf2\f0\fs24\b\lang1033{\*\listtag0}Flic}{\cf2\f0\fs24\lang1033{\*\listtag0} handle.}{\cf2\f0\fs24\lang1033{\*\listtag0}\par}
\pard\plain\ltrpar\ql\sl240\slmult1\itap0{\cf2\f0\fs24\lang1033{\*\listtag0}\par}
\pard\plain\ltrpar\ql\sl240\slmult1\itap0{\cf2\f0\fs24\b\lang1033{\*\listtag0}\par}
\pard\plain\ltrpar\ql\sl240\slmult1\itap0{\cf2\f0\fs24\b\lang1033{\*\listtag0}\abinodiroverride\ltrch void FlicClose(Flic *theflic)}{\cf2\f0\fs24\b\lang1033{\*\listtag0}\par}
\pard\plain\ltrpar\ql\sl240\slmult1\itap0{\cf2\f0\fs24\lang1033{\*\listtag0}\par}
\pard\plain\ltrpar\ql\sl240\slmult1\itap0{\cf2\f0\fs24\lang1033{\*\listtag0}\abinodiroverride\ltrch This function closes a flic file opened via }{\cf2\f0\fs24\b\lang1033{\*\listtag0}FlicOpen()}{\cf2\f0\fs24\lang1033{\*\listtag0} or }{\cf2\f0\fs24\b\lang1033{\*\listtag0}FlicOpenInfo()}{\cf2\f0\fs24\lang1033{\*\listtag0}.  }{\cf2\f0\fs24\lang1033{\*\listtag0}\par}
\pard\plain\ltrpar\ql\sl240\slmult1\itap0{\cf2\f0\fs24\lang1033{\*\listtag0}\par}
\pard\plain\ltrpar\ql\sl240\slmult1\itap0{\cf2\f0\fs24\lang1033{\*\listtag0}\abinodiroverride\ltrch The flic handle must refer to an open flic file, or your Poco program aborts.}{\cf2\f0\fs24\lang1033{\*\listtag0}\par}
\pard\plain\ltrpar\ql\sl240\slmult1\itap0{\cf2\f0\fs24\lang1033{\*\listtag0}\par}
\pard\plain\ltrpar\ql\sl240\slmult1\itap0{\cf2\f0\fs24\lang1033{\*\listtag0}\abinodiroverride\ltrch Input:}{\cf2\f0\fs24\lang1033{\*\listtag0}\par}
\pard\plain\ltrpar\ql\sl240\slmult1\itap0{\cf2\f0\fs24\lang1033{\*\listtag0}\par}
\pard\plain\ltrpar\ql\sl240\slmult1\itap0{\cf2\f0\fs24\lang1033{\*\listtag0}\abinodiroverride\ltrch A flic handle returned by a prior call to }{\cf2\f0\fs24\b\lang1033{\*\listtag0}FlicOpen()}{\cf2\f0\fs24\lang1033{\*\listtag0} or }{\cf2\f0\fs24\b\lang1033{\*\listtag0}FlicOpenInfo()}{\cf2\f0\fs24\lang1033{\*\listtag0}.}{\cf2\f0\fs24\lang1033{\*\listtag0}\par}
\pard\plain\ltrpar\ql\sl240\slmult1\itap0{\cf2\f0\fs24\lang1033{\*\listtag0}\par}
\pard\plain\ltrpar\ql\sl240\slmult1\itap0{\cf2\f0\fs24\b\lang1033{\*\listtag0}\par}
\pard\plain\ltrpar\ql\sl240\slmult1\itap0{\cf2\f0\fs24\b\lang1033{\*\listtag0}\abinodiroverride\ltrch void FlicRewind(Flic *theflic)}{\cf2\f0\fs24\b\lang1033{\*\listtag0}\par}
\pard\plain\ltrpar\ql\sl240\slmult1\itap0{\cf2\f0\fs24\lang1033{\*\listtag0}\par}
\pard\plain\ltrpar\ql\sl240\slmult1\itap0{\cf2\f0\fs24\lang1033{\*\listtag0}\abinodiroverride\ltrch This function 'rewinds' a flic to the first frame.  It does }{\cf2\f0\fs24\i\lang1033{\*\listtag0}not}{\cf2\f0\fs24\lang1033{\*\listtag0} actually redisplay the first frame; it just sets internal control information such that the next playback call causes the first frame to be displayed.}{\cf2\f0\fs24\lang1033{\*\listtag0}\par}
\pard\plain\ltrpar\ql\sl240\slmult1\itap0{\cf2\f0\fs24\lang1033{\*\listtag0}\par}
\pard\plain\ltrpar\ql\sl240\slmult1\itap0{\cf2\f0\fs24\lang1033{\*\listtag0}\abinodiroverride\ltrch The flic handle must refer to an open flic file, or your Poco program aborts.}{\cf2\f0\fs24\lang1033{\*\listtag0}\par}
\pard\plain\ltrpar\ql\sl240\slmult1\itap0{\cf2\f0\fs24\lang1033{\*\listtag0}\par}
\pard\plain\ltrpar\ql\sl240\slmult1\itap0{\cf2\f0\fs24\lang1033{\*\listtag0}\abinodiroverride\ltrch Input:}{\cf2\f0\fs24\lang1033{\*\listtag0}\par}
\pard\plain\ltrpar\ql\sl240\slmult1\itap0{\cf2\f0\fs24\lang1033{\*\listtag0}\par}
\pard\plain\ltrpar\ql\sl240\slmult1\itap0{\cf2\f0\fs24\lang1033{\*\listtag0}\abinodiroverride\ltrch A flic handle returned by a prior call to }{\cf2\f0\fs24\b\lang1033{\*\listtag0}FlicOpen()}{\cf2\f0\fs24\lang1033{\*\listtag0} or }{\cf2\f0\fs24\b\lang1033{\*\listtag0}FlicOpenInfo()}{\cf2\f0\fs24\lang1033{\*\listtag0}.}{\cf2\f0\fs24\lang1033{\*\listtag0}\par}
\pard\plain\ltrpar\ql\sl240\slmult1\itap0{\cf2\f0\fs24\lang1033{\*\listtag0}\par}
\pard\plain\ltrpar\ql\sl240\slmult1\itap0{\cf2\f0\fs24\b\lang1033{\*\listtag0}\par}
\pard\plain\ltrpar\ql\sl240\slmult1\itap0{\cf2\f0\fs24\b\lang1033{\*\listtag0}\abinodiroverride\ltrch void FlicSeekFrame(Flic *theflic, int theframe)}{\cf2\f0\fs24\b\lang1033{\*\listtag0}\par}
\pard\plain\ltrpar\ql\sl240\slmult1\itap0{\cf2\f0\fs24\lang1033{\*\listtag0}\par}
\pard\plain\ltrpar\ql\sl240\slmult1\itap0{\cf2\f0\fs24\lang1033{\*\listtag0}\abinodiroverride\ltrch This function seeks to an arbitrary frame in the flic, leaving that frame in the playback screen.}{\cf2\f0\fs24\lang1033{\*\listtag0}\par}
\pard\plain\ltrpar\ql\sl240\slmult1\itap0{\cf2\f0\fs24\lang1033{\*\listtag0}\par}
\pard\plain\ltrpar\ql\sl240\slmult1\itap0{\cf2\f0\fs24\lang1033{\*\listtag0}\abinodiroverride\ltrch When the playback screen is the video screen, this function attempts to allocate a ram-based screen as a work area for the seek operation.  If the allocation fails, the video screen is used as the work area, and the seek operation will be visible.  (It appears as very high speed playback.)}{\cf2\f0\fs24\lang1033{\*\listtag0}\par}
\pard\plain\ltrpar\ql\sl240\slmult1\itap0{\cf2\f0\fs24\lang1033{\*\listtag0}\abinodiroverride\ltrch \page }{\cf2\f0\fs24\lang1033{\*\listtag0}\par}
\pard\plain\ltrpar\ql\sl240\slmult1\itap0{\cf2\f0\fs24\lang1033{\*\listtag0}\par}
\pard\plain\ltrpar\ql\sl240\slmult1\itap0{\cf2\f0\fs24\lang1033{\*\listtag0}\abinodiroverride\ltrch The flic handle must refer to an open flic file, or your Poco program aborts.  The frame number to seek to must be in the range 0 <= theframe <= num_frames-1, or your Poco program aborts.}{\cf2\f0\fs24\lang1033{\*\listtag0}\par}
\pard\plain\ltrpar\ql\sl240\slmult1\itap0{\cf2\f0\fs24\lang1033{\*\listtag0}\par}
\pard\plain\ltrpar\ql\sl240\slmult1\itap0{\cf2\f0\fs24\lang1033{\*\listtag0}\abinodiroverride\ltrch Input:}{\cf2\f0\fs24\lang1033{\*\listtag0}\par}
\pard\plain\ltrpar\ql\sl240\slmult1\itap0{\cf2\f0\fs24\lang1033{\*\listtag0}\par}
\pard\plain\ltrpar\ql\sl240\slmult1\itap0{\cf2\f0\fs24\lang1033{\*\listtag0}\abinodiroverride\ltrch The }{\cf2\f0\fs24\b\lang1033{\*\listtag0}theflic}{\cf2\f0\fs24\lang1033{\*\listtag0} parameter is a flic handle returned by a prior call to }{\cf2\f0\fs24\b\lang1033{\*\listtag0}FlicOpen()}{\cf2\f0\fs24\lang1033{\*\listtag0} or }{\cf2\f0\fs24\b\lang1033{\*\listtag0}FlicOpenInfo()}{\cf2\f0\fs24\lang1033{\*\listtag0}.  The }{\cf2\f0\fs24\b\lang1033{\*\listtag0}theframe}{\cf2\f0\fs24\lang1033{\*\listtag0} parameter is an integer between zero and the number of flic frames minus 1.  (Frame numbers are zero-based).}{\cf2\f0\fs24\lang1033{\*\listtag0}\par}
\pard\plain\ltrpar\ql\sl240\slmult1\itap0{\cf2\f0\fs24\lang1033{\*\listtag0}\par}
\pard\plain\ltrpar\ql\sl240\slmult1\itap0{\cf2\f0\fs24\b\lang1033{\*\listtag0}\par}
\pard\plain\ltrpar\ql\sl240\slmult1\itap0{\cf2\f0\fs24\b\lang1033{\*\listtag0}\abinodiroverride\ltrch void FlicOptions(Flic*theflic,}{\cf2\f0\fs24\b\lang1033{\*\listtag0}\par}
\pard\plain\ltrpar\ql\sl240\slmult1\itap0{\cf2\f0\fs24\b\lang1033{\*\listtag0}\abinodiroverride\ltrch \~\~intspeed,}{\cf2\f0\fs24\b\lang1033{\*\listtag0}\par}
\pard\plain\ltrpar\ql\sl240\slmult1\itap0{\cf2\f0\fs24\b\lang1033{\*\listtag0}\abinodiroverride\ltrch \~\~intkeyhit_stops_playback,}{\cf2\f0\fs24\b\lang1033{\*\listtag0}\par}
\pard\plain\ltrpar\ql\sl240\slmult1\itap0{\cf2\f0\fs24\b\lang1033{\*\listtag0}\abinodiroverride\ltrch \~\~Screen*playback_screen,}{\cf2\f0\fs24\b\lang1033{\*\listtag0}\par}
\pard\plain\ltrpar\ql\sl240\slmult1\itap0{\cf2\f0\fs24\b\lang1033{\*\listtag0}\abinodiroverride\ltrch \~\~intxoffset,}{\cf2\f0\fs24\b\lang1033{\*\listtag0}\par}
\pard\plain\ltrpar\ql\sl240\slmult1\itap0{\cf2\f0\fs24\b\lang1033{\*\listtag0}\abinodiroverride\ltrch \~\~intyoffset)}{\cf2\f0\fs24\b\lang1033{\*\listtag0}\par}
\pard\plain\ltrpar\ql\sl240\slmult1\itap0{\cf2\f0\fs24\lang1033{\*\listtag0}\par}
\pard\plain\ltrpar\ql\sl240\slmult1\itap0{\cf2\f0\fs24\lang1033{\*\listtag0}\abinodiroverride\ltrch This function overrides one or more of the default playback options with the new values you specify.  Options are maintained separately for each open flic.}{\cf2\f0\fs24\lang1033{\*\listtag0}\par}
\pard\plain\ltrpar\ql\sl240\slmult1\itap0{\cf2\f0\fs24\lang1033{\*\listtag0}\par}
\pard\plain\ltrpar\ql\sl240\slmult1\itap0{\cf2\f0\fs24\lang1033{\*\listtag0}\abinodiroverride\ltrch The }{\cf2\f0\fs24\b\lang1033{\*\listtag0}speed}{\cf2\f0\fs24\lang1033{\*\listtag0} option, by default, is taken from the header of the flic file.  You can override it to any other value using this function.  It is expressed in terms of milliseconds-per-frame.  Zero is a valid speed, and results in no delay between frames.}{\cf2\f0\fs24\lang1033{\*\listtag0}\par}
\pard\plain\ltrpar\ql\sl240\slmult1\itap0{\cf2\f0\fs24\lang1033{\*\listtag0}\par}
\pard\plain\ltrpar\ql\sl240\slmult1\itap0{\cf2\f0\fs24\lang1033{\*\listtag0}\abinodiroverride\ltrch The }{\cf2\f0\fs24\b\lang1033{\*\listtag0}keyhit_stops_playback}{\cf2\f0\fs24\lang1033{\*\listtag0} option, by default, is }{\cf2\f0\fs24\b\lang1033{\*\listtag0}FALSE}{\cf2\f0\fs24\lang1033{\*\listtag0}.  When }{\cf2\f0\fs24\b\lang1033{\*\listtag0}TRUE}{\cf2\f0\fs24\lang1033{\*\listtag0}, it causes the playback to stop when the user hits a key or mouse button, in addition to any other stop condition such as frame count or time elapsed.}{\cf2\f0\fs24\lang1033{\*\listtag0}\par}
\pard\plain\ltrpar\ql\sl240\slmult1\itap0{\cf2\f0\fs24\lang1033{\*\listtag0}\par}
\pard\plain\ltrpar\ql\sl240\slmult1\itap0{\cf2\f0\fs24\lang1033{\*\listtag0}\abinodiroverride\ltrch The }{\cf2\f0\fs24\b\lang1033{\*\listtag0}playback_screen}{\cf2\f0\fs24\lang1033{\*\listtag0}, by default, is the picscreen (that is, the video screen).  You can override it to any other screen (swapscreen, a RAM-allocated screen, etc).}{\cf2\f0\fs24\lang1033{\*\listtag0}\par}
\pard\plain\ltrpar\ql\sl240\slmult1\itap0{\cf2\f0\fs24\lang1033{\*\listtag0}\par}
\pard\plain\ltrpar\ql\sl240\slmult1\itap0{\cf2\f0\fs24\lang1033{\*\listtag0}\abinodiroverride\ltrch The }{\cf2\f0\fs24\b\lang1033{\*\listtag0}xoffset}{\cf2\f0\fs24\lang1033{\*\listtag0} and }{\cf2\f0\fs24\b\lang1033{\*\listtag0}yoffset}{\cf2\f0\fs24\lang1033{\*\listtag0} options, by default, are zero.  You can override these to a non-zero value, and the flic will then be played with the upper left corner at the specified x/y coordinates.  Normally, if the screen is exactly the same size as the flic, the playback occurs at coordinates 0,0.  If the screen is not the same size as the flic, the output is centered over or within the playback screen.  Changing the x/y offsets allows you to override the default action of centering the flic.  If you override either }{\cf2\f0\fs24\b\lang1033{\*\listtag0}xoffset}{\cf2\f0\fs24\lang1033{\*\listtag0} or }{\cf2\f0\fs24\b\lang1033{\*\listtag0}yoffset}{\cf2\f0\fs24\lang1033{\*\listtag0}, you must provide the new values for both.  Negative offsets are valid.}{\cf2\f0\fs24\lang1033{\*\listtag0}\par}
\pard\plain\ltrpar\ql\sl240\slmult1\itap0{\cf2\f0\fs24\lang1033{\*\listtag0}\abinodiroverride\ltrch \page }{\cf2\f0\fs24\lang1033{\*\listtag0}\par}
\pard\plain\ltrpar\ql\sl240\slmult1\itap0{\cf2\f0\fs24\lang1033{\*\listtag0}\par}
\pard\plain\ltrpar\ql\sl240\slmult1\itap0{\cf2\f0\fs24\lang1033{\*\listtag0}\abinodiroverride\ltrch This function can be called at any time, and any number of times.  It is most often called right after the flic is opened, before calling any playback functions.  If the }{\cf2\f0\fs24\b\lang1033{\*\listtag0}playback_screen}{\cf2\f0\fs24\lang1033{\*\listtag0}, }{\cf2\f0\fs24\b\lang1033{\*\listtag0}xoffset}{\cf2\f0\fs24\lang1033{\*\listtag0}, or }{\cf2\f0\fs24\b\lang1033{\*\listtag0}yoffset}{\cf2\f0\fs24\lang1033{\*\listtag0} options are changed, a }{\cf2\f0\fs24\b\lang1033{\*\listtag0}FlicRewind()}{\cf2\f0\fs24\lang1033{\*\listtag0} call is done internally, and the next playback call will start at the first frame.}{\cf2\f0\fs24\lang1033{\*\listtag0}\par}
\pard\plain\ltrpar\ql\sl240\slmult1\itap0{\cf2\f0\fs24\lang1033{\*\listtag0}\par}
\pard\plain\ltrpar\ql\sl240\slmult1\itap0{\cf2\f0\fs24\lang1033{\*\listtag0}\abinodiroverride\ltrch The flic handle must refer to an open flic file, or your Poco program aborts.}{\cf2\f0\fs24\lang1033{\*\listtag0}\par}
\pard\plain\ltrpar\ql\sl240\slmult1\itap0{\cf2\f0\fs24\lang1033{\*\listtag0}\par}
\pard\plain\ltrpar\ql\sl240\slmult1\itap0{\cf2\f0\fs24\lang1033{\*\listtag0}\abinodiroverride\ltrch Input:}{\cf2\f0\fs24\lang1033{\*\listtag0}\par}
\pard\plain\ltrpar\ql\sl240\slmult1\itap0{\cf2\f0\fs24\lang1033{\*\listtag0}\par}
\pard\plain\ltrpar\ql\sl240\slmult1\itap0{\cf2\f0\fs24\lang1033{\*\listtag0}\abinodiroverride\ltrch The }{\cf2\f0\fs24\b\lang1033{\*\listtag0}theflic}{\cf2\f0\fs24\lang1033{\*\listtag0} parameter is a }{\cf2\f0\fs24\b\lang1033{\*\listtag0}Flic}{\cf2\f0\fs24\lang1033{\*\listtag0} handle returned by a prior call to }{\cf2\f0\fs24\b\lang1033{\*\listtag0}FlicOpen()}{\cf2\f0\fs24\lang1033{\*\listtag0} or }{\cf2\f0\fs24\b\lang1033{\*\listtag0}FlicOpenInfo()}{\cf2\f0\fs24\lang1033{\*\listtag0}.  }{\cf2\f0\fs24\lang1033{\*\listtag0}\par}
\pard\plain\ltrpar\ql\sl240\slmult1\itap0{\cf2\f0\fs24\lang1033{\*\listtag0}\par}
\pard\plain\ltrpar\ql\sl240\slmult1\itap0{\cf2\f0\fs24\lang1033{\*\listtag0}\abinodiroverride\ltrch The }{\cf2\f0\fs24\b\lang1033{\*\listtag0}speed}{\cf2\f0\fs24\lang1033{\*\listtag0} parameter is the new playback speed in milliseconds-per-frame, or -1 to indicate no change to the current playback speed value.}{\cf2\f0\fs24\lang1033{\*\listtag0}\par}
\pard\plain\ltrpar\ql\sl240\slmult1\itap0{\cf2\f0\fs24\lang1033{\*\listtag0}\par}
\pard\plain\ltrpar\ql\sl240\slmult1\itap0{\cf2\f0\fs24\lang1033{\*\listtag0}\abinodiroverride\ltrch The }{\cf2\f0\fs24\b\lang1033{\*\listtag0}keyhit_stops_playback}{\cf2\f0\fs24\lang1033{\*\listtag0} parameter is }{\cf2\f0\fs24\b\lang1033{\*\listtag0}TRUE}{\cf2\f0\fs24\lang1033{\*\listtag0}, }{\cf2\f0\fs24\b\lang1033{\*\listtag0}FALSE}{\cf2\f0\fs24\lang1033{\*\listtag0}, or -1 to indicate no change to the current value of the option.  }{\cf2\f0\fs24\lang1033{\*\listtag0}\par}
\pard\plain\ltrpar\ql\sl240\slmult1\itap0{\cf2\f0\fs24\lang1033{\*\listtag0}\abinodiroverride\ltrch The }{\cf2\f0\fs24\b\lang1033{\*\listtag0}playback_raster}{\cf2\f0\fs24\lang1033{\*\listtag0} parameter is a }{\cf2\f0\fs24\b\lang1033{\*\listtag0}Screen}{\cf2\f0\fs24\lang1033{\*\listtag0} handle, or }{\cf2\f0\fs24\b\lang1033{\*\listtag0}NULL}{\cf2\f0\fs24\lang1033{\*\listtag0} to indicate no change to the current playback screen value.}{\cf2\f0\fs24\lang1033{\*\listtag0}\par}
\pard\plain\ltrpar\ql\sl240\slmult1\itap0{\cf2\f0\fs24\lang1033{\*\listtag0}\par}
\pard\plain\ltrpar\ql\sl240\slmult1\itap0{\cf2\f0\fs24\lang1033{\*\listtag0}\abinodiroverride\ltrch The }{\cf2\f0\fs24\b\lang1033{\*\listtag0}xoffset}{\cf2\f0\fs24\lang1033{\*\listtag0} and }{\cf2\f0\fs24\b\lang1033{\*\listtag0}yoffset}{\cf2\f0\fs24\lang1033{\*\listtag0} parameters are the new x/y coordinates for playback, or 0,0 to indicate no change to the current values.}{\cf2\f0\fs24\lang1033{\*\listtag0}\par}
\pard\plain\ltrpar\ql\sl240\slmult1\itap0{\cf2\f0\fs24\lang1033{\*\listtag0}\par}
\pard\plain\ltrpar\ql\sl240\slmult1\itap0{\cf2\f0\fs24\b\lang1033{\*\listtag0}\par}
\pard\plain\ltrpar\ql\sl240\slmult1\itap0{\cf2\f0\fs24\b\lang1033{\*\listtag0}\abinodiroverride\ltrch void FlicPlay(Flic *theflic)}{\cf2\f0\fs24\b\lang1033{\*\listtag0}\par}
\pard\plain\ltrpar\ql\sl240\slmult1\itap0{\cf2\f0\fs24\lang1033{\*\listtag0}\par}
\pard\plain\ltrpar\ql\sl240\slmult1\itap0{\cf2\f0\fs24\lang1033{\*\listtag0}\abinodiroverride\ltrch This function plays a flic continuously, until the user hits a key or mouse button.  The playback loops from the last frame back to the first as needed.  When called multiple times on the same flic, each call resumes playback starting with the frame following the one displayed by the prior call.}{\cf2\f0\fs24\lang1033{\*\listtag0}\par}
\pard\plain\ltrpar\ql\sl240\slmult1\itap0{\cf2\f0\fs24\lang1033{\*\listtag0}\par}
\pard\plain\ltrpar\ql\sl240\slmult1\itap0{\cf2\f0\fs24\lang1033{\*\listtag0}\abinodiroverride\ltrch The flic handle must refer to an open flic file, or your Poco program aborts.}{\cf2\f0\fs24\lang1033{\*\listtag0}\par}
\pard\plain\ltrpar\ql\sl240\slmult1\itap0{\cf2\f0\fs24\lang1033{\*\listtag0}\par}
\pard\plain\ltrpar\ql\sl240\slmult1\itap0{\cf2\f0\fs24\lang1033{\*\listtag0}\abinodiroverride\ltrch Input:}{\cf2\f0\fs24\lang1033{\*\listtag0}\par}
\pard\plain\ltrpar\ql\sl240\slmult1\itap0{\cf2\f0\fs24\lang1033{\*\listtag0}\par}
\pard\plain\ltrpar\ql\sl240\slmult1\itap0{\cf2\f0\fs24\lang1033{\*\listtag0}\abinodiroverride\ltrch A flic handle returned by a prior call to }{\cf2\f0\fs24\b\lang1033{\*\listtag0}FlicOpen()}{\cf2\f0\fs24\lang1033{\*\listtag0} or }{\cf2\f0\fs24\b\lang1033{\*\listtag0}FlicOpenInfo()}{\cf2\f0\fs24\lang1033{\*\listtag0}.}{\cf2\f0\fs24\lang1033{\*\listtag0}\par}
\pard\plain\ltrpar\ql\sl240\slmult1\itap0{\cf2\f0\fs24\lang1033{\*\listtag0}\par}
\pard\plain\ltrpar\ql\sl240\slmult1\itap0{\cf2\f0\fs24\lang1033{\*\listtag0}\abinodiroverride\ltrch \page }{\cf2\f0\fs24\lang1033{\*\listtag0}\par}
\pard\plain\ltrpar\ql\sl240\slmult1\itap0{\cf2\f0\fs24\b\lang1033{\*\listtag0}\par}
\pard\plain\ltrpar\ql\sl240\slmult1\itap0{\cf2\f0\fs24\b\lang1033{\*\listtag0}\abinodiroverride\ltrch void FlicPlayOnce(Flic *theflic)}{\cf2\f0\fs24\b\lang1033{\*\listtag0}\par}
\pard\plain\ltrpar\ql\sl240\slmult1\itap0{\cf2\f0\fs24\lang1033{\*\listtag0}\par}
\pard\plain\ltrpar\ql\sl240\slmult1\itap0{\cf2\f0\fs24\lang1033{\*\listtag0}\abinodiroverride\ltrch This function plays a flic once then stops.  When called multiple times on the same flic, each call resumes playback starting with the frame following the one displayed by the prior call.  (Normally, this will be the first frame, unless the prior playback was aborted with a keyhit.)}{\cf2\f0\fs24\lang1033{\*\listtag0}\par}
\pard\plain\ltrpar\ql\sl240\slmult1\itap0{\cf2\f0\fs24\lang1033{\*\listtag0}\par}
\pard\plain\ltrpar\ql\sl240\slmult1\itap0{\cf2\f0\fs24\lang1033{\*\listtag0}\abinodiroverride\ltrch If you have used the }{\cf2\f0\fs24\b\lang1033{\*\listtag0}FlicOptions()}{\cf2\f0\fs24\lang1033{\*\listtag0} function to set }{\cf2\f0\fs24\b\lang1033{\*\listtag0}keyhit_stops_playback}{\cf2\f0\fs24\lang1033{\*\listtag0} to }{\cf2\f0\fs24\b\lang1033{\*\listtag0}TRUE}{\cf2\f0\fs24\lang1033{\*\listtag0}, the user can abort the playback with a mouse button or keystroke, otherwise the playback is non-abortable.}{\cf2\f0\fs24\lang1033{\*\listtag0}\par}
\pard\plain\ltrpar\ql\sl240\slmult1\itap0{\cf2\f0\fs24\lang1033{\*\listtag0}\par}
\pard\plain\ltrpar\ql\sl240\slmult1\itap0{\cf2\f0\fs24\lang1033{\*\listtag0}\abinodiroverride\ltrch The flic handle must refer to an open flic file, or your Poco program aborts.}{\cf2\f0\fs24\lang1033{\*\listtag0}\par}
\pard\plain\ltrpar\ql\sl240\slmult1\itap0{\cf2\f0\fs24\lang1033{\*\listtag0}\par}
\pard\plain\ltrpar\ql\sl240\slmult1\itap0{\cf2\f0\fs24\lang1033{\*\listtag0}\abinodiroverride\ltrch Input:}{\cf2\f0\fs24\lang1033{\*\listtag0}\par}
\pard\plain\ltrpar\ql\sl240\slmult1\itap0{\cf2\f0\fs24\lang1033{\*\listtag0}\par}
\pard\plain\ltrpar\ql\sl240\slmult1\itap0{\cf2\f0\fs24\lang1033{\*\listtag0}\abinodiroverride\ltrch A flic handle returned by a prior call to }{\cf2\f0\fs24\b\lang1033{\*\listtag0}FlicOpen()}{\cf2\f0\fs24\lang1033{\*\listtag0} or }{\cf2\f0\fs24\b\lang1033{\*\listtag0}FlicOpenInfo()}{\cf2\f0\fs24\lang1033{\*\listtag0}.}{\cf2\f0\fs24\lang1033{\*\listtag0}\par}
\pard\plain\ltrpar\ql\sl240\slmult1\itap0{\cf2\f0\fs24\lang1033{\*\listtag0}\par}
\pard\plain\ltrpar\ql\sl240\slmult1\itap0{\cf2\f0\fs24\b\lang1033{\*\listtag0}\par}
\pard\plain\ltrpar\ql\sl240\slmult1\itap0{\cf2\f0\fs24\b\lang1033{\*\listtag0}\abinodiroverride\ltrch void FlicPlayTimed(Flic *theflic, int milliseconds)}{\cf2\f0\fs24\b\lang1033{\*\listtag0}\par}
\pard\plain\ltrpar\ql\sl240\slmult1\itap0{\cf2\f0\fs24\lang1033{\*\listtag0}\par}
\pard\plain\ltrpar\ql\sl240\slmult1\itap0{\cf2\f0\fs24\lang1033{\*\listtag0}\abinodiroverride\ltrch This function plays a flic for the specified number of milliseconds.  The playback loops from the last frame back to the first as needed.  When called multiple times on the same flic, each call resumes playback starting with the frame following the one displayed by the prior call.}{\cf2\f0\fs24\lang1033{\*\listtag0}\par}
\pard\plain\ltrpar\ql\sl240\slmult1\itap0{\cf2\f0\fs24\lang1033{\*\listtag0}\par}
\pard\plain\ltrpar\ql\sl240\slmult1\itap0{\cf2\f0\fs24\lang1033{\*\listtag0}\abinodiroverride\ltrch If you have used the }{\cf2\f0\fs24\b\lang1033{\*\listtag0}FlicOptions()}{\cf2\f0\fs24\lang1033{\*\listtag0} function to set }{\cf2\f0\fs24\b\lang1033{\*\listtag0}keyhit_stops_playback}{\cf2\f0\fs24\lang1033{\*\listtag0} to }{\cf2\f0\fs24\b\lang1033{\*\listtag0}TRUE}{\cf2\f0\fs24\lang1033{\*\listtag0}, the user can abort the playback with a mouse button or keystroke, otherwise the playback is non-abortable.}{\cf2\f0\fs24\lang1033{\*\listtag0}\par}
\pard\plain\ltrpar\ql\sl240\slmult1\itap0{\cf2\f0\fs24\lang1033{\*\listtag0}\par}
\pard\plain\ltrpar\ql\sl240\slmult1\itap0{\cf2\f0\fs24\lang1033{\*\listtag0}\abinodiroverride\ltrch The flic handle must refer to an open flic file, or your Poco program aborts.}{\cf2\f0\fs24\lang1033{\*\listtag0}\par}
\pard\plain\ltrpar\ql\sl240\slmult1\itap0{\cf2\f0\fs24\lang1033{\*\listtag0}\par}
\pard\plain\ltrpar\ql\sl240\slmult1\itap0{\cf2\f0\fs24\lang1033{\*\listtag0}\abinodiroverride\ltrch Input:}{\cf2\f0\fs24\lang1033{\*\listtag0}\par}
\pard\plain\ltrpar\ql\sl240\slmult1\itap0{\cf2\f0\fs24\lang1033{\*\listtag0}\par}
\pard\plain\ltrpar\ql\sl240\slmult1\itap0{\cf2\f0\fs24\lang1033{\*\listtag0}\abinodiroverride\ltrch A flic handle returned by a prior call to }{\cf2\f0\fs24\b\lang1033{\*\listtag0}FlicOpen()}{\cf2\f0\fs24\lang1033{\*\listtag0} or }{\cf2\f0\fs24\b\lang1033{\*\listtag0}FlicOpenInfo()}{\cf2\f0\fs24\lang1033{\*\listtag0}.}{\cf2\f0\fs24\lang1033{\*\listtag0}\par}
\pard\plain\ltrpar\ql\sl240\slmult1\itap0{\cf2\f0\fs24\lang1033{\*\listtag0}\par}
\pard\plain\ltrpar\ql\sl240\slmult1\itap0{\cf2\f0\fs24\b\lang1033{\*\listtag0}\par}
\pard\plain\ltrpar\ql\sl240\slmult1\itap0{\cf2\f0\fs24\b\lang1033{\*\listtag0}\abinodiroverride\ltrch void FlicPlayCount(Flic *theflic, int frame_count)}{\cf2\f0\fs24\b\lang1033{\*\listtag0}\par}
\pard\plain\ltrpar\ql\sl240\slmult1\itap0{\cf2\f0\fs24\lang1033{\*\listtag0}\par}
\pard\plain\ltrpar\ql\sl240\slmult1\itap0{\cf2\f0\fs24\lang1033{\*\listtag0}\abinodiroverride\ltrch This function plays the specified number of frames from the flic file.  The playback loops from the last frame back to the first as needed.  When called multiple times on the same flic, each call resumes playback starting}{\cf2\f0\fs24\lang1033{\*\listtag0}\par}
\pard\plain\ltrpar\ql\sl240\slmult1\itap0{\cf2\f0\fs24\lang1033{\*\listtag0}\abinodiroverride\ltrch \page  with the frame following the one displayed by the prior call.}{\cf2\f0\fs24\lang1033{\*\listtag0}\par}
\pard\plain\ltrpar\ql\sl240\slmult1\itap0{\cf2\f0\fs24\lang1033{\*\listtag0}\par}
\pard\plain\ltrpar\ql\sl240\slmult1\itap0{\cf2\f0\fs24\lang1033{\*\listtag0}\abinodiroverride\ltrch If the }{\cf2\f0\fs24\b\lang1033{\*\listtag0}frame_count}{\cf2\f0\fs24\lang1033{\*\listtag0} is 0, this function returns immediately, without rendering anything to the screen.  }{\cf2\f0\fs24\lang1033{\*\listtag0}\par}
\pard\plain\ltrpar\ql\sl240\slmult1\itap0{\cf2\f0\fs24\lang1033{\*\listtag0}\par}
\pard\plain\ltrpar\ql\sl240\slmult1\itap0{\cf2\f0\fs24\lang1033{\*\listtag0}\abinodiroverride\ltrch If the }{\cf2\f0\fs24\b\lang1033{\*\listtag0}frame_count}{\cf2\f0\fs24\lang1033{\*\listtag0} is negative, the flic is rewound to the first frame before the playback is started, then the absolute value of }{\cf2\f0\fs24\b\lang1033{\*\listtag0}frame_count}{\cf2\f0\fs24\lang1033{\*\listtag0} is used as the number of frames to play.}{\cf2\f0\fs24\lang1033{\*\listtag0}\par}
\pard\plain\ltrpar\ql\sl240\slmult1\itap0{\cf2\f0\fs24\lang1033{\*\listtag0}\par}
\pard\plain\ltrpar\ql\sl240\slmult1\itap0{\cf2\f0\fs24\lang1033{\*\listtag0}\abinodiroverride\ltrch If the }{\cf2\f0\fs24\b\lang1033{\*\listtag0}frame_count}{\cf2\f0\fs24\lang1033{\*\listtag0} is greater than 1, the proper delay is inserted between frames, but }{\cf2\f0\fs24\i\lang1033{\*\listtag0}not}{\cf2\f0\fs24\lang1033{\*\listtag0} after the last frame in the sequence is rendered.  If the }{\cf2\f0\fs24\b\lang1033{\*\listtag0}frame_count}{\cf2\f0\fs24\lang1033{\*\listtag0} parameter is 1, this function returns immediately after rendering the frame to the screen.}{\cf2\f0\fs24\lang1033{\*\listtag0}\par}
\pard\plain\ltrpar\ql\sl240\slmult1\itap0{\cf2\f0\fs24\lang1033{\*\listtag0}\par}
\pard\plain\ltrpar\ql\sl240\slmult1\itap0{\cf2\f0\fs24\lang1033{\*\listtag0}\abinodiroverride\ltrch If you have used the }{\cf2\f0\fs24\b\lang1033{\*\listtag0}FlicOptions()}{\cf2\f0\fs24\lang1033{\*\listtag0} function to set }{\cf2\f0\fs24\b\lang1033{\*\listtag0}keyhit_stops_playback}{\cf2\f0\fs24\lang1033{\*\listtag0} to }{\cf2\f0\fs24\b\lang1033{\*\listtag0}TRUE}{\cf2\f0\fs24\lang1033{\*\listtag0}, the user can abort the playback with a mouse button or keystroke, otherwise the playback is non-abortable.}{\cf2\f0\fs24\lang1033{\*\listtag0}\par}
\pard\plain\ltrpar\ql\sl240\slmult1\itap0{\cf2\f0\fs24\lang1033{\*\listtag0}\par}
\pard\plain\ltrpar\ql\sl240\slmult1\itap0{\cf2\f0\fs24\lang1033{\*\listtag0}\abinodiroverride\ltrch The flic handle must refer to an open flic file, or your Poco program aborts.}{\cf2\f0\fs24\lang1033{\*\listtag0}\par}
\pard\plain\ltrpar\ql\sl240\slmult1\itap0{\cf2\f0\fs24\lang1033{\*\listtag0}\par}
\pard\plain\ltrpar\ql\sl240\slmult1\itap0{\cf2\f0\fs24\lang1033{\*\listtag0}\abinodiroverride\ltrch Input:}{\cf2\f0\fs24\lang1033{\*\listtag0}\par}
\pard\plain\ltrpar\ql\sl240\slmult1\itap0{\cf2\f0\fs24\lang1033{\*\listtag0}\par}
\pard\plain\ltrpar\ql\sl240\slmult1\itap0{\cf2\f0\fs24\lang1033{\*\listtag0}\abinodiroverride\ltrch A flic handle returned by a prior call to }{\cf2\f0\fs24\b\lang1033{\*\listtag0}FlicOpen()}{\cf2\f0\fs24\lang1033{\*\listtag0} or }{\cf2\f0\fs24\b\lang1033{\*\listtag0}FlicOpenInfo()}{\cf2\f0\fs24\lang1033{\*\listtag0}.}{\cf2\f0\fs24\lang1033{\*\listtag0}\par}
\pard\plain\ltrpar\ql\sl240\slmult1\itap0{\f0\fs24\lang1033{\*\listtag0}\par}}