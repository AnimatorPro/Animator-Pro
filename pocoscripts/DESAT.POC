/*------------------------------ DESAT.POC ------------------------------------

        This is a POCO program to reduce or increase the color saturation
    and/or the brightness level of all the frames in the current 'flic'.

    George P. Nelson
        Naval Research Laboratory
        Washington, DC 20375

    E-mail
        Internet: nelson@radar.nrl.navy.mil
        Compuserve: 73447,2105

    Version 1.0
    2/13/92
-----------------------------------------------------------------------------*/

//                ----- Program Function Definitions -----
void    adjust_palette ( int lumen_chg, int sat_chg);
void    display_about_scrn ( void);
int     get_lumen_chng ( int chng);
int     get_sat_chng ( int chng);
void    get_chng_setup ( void);
void    perform_changes ( int lumen_chg, int sat_chg);
double  max_3pts ( double val1, double val2, double val3);
double  min_3pts ( double val1, double val2, double val3);
double  normal_255_to_1   ( int    value);
double  normal_255_to_360 ( int    value);
int     normal_1_to_255   ( double value);
int     normal_360_to_255 ( double value);
void    rgb_hls ( double r,  double g,  double b,
                  double *h, double *l, double *s);
void    hls_rgb ( double h,  double l,  double s,
                  double *r, double *g, double *b);
double  hlsval  ( double n1, double n2, double hue);


//                  ----- Program Global Variables -----
int     lumen_adjust_type = 0;
Screen  *Draw_Scrn;
int     old_pal[256][3];
char    *first_menu[] = {
            " Luminace adjust",
            " Saturation adjust",
            " Set Adjustment type",
            " About Program Info.",
            " Execute changes",
            " Cancel"};

/*=============================================================================
                    Program Execution - Function: main()

=============================================================================*/

main()
{
    int     path;
    int     done = 0;
    int     lumen_chng = 0;
    int     sat_chng = 0;

    // Display the first menu
    do {
        path = Qmenu ( first_menu, 6, "Change Intensity & Saturation");
        switch (path) {
            case 1:                     // Obtain the flic's intensity change
                lumen_chng = get_lumen_chng( lumen_chng);
                break;
            case 2:                     // Obtain the flic's saturation change
                sat_chng = get_sat_chng( sat_chng);
                break;
            case 3:                     // Obtain the adjusment types
                get_chng_setup();
                break;
            case 4:                     // Display the "About" screen
                display_about_scrn();
                break;
            case 5:                     // Execute the changes to the flic
                perform_changes ( lumen_chng, sat_chng);
                done = 1;
                break;
            default:                    // Terminate the program
                done = 1;
                break;
        }
    } while (done == 0);

    return;
}    // This is the end of function: main()

/*=============================================================================
            Obtain the Intensity (Brightness) change Information

    Arguments:
        int    chng = The current setting of the intensity change variable

    Returns: The function returns the new intensity change data. Note that
             the value of the input argument is returned unchanged if the
             user cancels the input.
=============================================================================*/
int     get_lumen_chng ( int chng)
{
    if (Qnumber ( &chng, -50, 50, "   % Intensity Level change"))
        memcpy ( first_menu[0], "*", 1);
    if (chng == 0)
        memcpy ( first_menu[0], " ", 1);
    return chng;
}    // End of function: get_lumen_chng()


/*=============================================================================
               Obtain the Color Saturation change Information

    Arguments:
        int     chng = The current setting of the saturation change variable

    Returns: The function returns the new saturation change data. Note that
             the value of the input argument is returned unchanged if the
             user cancels the input.
=============================================================================*/
int     get_sat_chng ( int chng)
{
    if (Qnumber( &chng, -50, 50, "  % Saturation Level change"))
        memcpy ( first_menu[1], "*", 1);
    if (chng == 0)
        memcpy ( first_menu[1], " ", 1);
    return chng;
}    // End of function: get_sat_chng()


/*=============================================================================
                     Setup the type of intensity adjustment  

    Arguments: None.

    Returns: None, the function is type void. However, the values of program
             global variable lumen_adjust_type maybe changed by this function.
=============================================================================*/
void    get_chng_setup ( void)
{
    char    *menu[] = {
                " % Intensity from min.",
                " % Intensity from max.",
                " Fixed Intensity amount",
                "Return/Cancel"};
    int     done = 0;
    int     path;

    // Initial setup for this menu
    memcpy ( menu[lumen_adjust_type], "*", 1);

    // Display the menu
    do {
        path = Qmenu ( menu, 4, "Intensity Adjust Type");
        switch (path) {
            case 1:
            case 2:
            case 3:
                memcpy ( menu[lumen_adjust_type], " ", 1);
                lumen_adjust_type = path - 1;
                done = 1;
                break;
            default:
                done = 1;
                break;
        }
    } while ( done == 0);

    return;
}       // End of function: get_chng_setup()


/*=============================================================================
                 Execute the changes to the Brightness and
                    Saturation level of the current flic

    Arguments:
        int     lumen_chg = The desired change in intensity or brightness
                            level to be applied to the entire flic.
        int     sat_chg   = The desired change in color saturation level
                            that is to be applied to the entire flic.

    Returns: None, but the function does change the current flic as desired
=============================================================================*/
void    perform_changes ( int lumen_chg, int sat_chg)
{
    Boolean time_select;
    int     frame_count, idx; 
    char    *msg = "    About to change this flic's "
                   "intensity and saturation levels. "
                   "This will destroy all current "
                   "color palette(s) and the contents "
                   "of the Swap buffer.\r\n"
                   "              Proceed ??";

    // First, make sure the user wants to proceed with the changes
    if (!Qquestion ( msg))
        return;

    // Save some current Animator status information, then change as needed
    time_select = GetTimeSelect(); 
    SetTimeSelect ( FALSE); 

    // Get other information required to make the changes
    Draw_Scrn   = GetPicScreen();
    frame_count = GetFrameCount();

    // Loop around all the frames in the flic
    for ( idx = 0; idx < frame_count; idx++) {
        SetFrame ( idx);
        GetScreenColorMap ( Draw_Scrn, &old_pal[0][0]);
        adjust_palette ( lumen_chg, sat_chg);
        SetScreenColorMap ( Draw_Scrn, &old_pal[0][0]);

        /* The following two statements were necessary to have the adjusted
           palette "take", i.e. be remembered in the final flic. I don't
           really understand why this was so, but it was necessary for the
           program to work. */
        SwapClip();
        SwapTrade();
    }

    // Restore the changed Animator status information
    SetTimeSelect ( time_select); 
    return;
}    // End of function: perform_changes()

/*-----------------------------------------------------------------------------
                  Function to adjust the entire palette by
                           the requested amounts

    Arguments:
        int     lumen_chg = The amount that the intensity or brightness of the
                            screen is to change.
        int     sat_chg   = The amount that the color saturation level is to
                            change.

    Returns: None, but the global variable old_pal[][] is changed as requested.
-----------------------------------------------------------------------------*/
void    adjust_palette ( int lumen_chg, int sat_chg)
{
    int     idx;
    double  chng_lumen, chng_sat;
    double  red, grn, blu, h, l, s;

    // Loop around the palette registers
    for ( idx = 0; idx < 256; idx++) {

        // Normalize the RGB values to real numbers between 0-1
        red = normal_255_to_1 (old_pal[idx][0]);
        grn = normal_255_to_1 (old_pal[idx][1]);
        blu = normal_255_to_1 (old_pal[idx][2]);

        // Convert to real HLS values
        rgb_hls ( red, grn, blu, &h, &l, &s);

        // Make the change to the intensity level
        switch (lumen_adjust_type) {
            case 0:                     // % Intensity from min.
                chng_lumen = 1.0 + (lumen_chg * 0.01);
                l *= chng_lumen;
                break;
            case 1:                     // % Intensity from max.
                chng_lumen = (lumen_chg * 0.01);
                chng_lumen *= fabs (1.0 - l);
                l += chng_lumen;
                break;
            case 2:                     // Fixed amount
                chng_lumen = 1.0 * (lumen_chg * 0.01);
                l += chng_lumen;
                break;
        }
        if ( l > 1.0)
            l = 1.0;
        if ( l < 0.0)
            l = 0.0;

        // Make the change to saturation
        s *= ( 1.0 + (sat_chg * 0.01));
        if ( s > 1.0)
            s = 1.0;

        // Convert the new HLS numbers back to normalized RGB values
        hls_rgb ( h, l, s, &red, &grn, &blu);

        // Convert normalized reals back to integers, 0-255
        old_pal[idx][0] = normal_1_to_255 ( red);
        old_pal[idx][1] = normal_1_to_255 ( grn);
        old_pal[idx][2] = normal_1_to_255 ( blu);
    }
    return;
}    // End of function: adjust_palette()

/*  RGB_HLS  --  Map R, G, B intensities in the range from 0 to 1 into
               Hue, Lightness, and Saturation: Hue from  0  to  360,
               Lightness  from  0  to 1, and Saturation from 0 to 1.
                 Special case: if Saturation is 0 (it's a  grey  scale
               tone), Hue is undefined and is returned as -1.

               This follows Foley & van Dam, section 17.4.5.
         Note: Basic routine obtained from Autodesk, Grant Blaha, 2/11/92 */

void    rgb_hls( double r,  double g,  double b,
                 double *h, double *l, double *s)
{
    double imax, imin;
    double rc, gc, bc;

    // Find the maximums & minimums of the 3 colors
    imax = max_3pts ( r, g, b);
    imin = min_3pts ( r, g, b);

    *l = (imax + imin) / 2;

    if (imax == imin) {
      *s = 0;
      *h = -1;
    } else {
      if (*l <= 0.5)
          *s = (imax - imin) / (imax + imin);
      else
          *s = (imax - imin) /
               (2.0 - imax - imin);

      rc = (imax - r) / (imax - imin);
      gc = (imax - g) / (imax - imin);
      bc = (imax - b) / (imax - imin);
      if (r == imax)
          *h = bc - gc;
      else if (g == imax)
          *h = 2.0 + rc - bc;
      else
          *h = 4.0 + gc - rc;
      *h *= 60.0;
      if (*h < 0)
          *h += 360.0;
    }
}

/*  HLS_RGB  --  Convert HLS colour specification to RGB  intensities.
               Hue  is  specified  as  a  real  value from 0 to 360;
               Lightness and Saturation as reals from 0 to  1.   The
               RGB components are returned as reals from 0 to 1. */

void    hls_rgb ( double h,  double l,  double s,
                  double *r, double *g, double *b)
{
    double  min, max;

    // Compute the min and max values
    if ( l <= 0.5) {
        max = l * ( s + 1.0);
        min = l * ( 1.0 - s);
    }
    else {
        min = l + ( l * s) - s;
        max = ( 2.0 * l) - min; 
    }
    *r = hlsval ( min, max, h + 120.0);
    *g = hlsval ( min, max, h);
    *b = hlsval ( min, max, h - 120.0);
    return;
}       // End of function hls_rgb()

/*      This function computes the intensity of a single color based on
    the Hue value as well as the Minimum value that any color can have plus
    the Maximum value any color can be assigned. Note that the 'Minimum'
    input argument to is identified as n1 in the program below. The 'Maximum'
    value is passed as program input argument n2.

    Note: Basic hlsval() routine was obtained from Autodesk,
          Grant Blaha, 2/11/92 */

double  hlsval ( double n1, double n2, double hue)
{
    if (hue > 360.0)
      hue -= 360.0;
    else if (hue < 0.0)
      hue += 360.0;
    if (hue < 60.0) {
      return n1 + ((n2 - n1) * hue) / 60.0;

    } else if (hue < 180.0) {
      return n2;
    } else if (hue < 240.0) {
      return n1 + ((n2 - n1) * (240.0 - hue)) / 60.0;
    } else {
      return n1;
    }
}

//              ---- Find the maximum of three numbers ----

double  max_3pts ( double val1, double val2, double val3)
{
    double  max_val;

    max_val = val1;
    if ( val2 > max_val)
        max_val = val2;
    if ( val3 > max_val)
        max_val = val3;
    return max_val;
}       // End of function: max_3pts()

//              ---- Find the minimum of three numbers ----

double  min_3pts ( double val1, double val2, double val3)
{
    double  min_val;

    min_val = val1;
    if ( val2 < min_val)
        min_val = val2;
    if ( val3 < min_val)
        min_val = val3;
    return min_val;
}       // End of function: min_3pts()


//          ----- Normalize a 0-255 integer to a 0-1 real -----

double normal_255_to_1 ( int value)
{
    double  real_value;

    real_value = (double)value / 255.0;
    if (real_value > 1.0)
        real_value = 1.0;
    if (real_value < 0.0)
        real_value = 0.0;
    return real_value;
}       // End of function: normal_255_to_1()


//          ----- Normalize a 0-255 integer to a 0-360 real -----

double  normal_255_to_360 ( int value)
{
    double  real_value;

    real_value = ( (double)value / 255.0) * 360.0;
    if (real_value > 360.0)
        real_value -= 360.0;
    if (real_value < 360.0)
        real_value += 360.0;
    return real_value;
}       // End of function: normal_255_to_360()


//          ----- Normalize a 0-1 real to a 0-255 integer -----

int     normal_1_to_255 ( double value)
{
    int     int_value;

    int_value = (int)( (value * 255.0) + 0.49999);
    if (int_value < 0)
        int_value = 0;
    if (int_value > 255)
        int_value = 255;
    return int_value;
}       // End of function: normal_1_to_255()


//         ----- Normalize a 0-360 real to a 0-255 integer -----

int     normal_360_to_255 ( double value)
{
    int     int_value;

    if ( value > 360.0)
        value -= 360.0;
    if ( value < 0.0)
        value += 360.0;
    int_value = (int)(((value / 360.0) * 255.0) + 0.49999);
    if (int_value < 0)
        int_value += 255;
    if (int_value > 255)
        int_value -= 255;
    return int_value;
}       // End of function: normal_360_to_255()


/*=============================================================================
                    Display the program's "About" Screen

=============================================================================*/
void    display_about_scrn ( void)
{
    char *msg = "      DESAT.POC           Ver. 1.0\r\n"
                "Change the Luminance and/or Saturation\r"
                "levels of the entire FLIC.\r\n"
                "  George P. Nelson\r"
                "    Naval Research Laboratory\r"
                "    Washington, DC 20375\r\n"
                "  E-mail:\r"
                "    Internet: nelson@nrl.radar.navy.mil \r"
                "    Compuserve: 73447,2105";

    Qtext ( msg);
    return;
}    // End of function: display_about_screen


