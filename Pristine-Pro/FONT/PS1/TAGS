isomap SHIPSHAP.C 11 static char *isomap[224] = {
psmap SHIPSHAP.C 240 static char *psmap[224] = {
usermap SHIPSHAP.C 467 char *usermap[224];		      /* User-defined mapping vector *
charmap SHIPSHAP.C 469 char **charmap = isomap;	      /* Active mapping vector *
CodeLimit SHIPSHAP.C 471 #define CodeLimit   2048	      /* Maximum bytes of shape code per char *
code SHIPSHAP.C 473 static int code[CodeLimit];	      /* Compiled shape code *
codep SHIPSHAP.C 474 static int codep = 0;		      /* Code pointer *
thepen SHIPSHAP.C 475 static enum {Up = 2, Down = 1} thepen;/* Pen state indicator *
Emit SHIPSHAP.C 477 #define Emit(x) /*printf("Emit(%d)\n", x);* if (codep >= CodeLimit) { fprintf(stderr, "\nShape code overflow!\n"); abort(); } else code[codep++] = (x)
pen SHIPSHAP.C 478 #define pen(x) if (thepen != (x)) { Emit(x); thepen = (x); }
StackLimit SHIPSHAP.C 480 #define StackLimit  25		      /* Maximum data stack depth *
OtherLimit SHIPSHAP.C 481 #define OtherLimit  10		      /* Maximum othersubr return values *
Sl SHIPSHAP.C 483 #define Sl(n) if (sp < (n)) {fprintf(stderr, "\nStack underflow.\n"); return;}
Npop SHIPSHAP.C 484 #define Npop(n) sp -= (n)
So SHIPSHAP.C 485 #define So(n) if ((sp + (n)) > StackLimit) {fprintf(stderr, "\nStack overflow.\n"); return;}
Clear SHIPSHAP.C 486 #define Clear() sp = 0
Dpath SHIPSHAP.C 487 #define Dpath() psx = curx; psy = cury; pathopen = TRUE
S0 SHIPSHAP.C 489 #define S0  stack[sp - 1]
S1 SHIPSHAP.C 490 #define S1  stack[sp - 2]
S2 SHIPSHAP.C 491 #define S2  stack[sp - 3]
S3 SHIPSHAP.C 492 #define S3  stack[sp - 4]
S4 SHIPSHAP.C 493 #define S4  stack[sp - 5]
S5 SHIPSHAP.C 494 #define S5  stack[sp - 6]
stack SHIPSHAP.C 496 static long stack[StackLimit];	      /* Data stack *
sp SHIPSHAP.C 497 static int sp;			      /* Stack pointer *
osres SHIPSHAP.C 498 static long osres[OtherLimit];	      /* Results from othersubrs *
orp SHIPSHAP.C 499 static int orp; 		      /* Othersubr result pointer *
ReturnStackLimit SHIPSHAP.C 501 #define ReturnStackLimit 10
rstack SHIPSHAP.C 503 static unsigned char *rstack[ReturnStackLimit]; /* Return stack *
rsp SHIPSHAP.C 504 static int rsp; 		      /* Return stack pointer *
curx SHIPSHAP.C 506 static int curx = 0, cury = 0;	      /* The current point *
cury SHIPSHAP.C 506 static int curx = 0, cury = 0;	      /* The current point *
psx SHIPSHAP.C 507 static int psx = 0, psy = 0;	      /* Path start co-ordinates *
psy SHIPSHAP.C 507 static int psx = 0, psy = 0;	      /* Path start co-ordinates *
pathopen SHIPSHAP.C 508 static int pathopen;		      /* Path open ? *
flexing SHIPSHAP.C 509 static int flexing = FALSE;	      /* If a Flex in progress ? *
flexx SHIPSHAP.C 510 static int flexx, flexy;	      /* Flex current position *
flexy SHIPSHAP.C 510 static int flexx, flexy;	      /* Flex current position *
goTo SHIPSHAP.C 518 static void goTo(x, y)
bezier SHIPSHAP.C 608 static void bezier(long x0, long y0, long x1, long y1, long x2, long y2, long x3, long y3, int n)
TRACE READFONT.C 9 #define TRACE
cs READFONT.C 11 static unsigned char cs[4];
csp READFONT.C 12 static unsigned char *csp;
csl READFONT.C 13 static int csl;
filemode READFONT.C 14 static enum {Unknown, Binary, Hex} filemode = Unknown, forcemode = Unknown;
forcemode READFONT.C 14 static enum {Unknown, Binary, Hex} filemode = Unknown, forcemode = Unknown;
tracing READFONT.C 16 static int tracing = FALSE;	      /* Echo decrypted input *
shapedoc READFONT.C 18 int shapedoc = FALSE;		      /* PostScript as comments in shape file *
bnum READFONT.C 20 int bnum = 5;			      /* Line segments per Bezier curve *
skewsin READFONT.C 21 double skewsin = 0.0;		      /* Sine of ItalicAngle for obliquing *
noflex READFONT.C 22 int noflex = FALSE;		      /* Suppress Flex if true *
ncdefs READFONT.C 24 int ncdefs;			      /* Number of character definitions *
chardefs READFONT.C 25 unsigned char *chardefs[NCdefs][2];   /* Character definitions *
chardl READFONT.C 26 int chardl[NCdefs];		      /* Character definition lengths *
nsubrs READFONT.C 28 int nsubrs = 0; 		      /* Number of subroutines *
subrs READFONT.C 29 unsigned char **subrs = NULL;	      /* Subroutine pointer table *
subrl READFONT.C 30 int *subrl;			      /* Subroutine lengths *
fullname READFONT.C 32 char fullname[256];		      /* Font name *
section READFONT.C 34 file_section section;
csnames READFONT.C 36 char *csnames[] = {
ncsnames READFONT.C 107 int ncsnames = ELEMENTS(csnames);
inbyte READFONT.C 112 static int inbyte(FILE *fp)
inline READFONT.C 148 static int inline( FILE *fp, char *line)
cryptR READFONT.C 177 static unsigned short int cryptR, cryptC1, cryptC2, cryptCSR;
cryptC1 READFONT.C 177 static unsigned short int cryptR, cryptC1, cryptC2, cryptCSR;
cryptC2 READFONT.C 177 static unsigned short int cryptR, cryptC1, cryptC2, cryptCSR;
cryptCSR READFONT.C 177 static unsigned short int cryptR, cryptC1, cryptC2, cryptCSR;
cryptinit READFONT.C 179 static void cryptinit( unsigned int key)
decrypt READFONT.C 186 static unsigned int decrypt(unsigned int cipher)
cstrinit READFONT.C 195 static void cstrinit(void)
decstr READFONT.C 200 static unsigned int decstr(unsigned int cipher)
process_definition READFONT.C 212 static void process_definition(char *t)
rtype1 READFONT.C 242 int rtype1(FILE *fp)
fetchcs READFONT.C 528 #define fetchcs()  (l--, decstr(decrypt(inbyte(fp))))
dcstring READFONT.C 530 static int dcstring( FILE *fp, int l)
loadvector READFONT.C 571 static int loadvector(char *f)
PR READFONT.C 632 #define PR(x) fprintf(stderr, x)
usage READFONT.C 634 static void usage(void)
main READFONT.C 655 int main( int argc, char *argv[])
alloc READFONT.C 819 void *alloc(unsigned nbytes)
strsave READFONT.C 832 char *strsave( char *s)
StackLimit INTERP.C 11 #define StackLimit  25
Sl INTERP.C 13 #define Sl(n) if (sp < (n)) {fflush(stdout); fprintf(stderr, "\nStack underflow.\n"); return;}
Npop INTERP.C 14 #define Npop(n) sp -= (n)
So INTERP.C 15 #define So(n) if ((sp + (n)) > StackLimit) {fflush(stdout); fprintf(stderr, "\nStack overflow.\n"); return;}
Clear INTERP.C 16 #define Clear() sp = 0
Opath INTERP.C 17 #define Opath() if (!pathopen) { psx = curx; psy = cury; pathopen = TRUE; }
Dpath INTERP.C 18 #define Dpath() pathopen = FALSE; Opath()
S0 INTERP.C 20 #define S0  stack[sp - 1]
S1 INTERP.C 21 #define S1  stack[sp - 2]
S2 INTERP.C 22 #define S2  stack[sp - 3]
S3 INTERP.C 23 #define S3  stack[sp - 4]
S4 INTERP.C 24 #define S4  stack[sp - 5]
S5 INTERP.C 25 #define S5  stack[sp - 6]
stack INTERP.C 27 static long stack[StackLimit];	      /* Data stack *
sp INTERP.C 28 static int sp;			      /* Stack pointer *
ReturnStackLimit INTERP.C 30 #define ReturnStackLimit 10
rstack INTERP.C 32 static unsigned char *rstack[ReturnStackLimit]; /* Return stack *
rsp INTERP.C 33 static int rsp; 		      /* Return stack pointer *
curx INTERP.C 35 static int curx = 0, cury = 0;	      /* The current point *
cury INTERP.C 35 static int curx = 0, cury = 0;	      /* The current point *
psx INTERP.C 36 static int psx = 0, psy = 0;	      /* Path start co-ordinates *
psy INTERP.C 36 static int psx = 0, psy = 0;	      /* Path start co-ordinates *
sidebear INTERP.C 37 static int sidebear[2], charwid[2];   /* Character sidebearing and width *
charwid INTERP.C 37 static int sidebear[2], charwid[2];   /* Character sidebearing and width *
pathopen INTERP.C 38 static int pathopen;		      /* Path open ? *
dumpchars INTERP.C 42 void dumpchars(cp, l)
bezier INTERP.C 99 static void bezier(x0, y0, x1, y1, x2, y2, x3, y3, n)
exchars INTERP.C 130 void exchars(cp)
TRUE TYPE1.H 8 #define TRUE    1
FALSE TYPE1.H 9 #define FALSE   0
M_PI TYPE1.H 13 #define M_PI        3.14159265358979323846
EOS TYPE1.H 16 #define EOS     '\0'
point TYPE1.H 18 typedef double point[2];
X TYPE1.H 20 #define X   0
Y TYPE1.H 21 #define Y   1
cscommand TYPE1.H 25 enum cscommand {
file_section TYPE1.H 99 typedef enum { Header, FontInfo, OtherSubrs, Subrs, CharStrings } file_section;
ELEMENTS TYPE1.H 102 #define ELEMENTS(array) (sizeof(array)/sizeof((array)[0]))
abs TYPE1.H 105 #define abs(x)   ((x) < 0    ? -(x) : (x))
max TYPE1.H 108 #define max(a,b) ((a) >  (b) ?  (a) : (b))
min TYPE1.H 111 #define min(a,b) ((a) <= (b) ?  (a) : (b))
NCdefs TYPE1.H 114 #define NCdefs  300                   /* Number of Charstring definitions *
