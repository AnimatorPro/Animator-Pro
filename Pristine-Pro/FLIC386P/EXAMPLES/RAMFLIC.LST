
Module: ramflic.c
Group: 'CGROUP' _TEXT
Group: 'DGROUP' _DATA,_BSS,CONST

Segment: '_TEXT' DWORD USE32  000004d0 bytes  
 0000  55                gentle_free     push    ebp
 0001  89 e5                             mov     ebp,esp
 0003  8b 45 08                          mov     eax,+8H[ebp]
 0006  23 c0                             and     eax,eax
 0008  74 09                             je      L1
 000a  50                                push    eax
 000b  e8 00 00 00 00                    call    free
 0010  83 c4 04                          add     esp,00000004H
 0013  c9                L1              leave   
 0014  c3                                ret     
 0015  90                                nop     
 0016  90                                nop     
 0017  90                                nop     
 0018  55                read_alloc_buf  push    ebp
 0019  89 e5                             mov     ebp,esp
 001b  83 ec 04                          sub     esp,00000004H
 001e  57                                push    edi
 001f  56                                push    esi
 0020  53                                push    ebx
 0021  c7 45 fc 00 00 00 
       00                                mov     dword ptr -4H[ebp],00000000H
 0028  2b f6                             sub     esi,esi
 002a  2b db                             sub     ebx,ebx
 002c  68 00 80 00 00                    push    00008000H
 0031  ff 75 08                          push    +8H[ebp]
 0034  e8 00 00 00 00                    call    open
 0039  97                                xchg    eax,edi
 003a  83 c4 08                          add     esp,00000008H
 003d  83 ff ff                          cmp     edi,0ffffffffH
 0040  75 26                             jne     L3
 0042  ff 35 00 00 00 00                 push    errno
 0048  e8 00 00 00 00                    call    strerror
 004d  83 c4 04                          add     esp,00000004H
 0050  50                                push    eax
 0051  ff 75 08                          push    +8H[ebp]
 0054  68 88 01 00 00                    push    offset L42
 0059  6a e7                             push    0ffffffe7H
 005b  e8 80 01 00 00    L2              call    report_error
 0060  89 45 fc                          mov     -4H[ebp],eax
 0063  83 c4 10                          add     esp,00000010H
 0066  eb 64                             jmp     L5
 0068  6a 02             L3              push    00000002H
 006a  6a 00                             push    00000000H
 006c  57                                push    edi
 006d  e8 00 00 00 00                    call    lseek
 0072  96                                xchg    eax,esi
 0073  6a 00                             push    00000000H
 0075  6a 00                             push    00000000H
 0077  57                                push    edi
 0078  e8 00 00 00 00                    call    lseek
 007d  8d 46 01                          lea     eax,+1H[esi]
 0080  50                                push    eax
 0081  e8 00 00 00 00                    call    malloc
 0086  93                                xchg    eax,ebx
 0087  83 c4 1c                          add     esp,0000001cH
 008a  23 db                             and     ebx,ebx
 008c  75 0e                             jne     L4
 008e  ff 75 08                          push    +8H[ebp]
 0091  56                                push    esi
 0092  68 a4 01 00 00                    push    offset L43
 0097  6a fe                             push    0fffffffeH
 0099  eb c0                             jmp     L2
 009b  90                                nop     
 009c  c6 04 33 00       L4              mov     byte ptr [ebx+esi],00H
 00a0  56                                push    esi
 00a1  53                                push    ebx
 00a2  57                                push    edi
 00a3  e8 00 00 00 00                    call    read
 00a8  83 c4 0c                          add     esp,0000000cH
 00ab  3b c6                             cmp     eax,esi
 00ad  74 1d                             je      L5
 00af  ff 35 00 00 00 00                 push    errno
 00b5  e8 00 00 00 00                    call    strerror
 00ba  83 c4 04                          add     esp,00000004H
 00bd  50                                push    eax
 00be  ff 75 08                          push    +8H[ebp]
 00c1  68 d0 01 00 00                    push    offset L44
 00c6  6a e7                             push    0ffffffe7H
 00c8  eb 91                             jmp     L2
 00ca  90                                nop     
 00cb  90                                nop     
 00cc  83 7d fc 00       L5              cmp     dword ptr -4H[ebp],00000000H
 00d0  7d 0d                             jge     L6
 00d2  53                                push    ebx
 00d3  e8 28 ff ff ff                    call    gentle_free
 00d8  2b db                             sub     ebx,ebx
 00da  2b f6                             sub     esi,esi
 00dc  83 c4 04                          add     esp,00000004H
 00df  83 ff ff          L6              cmp     edi,0ffffffffH
 00e2  74 09                             je      L7
 00e4  57                                push    edi
 00e5  e8 00 00 00 00                    call    close
 00ea  83 c4 04                          add     esp,00000004H
 00ed  8b 45 0c          L7              mov     eax,+0cH[ebp]
 00f0  89 18                             mov     [eax],ebx
 00f2  8b 45 10                          mov     eax,+10H[ebp]
 00f5  89 30                             mov     [eax],esi
 00f7  8b 45 fc                          mov     eax,-4H[ebp]
 00fa  5b                                pop     ebx
 00fb  5e                                pop     esi
 00fc  5f                                pop     edi
 00fd  c9                                leave   
 00fe  c3                                ret     
 00ff  90                                nop     
 0100  55                L8              push    ebp
 0101  89 e5                             mov     ebp,esp
 0103  57                                push    edi
 0104  56                                push    esi
 0105  8b 7d 08                          mov     edi,+8H[ebp]
 0108  8b 75 0c                          mov     esi,+0cH[ebp]
 010b  68 00 00 00 00                    push    offset the_raster
 0110  56                                push    esi
 0111  57                                push    edi
 0112  e8 00 00 00 00                    call    pj_video_find_open
 0117  83 c4 0c                          add     esp,0000000cH
 011a  23 c0                             and     eax,eax
 011c  7d 12                             jge     L9
 011e  56                                push    esi
 011f  57                                push    edi
 0120  68 ec 01 00 00                    push    offset L46
 0125  50                                push    eax
 0126  e8 b5 00 00 00                    call    report_error
 012b  83 c4 10                          add     esp,00000010H
 012e  eb 41                             jmp     L11
 0130  c7 05 e8 01 00 00 
       01 00 00 00       L9              mov     dword ptr L45,00000001H
 013a  8b 15 00 00 00 00                 mov     edx,the_raster
 0140  0f b7 4a 10                       movzx   ecx,word ptr +10H[edx]
 0144  3b f9                             cmp     edi,ecx
 0146  75 08                             jne     L10
 0148  0f b7 4a 12                       movzx   ecx,word ptr +12H[edx]
 014c  3b f1                             cmp     esi,ecx
 014e  74 21                             je      L11
 0150  8b 15 00 00 00 00 L10             mov     edx,the_raster
 0156  0f b7 4a 12                       movzx   ecx,word ptr +12H[edx]
 015a  51                                push    ecx
 015b  0f b7 4a 10                       movzx   ecx,word ptr +10H[edx]
 015f  51                                push    ecx
 0160  56                                push    esi
 0161  57                                push    edi
 0162  68 1c 02 00 00                    push    offset L47
 0167  6a e7                             push    0ffffffe7H
 0169  e8 72 00 00 00                    call    report_error
 016e  83 c4 18                          add     esp,00000018H
 0171  5e                L11             pop     esi
 0172  5f                                pop     edi
 0173  c9                                leave   
 0174  c2 08 00                          ret     0008H
 0177  90                                nop     
 0178  83 3d e8 01 00 00 
       00                L12             cmp     dword ptr L45,00000000H
 017f  74 17                             je      L13
 0181  68 00 00 00 00                    push    offset the_raster
 0186  e8 00 00 00 00                    call    pj_video_close
 018b  c7 05 e8 01 00 00 
       00 00 00 00                       mov     dword ptr L45,00000000H
 0195  83 c4 04                          add     esp,00000004H
 0198  c3                L13             ret     
 0199  90                                nop     
 019a  90                                nop     
 019b  90                                nop     
 019c  83 3d 64 02 00 00 
       00                L14             cmp     dword ptr L48,00000000H
 01a3  75 0f                             jne     L15
 01a5  e8 00 00 00 00                    call    pj_clock_init
 01aa  c7 05 64 02 00 00 
       01 00 00 00                       mov     dword ptr L48,00000001H
 01b4  c3                L15             ret     
 01b5  90                                nop     
 01b6  90                                nop     
 01b7  90                                nop     
 01b8  83 3d 64 02 00 00 
       00                L16             cmp     dword ptr L48,00000000H
 01bf  74 0f                             je      L17
 01c1  e8 00 00 00 00                    call    pj_clock_cleanup
 01c6  c7 05 64 02 00 00 
       00 00 00 00                       mov     dword ptr L48,00000000H
 01d0  c3                L17             ret     
 01d1  90                                nop     
 01d2  90                                nop     
 01d3  90                                nop     
 01d4  e8 df ff ff ff    cleanup_all     call    L16
 01d9  e8 9a ff ff ff                    call    L12
 01de  c3                                ret     
 01df  90                                nop     
 01e0  55                report_error    push    ebp
 01e1  89 e5                             mov     ebp,esp
 01e3  56                                push    esi
 01e4  8b 45 08                          mov     eax,+8H[ebp]
 01e7  23 c0                             and     eax,eax
 01e9  7d 65                             jge     L20
 01eb  83 f8 f9                          cmp     eax,0fffffff9H
 01ee  74 60                             je      L20
 01f0  83 f8 f4                          cmp     eax,0fffffff4H
 01f3  74 5b                             je      L20
 01f5  e8 da ff ff ff                    call    cleanup_all
 01fa  8d 4d 10                          lea     ecx,+10H[ebp]
 01fd  8b 45 0c                          mov     eax,+0cH[ebp]
 0200  23 c0                             and     eax,eax
 0202  74 1c                             je      L18
 0204  51                                push    ecx
 0205  50                                push    eax
 0206  8d 35 28 00 00 00                 lea     esi,_iob+28H
 020c  56                                push    esi
 020d  e8 00 00 00 00                    call    vfprintf
 0212  68 00 00 00 00                    push    offset L51
 0217  56                                push    esi
 0218  e8 00 00 00 00                    call    fprintf
 021d  83 c4 14                          add     esp,00000014H
 0220  8b 45 08          L18             mov     eax,+8H[ebp]
 0223  83 f8 e7                          cmp     eax,0ffffffe7H
 0226  74 1d                             je      L19
 0228  50                                push    eax
 0229  50                                push    eax
 022a  e8 00 00 00 00                    call    pj_error_get_message
 022f  83 c4 04                          add     esp,00000004H
 0232  50                                push    eax
 0233  68 04 00 00 00                    push    offset L52
 0238  68 28 00 00 00                    push    offset _iob+28H
 023d  e8 00 00 00 00                    call    fprintf
 0242  83 c4 10                          add     esp,00000010H
 0245  ff 75 08          L19             push    +8H[ebp]
 0248  e8 00 00 00 00                    call    exit
 024d  83 c4 04                          add     esp,00000004H
 0250  8b 45 08          L20             mov     eax,+8H[ebp]
 0253  5e                                pop     esi
 0254  c9                                leave   
 0255  c3                                ret     
 0256  90                                nop     
 0257  90                                nop     
 0258  8b 4c 24 04       init_ram_flic   mov     ecx,+4H[esp]
 025c  2b c0                             sub     eax,eax
 025e  89 01                             mov     [ecx],eax
 0260  89 41 08                          mov     +8H[ecx],eax
 0263  89 41 04                          mov     +4H[ecx],eax
 0266  89 41 10                          mov     +10H[ecx],eax
 0269  89 41 0c                          mov     +0cH[ecx],eax
 026c  89 41 14                          mov     +14H[ecx],eax
 026f  c3                                ret     
 0270  55                cleanup_ram_flic push    ebp
 0271  89 e5                             mov     ebp,esp
 0273  56                                push    esi
 0274  8b 75 08                          mov     esi,+8H[ebp]
 0277  ff 76 08                          push    +8H[esi]
 027a  e8 81 fd ff ff                    call    gentle_free
 027f  ff 76 04                          push    +4H[esi]
 0282  e8 79 fd ff ff                    call    gentle_free
 0287  56                                push    esi
 0288  e8 cb ff ff ff                    call    init_ram_flic
 028d  83 c4 0c                          add     esp,0000000cH
 0290  5e                                pop     esi
 0291  c9                                leave   
 0292  c3                                ret     
 0293  90                                nop     
 0294  55                open_ram_flic   push    ebp
 0295  89 e5                             mov     ebp,esp
 0297  83 ec 04                          sub     esp,00000004H
 029a  57                                push    edi
 029b  56                                push    esi
 029c  53                                push    ebx
 029d  8b 5d 08                          mov     ebx,+8H[ebp]
 02a0  53                                push    ebx
 02a1  8b 7d 0c                          mov     edi,+0cH[ebp]
 02a4  e8 af ff ff ff                    call    init_ram_flic
 02a9  57                                push    edi
 02aa  e8 00 00 00 00                    call    strdup
 02af  89 43 04                          mov     +4H[ebx],eax
 02b2  83 c4 08                          add     esp,00000008H
 02b5  23 c0                             and     eax,eax
 02b7  75 17                             jne     L22
 02b9  57                                push    edi
 02ba  68 68 02 00 00                    push    offset L49
 02bf  6a fe                             push    0fffffffeH
 02c1  e8 1a ff ff ff    L21             call    report_error
 02c6  96                                xchg    eax,esi
 02c7  83 c4 0c                          add     esp,0000000cH
 02ca  e9 92 00 00 00                    jmp     L26
 02cf  90                                nop     
 02d0  8d 45 fc          L22             lea     eax,-4H[ebp]
 02d3  50                                push    eax
 02d4  8d 43 08                          lea     eax,+8H[ebx]
 02d7  50                                push    eax
 02d8  57                                push    edi
 02d9  e8 3a fd ff ff                    call    read_alloc_buf
 02de  96                                xchg    eax,esi
 02df  83 c4 0c                          add     esp,0000000cH
 02e2  23 f6                             and     esi,esi
 02e4  7c 7b                             jl      L26
 02e6  8b 4b 08                          mov     ecx,+8H[ebx]
 02e9  89 0b                             mov     [ebx],ecx
 02eb  66 8b 41 04                       mov     ax,+4H[ecx]
 02ef  66 3d 11 af                       cmp     ax,0af11H
 02f3  74 13                             je      L23
 02f5  66 3d 12 af                       cmp     ax,0af12H
 02f9  74 0d                             je      L23
 02fb  57                                push    edi
 02fc  68 6c 02 00 00                    push    offset L50
 0301  6a e7                             push    0ffffffe7H
 0303  eb bc                             jmp     L21
 0305  90                                nop     
 0306  90                                nop     
 0307  90                                nop     
 0308  66 81 79 04 11 af L23             cmp     word ptr +4H[ecx],0af11H
 030e  75 38                             jne     L24
 0310  c7 43 0c 80 00 00 
       00                                mov     dword ptr +0cH[ebx],00000080H
 0317  8b 81 84 00 00 00                 mov     eax,+84H[ecx]
 031d  05 80 00 00 00                    add     eax,00000080H
 0322  89 43 10                          mov     +10H[ebx],eax
 0325  0f bf 51 10                       movsx   edx,word ptr +10H[ecx]
 0329  89 d0                             mov     eax,edx
 032b  c1 e0 05                          shl     eax,05H
 032e  2b c2                             sub     eax,edx
 0330  8d 04 82                          lea     eax,[edx+eax*4]
 0333  8d 04 c5 23 00 00 
       00                                lea     eax,+23H[eax*8]
 033a  bf 46 00 00 00                    mov     edi,00000046H
 033f  99                                cdq     
 0340  f7 ff                             idiv    edi
 0342  89 41 10                          mov     +10H[ecx],eax
 0345  eb 0d                             jmp     L25
 0347  90                                nop     
 0348  8b 41 54          L24             mov     eax,+54H[ecx]
 034b  89 43 0c                          mov     +0cH[ebx],eax
 034e  8b 41 58                          mov     eax,+58H[ecx]
 0351  89 43 10                          mov     +10H[ebx],eax
 0354  c7 43 18 00 00 00 
       00                L25             mov     dword ptr +18H[ebx],00000000H
 035b  8b 43 0c                          mov     eax,+0cH[ebx]
 035e  89 43 14                          mov     +14H[ebx],eax
 0361  23 f6             L26             and     esi,esi
 0363  7d 09                             jge     L27
 0365  53                                push    ebx
 0366  e8 05 ff ff ff                    call    cleanup_ram_flic
 036b  83 c4 04                          add     esp,00000004H
 036e  96                L27             xchg    eax,esi
 036f  5b                                pop     ebx
 0370  5e                                pop     esi
 0371  5f                                pop     edi
 0372  c9                                leave   
 0373  c3                                ret     
 0374  8b 4c 24 04       ram_flic_get_cur_frame mov     ecx,+4H[esp]
 0378  8b 41 08                          mov     eax,+8H[ecx]
 037b  03 41 14                          add     eax,+14H[ecx]
 037e  c3                                ret     
 037f  90                                nop     
void ram_flic_advance_cur_frame(Ram_flic *rf)
/*****************************************************************************
 * Move on to the next frame of a ram_flic.  If going past the end,
 * loop back to the first frame.
 ****************************************************************************/
{
	Fli_head *flihdr;
	Fli_frame *flif;
	int frame_count;
	int cur_ix;

	if ((flihdr = rf->head) == NULL)
		return;
	frame_count = flihdr->frame_count;
	cur_ix = rf->cur_frame_ix + 1;
	if (cur_ix == frame_count)		/* We want the ring frame to take us back */
		{
		cur_ix = 0;
		}
	if (frame_count == 1 				/* Special case 1 frame flic. */
	|| cur_ix == 1)	
		{
		rf->cur_frame_oset = rf->frame2_oset;
		}
	else
		{
		flif = ram_flic_get_cur_frame(rf);
		rf->cur_frame_oset += flif->size;
		}
	rf->cur_frame_ix = cur_ix;
}
 0380  55                ram_flic_advance_cur_frame push    ebp
 0381  89 e5                             mov     ebp,esp
 0383  56                                push    esi
	if ((flihdr = rf->head) == NULL)
		return;
 0384  8b 75 08                          mov     esi,+8H[ebp]
 0387  8b 06                             mov     eax,[esi]
 0389  23 c0                             and     eax,eax
 038b  74 37                             je      L32
	frame_count = flihdr->frame_count;
 038d  0f b7 40 06                       movzx   eax,word ptr +6H[eax]
	cur_ix = rf->cur_frame_ix + 1;
 0391  8b 56 18                          mov     edx,+18H[esi]
 0394  42                                inc     edx
	if (cur_ix == frame_count)		/* We want the ring frame to take us back */
 0395  3b d0                             cmp     edx,eax
 0397  75 02                             jne     L28
		cur_ix = 0;
 0399  2b d2                             sub     edx,edx
 039b  83 f8 01          L28             cmp     eax,00000001H
	if (frame_count == 1 				/* Special case 1 frame flic. */
 039e  74 05                             je      L29
	|| cur_ix == 1)	
 03a0  83 fa 01                          cmp     edx,00000001H
 03a3  75 0b                             jne     L30
		rf->cur_frame_oset = rf->frame2_oset;
 03a5  8b 46 10          L29             mov     eax,+10H[esi]
 03a8  89 46 14                          mov     +14H[esi],eax
 03ab  eb 14                             jmp     L31
 03ad  90                                nop     
 03ae  90                                nop     
 03af  90                                nop     
	else
		flif = ram_flic_get_cur_frame(rf);
 03b0  56                L30             push    esi
 03b1  e8 be ff ff ff                    call    ram_flic_get_cur_frame
		rf->cur_frame_oset += flif->size;
 03b6  8b 4e 14                          mov     ecx,+14H[esi]
 03b9  03 08                             add     ecx,[eax]
 03bb  89 4e 14                          mov     +14H[esi],ecx
 03be  83 c4 04                          add     esp,00000004H
 03c1  89 56 18          L31             mov     +18H[esi],edx
 03c4  5e                L32             pop     esi
 03c5  c9                                leave   
 03c6  c3                                ret     
 03c7  90                                nop     
 03c8  55                play_ram_flic   push    ebp
 03c9  89 e5                             mov     ebp,esp
 03cb  57                                push    edi
 03cc  56                                push    esi
 03cd  53                                push    ebx
 03ce  8b 5d 08                          mov     ebx,+8H[ebp]
 03d1  8b 7d 0c                          mov     edi,+0cH[ebp]
 03d4  23 ff                             and     edi,edi
 03d6  7d 05                             jge     L33
 03d8  8b 03                             mov     eax,[ebx]
 03da  8b 78 10                          mov     edi,+10H[eax]
 03dd  e8 00 00 00 00    L33             call    pj_clock_1000
 03e2  8d 34 38                          lea     esi,[eax+edi]
 03e5  53                                push    ebx
 03e6  e8 89 ff ff ff                    call    ram_flic_get_cur_frame
 03eb  6a 01                             push    00000001H
 03ed  50                                push    eax
 03ee  ff 75 10                          push    +10H[ebp]
 03f1  e8 00 00 00 00                    call    pj_fli_uncomp_frame
 03f6  83 c4 10                          add     esp,00000010H
 03f9  e8 00 00 00 00    L34             call    pj_key_is
 03fe  23 c0                             and     eax,eax
 0400  74 0a                             je      L35
 0402  e8 00 00 00 00                    call    pj_key_in
 0407  5b                                pop     ebx
 0408  5e                                pop     esi
 0409  5f                                pop     edi
 040a  c9                                leave   
 040b  c3                                ret     
 040c  e8 00 00 00 00    L35             call    pj_clock_1000
 0411  3b f0                             cmp     esi,eax
 0413  73 e4                             jae     L34
 0415  eb c6                             jmp     L33
 0417  90                                nop     
 0418  55                main            push    ebp
 0419  89 e5                             mov     ebp,esp
 041b  83 ec 20                          sub     esp,00000020H
 041e  57                                push    edi
 041f  56                                push    esi
 0420  53                                push    ebx
 0421  8b 55 08                          mov     edx,+8H[ebp]
 0424  8b 5d 0c                          mov     ebx,+0cH[ebp]
 0427  2b ff                             sub     edi,edi
 0429  8d 75 e0                          lea     esi,-20H[ebp]
 042c  56                                push    esi
 042d  e8 26 fe ff ff                    call    init_ram_flic
 0432  83 c4 04                          add     esp,00000004H
 0435  83 fa 02                          cmp     edx,00000002H
 0438  7c 05                             jl      L36
 043a  83 fa 03                          cmp     edx,00000003H
 043d  7e 11                             jle     L37
 043f  68 00 00 00 00    L36             push    offset L41
 0444  e8 00 00 00 00                    call    puts
 0449  83 c4 04                          add     esp,00000004H
 044c  eb 68                             jmp     L40
 044e  90                                nop     
 044f  90                                nop     
 0450  83 fa 03          L37             cmp     edx,00000003H
 0453  75 13                             jne     L38
 0455  ff 73 08                          push    +8H[ebx]
 0458  e8 00 00 00 00                    call    atol
 045d  89 45 fc                          mov     -4H[ebp],eax
 0460  83 c4 04                          add     esp,00000004H
 0463  eb 0a                             jmp     L39
 0465  90                                nop     
 0466  90                                nop     
 0467  90                                nop     
 0468  c7 45 fc ff ff ff 
       ff                L38             mov     dword ptr -4H[ebp],0ffffffffH
 046f  ff 73 04          L39             push    +4H[ebx]
 0472  8d 75 e0                          lea     esi,-20H[ebp]
 0475  56                                push    esi
 0476  e8 19 fe ff ff                    call    open_ram_flic
 047b  97                                xchg    eax,edi
 047c  83 c4 08                          add     esp,00000008H
 047f  23 ff                             and     edi,edi
 0481  7c 33                             jl      L40
 0483  e8 00 00 00 00                    call    pj_video_add_all
 0488  8b 45 e0                          mov     eax,-20H[ebp]
 048b  0f b7 48 0a                       movzx   ecx,word ptr +0aH[eax]
 048f  51                                push    ecx
 0490  0f b7 40 08                       movzx   eax,word ptr +8H[eax]
 0494  50                                push    eax
 0495  e8 66 fc ff ff                    call    L8
 049a  97                                xchg    eax,edi
 049b  23 ff                             and     edi,edi
 049d  7c 17                             jl      L40
 049f  e8 f8 fc ff ff                    call    L14
 04a4  ff 35 00 00 00 00                 push    the_raster
 04aa  ff 75 fc                          push    -4H[ebp]
 04ad  56                                push    esi
 04ae  e8 15 ff ff ff                    call    play_ram_flic
 04b3  83 c4 0c                          add     esp,0000000cH
 04b6  8d 75 e0          L40             lea     esi,-20H[ebp]
 04b9  56                                push    esi
 04ba  e8 b1 fd ff ff                    call    cleanup_ram_flic
 04bf  e8 10 fd ff ff                    call    cleanup_all
 04c4  97                                xchg    eax,edi
 04c5  83 c4 04                          add     esp,00000004H
 04c8  5b                                pop     ebx
 04c9  5e                                pop     esi
 04ca  5f                                pop     edi
 04cb  c9                                leave   
 04cc  c3                                ret     
 04cd  90                                nop     
 04ce  90                                nop     
 04cf  90                                nop     

No disassembly errors

------------------------------------------------------------

Segment: '_DATA' DWORD USE32  0000028a bytes  
 0000  0a 52 61 6d 66 6c 69 63 L41             - .Ramflic
 0008  20 2d 20 61 20 70 72 6f                 -  - a pro
 0010  67 72 61 6d 20 74 68 61                 - gram tha
 0018  74 20 6c 6f 61 64 20 61                 - t load a
 0020  20 66 6c 69 63 20 61 6e                 -  flic an
 0028  64 20 74 68 65 6e 20 70                 - d then p
 0030  6c 61 79 73 20 69 74 20                 - lays it 
 0038  62 61 63 6b 20 6f 75 74                 - back out
 0040  20 6f 66 20 52 41 4d 0a                 -  of RAM.
 0048  75 6e 74 69 6c 20 61 20                 - until a 
 0050  6b 65 79 20 69 73 20 68                 - key is h
 0058  69 74 2e 0a 55 73 61 67                 - it..Usag
 0060  65 3a 0a 20 20 20 20 72                 - e:.    r
 0068  61 6d 66 6c 69 63 20 20                 - amflic  
 0070  73 6f 6d 65 66 69 6c 65                 - somefile
 0078  2e 66 6c 63 20 5b 73 70                 - .flc [sp
 0080  65 65 64 5d 0a 45 78 61                 - eed].Exa
 0088  6d 70 6c 65 73 3a 0a 20                 - mples:. 
 0090  20 20 20 72 61 6d 66 6c                 -    ramfl
 0098  69 63 20 63 6c 72 67 6c                 - ic clrgl
 00a0  6f 62 65 2e 66 6c 69 0a                 - obe.fli.
 00a8  54 68 69 73 20 77 69 6c                 - This wil
 00b0  6c 20 70 6c 61 79 20 74                 - l play t
 00b8  68 65 20 61 6e 69 6d 61                 - he anima
 00c0  74 69 6f 6e 20 63 6c 72                 - tion clr
 00c8  67 6c 6f 62 65 2e 66 6c                 - globe.fl
 00d0  69 20 61 74 20 6e 6f 72                 - i at nor
 00d8  6d 61 6c 20 73 70 65 65                 - mal spee
 00e0  64 2e 0a 20 20 20 20 72                 - d..    r
 00e8  61 6d 66 6c 69 63 20 6d                 - amflic m
 00f0  72 6e 75 6d 6f 2e 66 6c                 - rnumo.fl
 00f8  63 20 31 30 0a 54 68 69                 - c 10.Thi
 0100  73 20 77 69 6c 6c 20 70                 - s will p
 0108  6c 61 79 20 6d 72 6e 75                 - lay mrnu
 0110  6d 6f 2e 66 6c 63 20 77                 - mo.flc w
 0118  69 74 68 20 31 30 20 6d                 - ith 10 m
 0120  69 6c 6c 69 73 65 63 6f                 - illiseco
 0128  6e 64 73 20 62 65 74 77                 - nds betw
 0130  65 65 6e 20 65 61 63 68                 - een each
 0138  20 66 72 61 6d 65 2e 0a                 -  frame..
 0140  20 20 20 20 72 61 6d 66                 -     ramf
 0148  6c 69 63 20 71 75 61 72                 - lic quar
 0150  6b 6f 72 62 2e 66 6c 63                 - korb.flc
 0158  20 30 0a 54 68 69 73 20                 -  0.This 
 0160  77 69 6c 6c 20 70 6c 61                 - will pla
 0168  79 20 71 75 61 72 6b 6f                 - y quarko
 0170  72 62 20 61 73 20 66 61                 - rb as fa
 0178  73 74 20 61 73 20 69 74                 - st as it
 0180  20 63 61 6e 2e 0a 00 00                 -  can....
 0188  43 6f 75 6c 64 6e 27 74 L42             - Couldn't
 0190  20 6f 70 65 6e 20 25 73                 -  open %s
 0198  2e 20 25 73 2e 20 53 6f                 - . %s. So
 01a0  72 72 79 00                             - rry.
 01a4  43 6f 75 6c 64 6e 27 74 L43             - Couldn't
 01ac  20 61 6c 6c 6f 63 61 74                 -  allocat
 01b4  65 20 25 6c 64 20 62 79                 - e %ld by
 01bc  74 65 73 20 66 6f 72 20                 - tes for 
 01c4  25 73 20 62 75 66 66 65                 - %s buffe
 01cc  72 00 00 00                             - r...
 01d0  43 6f 75 6c 64 6e 27 74 L44             - Couldn't
 01d8  20 72 65 61 64 20 25 73                 -  read %s
 01e0  2e 20 25 73 2e 00 00 00                 - . %s....
 01e8  00 00 00 00             L45             - ....
 01ec  43 6f 75 6c 64 6e 27 74 L46             - Couldn't
 01f4  20 66 69 6e 64 20 64 69                 -  find di
 01fc  73 70 6c 61 79 20 64 65                 - splay de
 0204  76 69 63 65 20 66 6f 72                 - vice for
 020c  20 25 64 20 78 20 25 64                 -  %d x %d
 0214  20 73 63 72 65 65 6e 00                 -  screen.
 021c  50 72 6f 67 72 61 6d 20 L47             - Program 
 0224  63 6f 75 6c 64 6e 27 74                 - couldn't
 022c  20 6f 70 65 6e 20 61 20                 -  open a 
 0234  25 64 78 25 64 20 73 63                 - %dx%d sc
 023c  72 65 65 6e 0a 54 68 65                 - reen.The
 0244  20 63 6c 6f 73 65 73 74                 -  closest
 024c  20 69 74 20 63 6f 75 6c                 -  it coul
 0254  64 20 63 6f 6d 65 20 69                 - d come i
 025c  73 20 25 64 78 25 64 00                 - s %dx%d.
 0264  00 00 00 00             L48             - ....
 0268  25 73 00 00             L49             - %s..
 026c  25 73 20 69 73 6e 27 74 L50             - %s isn't
 0274  20 61 20 2e 46 4c 49 20                 -  a .FLI 
 027c  6f 72 20 2e 46 4c 43 20                 - or .FLC 
 0284  66 69 6c 65 0a 00                       - file..

No disassembly errors

------------------------------------------------------------

Segment: '_BSS' DWORD USE32  00000004 bytes  

No disassembly errors

------------------------------------------------------------

Segment: 'CONST' DWORD USE32  0000000a bytes  
 0000  2e 0a 00 00             L51             - ....
 0004  25 73 2e 0a 00 00       L52             - %s....

No disassembly errors

------------------------------------------------------------
