Phar Lap Macro Assembler  Version 4.0           Thu Feb 16 21:55:59 1995

                                                              Page    1-1


                                        ;**************************************
                                        ************************************** 
                                        ;* 
                                        ;* RUNCCALL.ASM - Call glue routines fo
                                        r calling C functions from Poco code. 
                                        ;* 
                                        ;*  This routine is the interface betwe
                                        en the Poco runops interpreter and 
                                        ;*  functions written in compiled C (su
                                        ch as builtin library or POE routines.)
                                         
                                        ;*  The routine exists under five names
                                        , each corresponding to the return 
                                        ;*  value type of the C function being 
                                        called.	(This eliminates the need 
                                        ;*  for mega-recasting in the runops co
                                        de.) 
                                        ;* 
                                        ;*  This routine works by the rather si
                                        mple expedient of changing the 386 
                                        ;*  stack pointer to point to the Poco 
                                        run stack, then calling the target C 
                                        ;*  function.  Upon return from the C f
                                        unction, the 386 stack pointer is 
                                        ;*  restored to its entry value, and we
                                         return to runops.  Since we do not 
                                        ;*  disturb any registers other than ES
                                        P/EBP in this glue routine, parameter 
                                        ;*  passing and return values needs no 
                                        special handling.  However, this 
                                        ;*  only with C functions that adhere t
                                        o the Watcom -3s passing conventions; 
                                        ;*  High C and other compilers cannot b
                                        e supported this easily. 
                                        ;* 
                                        ;*  Usage from our caller is: 
                                        ;*     po_Xccall(poco_stack_pointer, ad
                                        dr_of_function_to_call); 
                                        ;* 
                                        ;* MAINTENANCE: 
                                        ;*  05/01/91	(Ian) 
                                        ;*		We now try to molify watcom library
                                         routines which have calls 
                                        ;*		to __STK, the watcom stack overflow
                                         checker.  We can't 
                                        ;*		disable those calls, so instead, we
                                         keep watcom's _STACKLOW 
                                        ;*		variable in sync with the changes w
                                        e do to the hardware 
                                        ;*		stack.	When we load ESP with the ad
                                        dress of the parms on 
                                        ;*		the poco stack, we load _STACKLOW w
                                        ith an address 4kbytes 
                                        ;*		below ESP.  (4k because that's what
Phar Lap Macro Assembler  Version 4.0           Thu Feb 16 21:55:59 1995

                                                              Page    1-2


                                         we guarantee will be 
                                        ;*		available when calling out to a C f
                                        unction.  There may be 
                                        ;*		more stack available, but if they u
                                        se more than 4k, they're 
                                        ;*		breaking the rules anyway.)  This, 
                                        of course, is horribly 
                                        ;*		watcom-specific (although High C li
                                        kely uses something 
                                        ;*		similar), but we were already watco
                                        m-specific in here anyway. 
                                        ;*  09/06/91	(Jim) 
                                        ;*		Added po_string_ccall label. 
                                        ;**************************************
                                        ************************************** 
                                         
00000000                                _DATA	segment public dword use32 'DATA'
                                         
                                        	extrn	_STACKLOW:dword 	; in watcom's c
                                        start.obj 
00000000                                _DATA	ends 
                                         
00000000                                _CODE	segment public dword use32 'CODE'
                                         
                                         
                                        CGROUP	group	_CODE 
                                        DGROUP	group	_DATA 
                                        	assume	cs:CGROUP,ds:DGROUP 
                                         
                                        	public	po_vccall		; return void 
                                        	public	po_iccall		; return int 
                                        	public	po_lccall		; return long 
                                        	public	po_dccall		; return double 
                                        	public	po_pccall		; return Popot 
                                        	public	po_string_ccall		; return PoStr
                                        ing 
                                         
00000000                                po_vccall proc near 
00000000                                po_iccall proc near 
00000000                                po_lccall proc near 
00000000                                po_dccall proc near 
00000000                                po_pccall proc near 
00000000                                po_string_ccall proc near 
                                         
00000000  FF 35 00000000 E              	push	_STACKLOW		; save var watcom uses
                                         for stack check. 
00000006  55                            	push	ebp			; save base pointer 
00000007  8B EC                         	mov	ebp,esp 		; save stack pointer 
                                         
00000009  8B 65 0C                      	mov	esp,dword ptr [ebp+12]	; load poin
                                        ter to poco stack. 
0000000C  8D 84 24 FFFFF000             	lea	eax,[esp-4096]		; point to 'bottom
                                        ' of poco stack. 
00000013  A3 00000000 E                 	mov	_STACKLOW,eax		; set watcom stack 
Phar Lap Macro Assembler  Version 4.0           Thu Feb 16 21:55:59 1995

                                                              Page    1-3


                                        check var. 
                                         
00000018  FF 55 10                      	call	dword ptr [ebp+16]	; call C funct
                                        ion 
                                         
0000001B  8B E5                         	mov	esp,ebp 		; restore stack pointer 
0000001D  5D                            	pop	ebp			; restore base pointer 
0000001E  8F 05 00000000 E              	pop	_STACKLOW		; restore watcom stack 
                                        check var. 
00000024  C3                            	ret				; return 
                                         
                                        po_string_ccall endp 
                                        po_pccall endp 
                                        po_dccall endp 
                                        po_lccall endp 
                                        po_iccall endp 
                                        po_vccall endp 
                                         
00000025                                _CODE	ends 
                                        	end 
Phar Lap Macro Assembler  Version 4.0           Thu Feb 16 21:55:59 1995

                                                              Symbols-1


	GROUPS AND SEGMENTS
Name                                Size      Use    Align Combine   Class

CGROUP . . . . . . . . . . . . .    Group
   _CODE . . . . . . . . . . . .    00000025  USE32  DWORD PUBLIC    CODE
DGROUP . . . . . . . . . . . . .    Group
   _DATA . . . . . . . . . . . .    00000000  USE32  DWORD PUBLIC    DATA

	PROCEDURES
Name                                Type      Offset    Scope   Segment

po_dccall  . . . . . . . . . . .    N PROC    00000000  Public  _CODE
po_iccall  . . . . . . . . . . .    N PROC    00000000  Public  _CODE
po_lccall  . . . . . . . . . . .    N PROC    00000000  Public  _CODE
po_pccall  . . . . . . . . . . .    N PROC    00000000  Public  _CODE
po_string_ccall  . . . . . . . .    N PROC    00000000  Public  _CODE
po_vccall  . . . . . . . . . . .    N PROC    00000000  Public  _CODE

	VARIABLES AND LABELS
Name                                Type      Offset    Scope   Segment

_STACKLOW  . . . . . . . . . . .    DWORD     00000000  Extern  _DATA


      11 Symbols
       0 Warning Errors
       0 Severe Errors
