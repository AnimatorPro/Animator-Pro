/* oldcel.poc - this saves the current frame of the current cel in
 * the Autodesk Animator 1.0 format.
 */

#include "errcodes.h"

/* The format of an old type cel is:
 *		header (32 bytes - see struct pic_header)
 *		color map (3*256 bytes.  RGB values 0-63)
 *      uncompressed image (width * height bytes)
 */
#define PIC_MAGIC 0x9119
struct pic_header
	{
	short type;		/* Always equal to PIC_MAGIC */
	short w,h,x,y;	/* Dimensions of Cel */
	char d;			/* Bits-per-pixel */
	char compress;	/* Zero for uncompressed */
	long csize;		/* Size of data (after color map) */
	char reserved[16];	/* All zero */
	};

#define CMAP_SIZE (256*3)

ErrCode GetOldPackedColorMap(Screen *s, char *map)
/* Get color map for a screen into 3 bytes-a-color form each value
 * from 0-63 */
{
int *big_map;
int i;
int *pt;

if ((big_map = malloc(CMAP_SIZE*sizeof(int))) == NULL)
	return(Err_no_memory);
GetScreenColorMap(s, big_map);
pt = big_map;
i = CMAP_SIZE;
while (--i >= 0)
	*map++ = (*pt++>>2);
free(big_map);
return(Success);
}

ErrCode SaveOpenCel(FILE *f, Screen *cel, int xcen, int ycen)
{
struct pic_header h;
int width,height;
char *pixbuf = NULL;
char *mapbuf = NULL;
ErrCode err;
int i;


GetScreenSize(cel, &width, &height);			// find out dimensions
if (((pixbuf = malloc(width)) == NULL) ||  
	((mapbuf = malloc(CMAP_SIZE)) == NULL))
	{
	err = Err_no_memory;
	goto OUT;
	}
h.type = PIC_MAGIC;					// make up file header
h.w = width;
h.h = height;
h.x = xcen-width/2;						// store upper left corner position
h.y = ycen-height/2;
h.d = 8;							// We're always 8 bits-a-pixel
h.csize = width*height;				// Uncompressed size
if (fwrite(&h, sizeof(h), 1, f) != 1)	// Write out header
	{
	err = Err_no_space;
	goto OUT;
	}
if ((err = GetOldPackedColorMap(cel, mapbuf)) < Success)
	goto OUT;
if (fwrite(mapbuf, 1, CMAP_SIZE, f) != CMAP_SIZE)
	{
	err = Err_no_space;
	goto OUT;
	}
for (i=0; i<height; ++i)
	{
	GetBlock(cel, pixbuf, 0, i, width, 1);
	if (fwrite(pixbuf, 1, width, f) != width)
		{
		err = Err_no_space;
		goto OUT;
		}
	}
err = fflush(f);		/* flush file and return errcode */
OUT:
if (pixbuf != NULL)
	free(pixbuf);
if (mapbuf != NULL)
	free(mapbuf);
return(err);
}

ErrCode SaveOldCel(char *name)
/* Save current frame of cel in old style format.  
 */
{
int xcen, ycen;
double angle;
Screen *cel;
FILE *f;
Errcode err;
int width, height;

cel = GetCelScreen();
GetScreenSize(cel, &width, &height);			// find out dimensions
if (width * height > 64000)		// Too big for old animator 
	{
	char *buttons[] = {"Risk it", "Cancel"};
	if (Qchoice(buttons, 2, 
		"This Cel is too big for the old Animator though it will "
		"work ok with 3-D Studio.  If you load it into the old "
		"Animator you will crash your system.") != 1)
		return(Err_abort);
	}
if ((f = fopen(name, "wb")) == NULL)
	{
	Qtext("Can't create cel file %s", name);
	return(Err_reported);
	}
CelWhere(&xcen, &ycen, &angle);		// find out cel location
printf("Saving %d x %d Cel", width, height);
err = SaveOpenCel(f, cel, xcen, ycen);
fclose(f);
return(Qerror(err, "Trouble saving old style cel %s", name));
}

main()
{
static char cel_name[80];

if (!CelExists())	/* Make sure Cel is there */
	{
	Qtext("No cel to save!");
	}
else
	{
					/* Query user for file name */
	if (Qfile(".CEL", "Save", cel_name, cel_name, TRUE,	
		"Save cel in Animator 1.0 format"))
		SaveOldCel(cel_name);	/* And save it */
	}
}
