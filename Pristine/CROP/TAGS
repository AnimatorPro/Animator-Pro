ADO_SPIN a3d.h /^#define ADO_SPIN 0
ADO_SIZE a3d.h /^#define ADO_SIZE 1
ADO_MOVE a3d.h /^#define ADO_MOVE 2
ADO_PATH a3d.h /^#define ADO_PATH 3
SPIN_CENTER a3d.h /^#define SPIN_CENTER 0
SPIN_AXIS a3d.h /^#define SPIN_AXIS 1
SPIN_TURNS a3d.h /^#define SPIN_TURNS 2
A3D_MAGIC a3d.h /^#define A3D_MAGIC (0x1A3D+2)
OPS_SCREEN a3d.h /^#define OPS_SCREEN 0
OPS_CEL a3d.h /^#define OPS_CEL 1
OPS_POLY a3d.h /^#define OPS_POLY 2
OPS_SPLINE a3d.h /^#define OPS_SPLINE 3
open_amiga amigapic.c /^open_amiga(name)
start_amiga amigapic.c /^start_amiga()
next_amiga amigapic.c /^next_amiga()
count_amiga amigapic.c /^count_amiga()
speed_amiga amigapic.c /^speed_amiga()
close_amiga amigapic.c /^close_amiga()
name anim.c /^char *name;
acb anim.c /^register struct animcb *acb;
if anim.c /^	if(animcb)
start_anim anim.c /^start_anim()
next_anim anim.c /^next_anim()
speed_anim anim.c /^speed_anim()
count_anim anim.c /^count_anim()
close_anim anim.c /^close_anim()
alloc_loadilbm anim.c /^alloc_loadilbm(screen)
ANIM_H anim.h /^#define ANIM_H
parent anim.h /^	struct iff_frame *parent;
id anim.h /^	union bytes4 id;
chunk_size anim.h /^	LONG chunk_size;
chunk_left anim.h /^	LONG chunk_left;
data anim.h /^	void *data;
animcb anim.h /^struct animcb {
animcb anim.h /^EXTERN struct animcb *animcb
bclose bfile.c /^bclose(bf)
bgetbuf bfile.c /^bgetbuf(bf)
bopen bfile.c /^bopen(name, bf)
bcreate bfile.c /^bcreate(name, bf)
bflush bfile.c /^bflush(bf)
bseek bfile.c /^bseek(bf, offset, mode)
bputbyte bfile.c /^bputbyte(bf,c)
bwrite bfile.c /^bwrite(bf, buf, count)
bgetbyte bfile.c /^bgetbyte(bf)
bread bfile.c /^bread(bf, buf, count)
lmasks blit.c /^		lmasks[8] = {0x80, 0xc0, 0
rmasks blit.c /^		rmasks[8] = {0xff, 0x7f, 0
irmasks blit.c /^		irmasks[8] = {	~0x80, ~0xc
ilmasks blit.c /^		ilmasks[8] = {	~0xff, ~0x7
blit_box blit.c /^blit_box(w, h, sx, sy, s, sb
xor_blit_box blit.c /^xor_blit_box(w, h, sx, sy, s
default2_cursor brush.c /^UBYTE default2_cursor[] = {
default_cursor brush.c /^UBYTE default_cursor[] = {
white_cursor brush.c /^PLANEPTR white_cursor = (PLA
black_cursor brush.c /^	black_cursor = (PLANEPTR)de
free_cel cel.c /^free_cel(c)
alloc_cel cel.c /^alloc_cel(w,h,x,y)
see_a_cel cel.c /^see_a_cel(cl)
tile_cel cel.c /^tile_cel(c)
move_cel cel.c /^move_cel(c)
tile_bit_cel cel.c /^tile_bit_cel(c)
flip_cel cel.c /^flip_cel(c)
accept_choice choices.c /^accept_choice(m)
see_choice choices.c /^see_choice(m)
qchoice choices.c /^qchoice(header, choices, cco
qmenu choices.c /^qmenu(header, choices, ccoun
gif_wpt comprs.c /^unsigned char *gif_wpt;
gif_wcount comprs.c /^long gif_wcount;
recover comprs.c /^jmp_buf recover;
gif_compress_data comprs.c /^gif_compress_data(min_code_s
pack_cmap cpack.c /^pack_cmap(source,scount,dest
find_newc cpack.c /^find_newc(freec, cmap,thresh
intype crop.c /^int intype;
pic_cel crop.c /^struct vcel *pic_cel;
is_still crop.c /^is_still(type)
open_in crop.c /^open_in(name, type)
start_in crop.c /^start_in()
next_in crop.c /^next_in()
speed_in crop.c /^speed_in()
count_in crop.c /^count_in()
close_in crop.c /^close_in()
load_first crop.c /^load_first(name, type)
view_in crop.c /^view_in()
qload_vision crop.c /^qload_vision()
qload_pc crop.c /^qload_pc()
qload_gif crop.c /^qload_gif()
qsave_gif crop.c /^qsave_gif()
qload_rif crop.c /^qload_rif()
qload_anim crop.c /^qload_anim()
qload_fli crop.c /^qload_fli()
qload_mac crop.c /^qload_mac()
qload_amiga crop.c /^qload_amiga()
qload_seq crop.c /^qload_seq()
s_fli crop.c /^s_fli(name, si, iv, count, s
qsave_fli crop.c /^qsave_fli()
save_fli crop.c /^save_fli(name)
tile_s_cel crop.c /^tile_s_cel(cel)
qmove crop.c /^qmove()
mono_cmap crop.c /^mono_cmap()
bits_to_bytes crop.c /^bits_to_bytes(in, out, w, om
unpic_line crop.c /^unpic_line(bf, buf, len, nam
intel_swaps crop.c /^intel_swaps(x, length)
intel_swap crop.c /^intel_swap(x)
long_intel_swap crop.c /^long_intel_swap(x)
put_st_cmap crop.c /^put_st_cmap(cmap)
NONE crop.h /^#define NONE 0
GIF crop.h /^#define GIF 1
TARGA crop.h /^#define TARGA 2
SEQ crop.h /^#define SEQ 3
RIF crop.h /^#define RIF 4
FLI crop.h /^#define FLI 5
MAC crop.h /^#define MAC 6
ST crop.h /^#define ST 7
AMIGA crop.h /^#define AMIGA 8
PCX crop.h /^#define PCX 9
ANIM crop.h /^#define ANIM 10
pic_sgi_pull croppull.c /^			struct pull pic_sgi_pull 
pic_dots_pull croppull.c /^			struct pull pic_dots_pull
pic_lgi_pull croppull.c /^			struct pull pic_lgi_pull 
pic_lpc_pull croppull.c /^			struct pull pic_lpc_pull 
pic_lma_pull croppull.c /^			struct pull pic_lma_pull 
pic_lst_pull croppull.c /^			struct pull pic_lst_pull 
pic_lam_pull croppull.c /^			struct pull pic_lam_pull 
pic_lta_pull croppull.c /^			struct pull pic_lta_pull 
rpic_pull croppull.c /^		struct pull rpic_pull = {
pic_pull croppull.c /^	struct pull pic_pull = {
fli_sfl_pull croppull.c /^			struct pull fli_sfl_pull 
fli_vfl_pull croppull.c /^			struct pull fli_vfl_pull 
fli_lfl_pull croppull.c /^			struct pull fli_lfl_pull 
fli_lst_pull croppull.c /^			struct pull fli_lst_pull 
fli_lam_pull croppull.c /^			struct pull fli_lam_pull 
rfli_pull croppull.c /^		struct pull rfli_pull = {
fli_pull croppull.c /^	struct pull fli_pull = {
cro_qui_pull croppull.c /^			struct pull cro_qui_pull 
cro_dot_pull croppull.c /^			struct pull cro_dot_pull 
cro_sli_pull croppull.c /^			struct pull cro_sli_pull 
cro_mov_pull croppull.c /^			struct pull cro_mov_pull 
cro_sca_pull croppull.c /^			struct pull cro_sca_pull 
cro_info_pull croppull.c /^			struct pull cro_info_pull
cro_abo_pull croppull.c /^			struct pull cro_abo_pull 
rcro_pull croppull.c /^		struct pull rcro_pull = {
cro_pull croppull.c /^	struct pull cro_pull = {
root_pull croppull.c /^struct pull root_pull = {
pull_disables croppull.c /^pull_disables()
cinsert cursorda.c /^struct cursor cinsert = 	{ 0
ckill cursorda.c /^struct cursor ckill = 	{ 0, 
cdown cursorda.c /^struct cursor cdown = 	{ 0, 
cleft cursorda.c /^struct cursor cleft = 	{ 0, 
cright cursorda.c /^struct cursor cright = 	{ 0,
cup cursorda.c /^struct cursor cup = 	{ 0, iu
cright2 cursorda.c /^struct cursor cright2 = 	{ 0
ctridown cursorda.c /^struct cursor ctridown = 	{ 
ctriup cursorda.c /^struct cursor ctriup = 	{ 0,
bad_code_count decoder.c /^int bad_code_count;
gif_decoder decoder.c /^WORD gif_decoder(linewidth)
de_handler diskerr.c /^de_handler(errval, ax, bp, s
init_de diskerr.c /^init_de()
byte_regs dosstuff.c /^struct byte_regs 
word_regs dosstuff.c /^struct word_regs
regs dosstuff.c /^union regs
change_dev dosstuff.c /^change_dev(newdev)
change_dir dosstuff.c /^change_dir(name)
get_device dosstuff.c /^get_device()
devices dosstuff.c /^char devices[26];
dev_count dosstuff.c /^int dev_count;
get_devices dosstuff.c /^get_devices()
make_current_drawer dosstuff.c /^make_current_drawer()
fndata dosstuff.h /^struct fndata 
fccomp fccomp.c /^fccomp(s1, s2, cbuf, count)
cur_menu feelmenu.c /^Flicmenu *cur_menu;	/* point
draw_mp feelmenu.c /^draw_mp()
hide_mp feelmenu.c /^hide_mp()
clip_rmove_menu feelmenu.c /^clip_rmove_menu(m,dx,dy)
rmove_menu feelmenu.c /^rmove_menu(m,dx,dy)
repeat_on_pdn feelmenu.c /^repeat_on_pdn(v)
processed_key feelmenu.c /^WORD processed_key;
break_menu feelmenu.c /^char break_menu, menu_ok;
menu_ok feelmenu.c /^char break_menu, menu_ok;
close_menu_bad feelmenu.c /^close_menu_bad()
close_menu feelmenu.c /^close_menu()
menu_keys feelmenu.c /^menu_keys(m)
do_pmenu feelmenu.c /^do_pmenu(m, s)
hfs_do_menu feelmenu.c /^hfs_do_menu(m)
do_menu feelmenu.c /^do_menu(m)
interp_menu feelmenu.c /^interp_menu(m, source, s)
rksel feelmenu.c /^rksel( m)
in_menu feelmenu.c /^in_menu(m)
rsel feelmenu.c /^rsel( m)
toggle_group feelmenu.c /^toggle_group(m)
change_mode feelmenu.c /^change_mode(m)
file filedata.c /^char file[80];
fcancel_sel filedata.c /^struct flicmenu fcancel_sel 
fok_sel filedata.c /^struct flicmenu fok_sel =
fplus_sel filedata.c /^struct flicmenu fplus_sel =
device filedata.c /^WORD device;
fdev16_sel filedata.c /^struct flicmenu fdev16_sel =
fdev15_sel filedata.c /^struct flicmenu fdev15_sel =
fdev14_sel filedata.c /^struct flicmenu fdev14_sel =
fdev13_sel filedata.c /^struct flicmenu fdev13_sel =
fdev12_sel filedata.c /^struct flicmenu fdev12_sel =
fdev11_sel filedata.c /^struct flicmenu fdev11_sel =
fdev10_sel filedata.c /^struct flicmenu fdev10_sel =
fdev9_sel filedata.c /^struct flicmenu fdev9_sel =
fdev8_sel filedata.c /^struct flicmenu fdev8_sel =
fdev7_sel filedata.c /^struct flicmenu fdev7_sel =
fdev6_sel filedata.c /^struct flicmenu fdev6_sel =
fdev5_sel filedata.c /^struct flicmenu fdev5_sel =
fdev4_sel filedata.c /^struct flicmenu fdev4_sel =
fdev3_sel filedata.c /^struct flicmenu fdev3_sel =
fdev2_sel filedata.c /^struct flicmenu fdev2_sel =
rootdir_sel filedata.c /^struct flicmenu rootdir_sel 
und_wild filedata.c /^char und_wild[12] = "*.*";
wild filedata.c /^char wild[12];
wild_stringq filedata.c /^struct stringq wild_stringq 
fwild_sel filedata.c /^struct flicmenu fwild_sel =
fwildp_sel filedata.c /^struct flicmenu fwildp_sel =
und_drawer filedata.c /^char und_drawer[70] = "r:";
drawer_stringq filedata.c /^struct stringq drawer_string
fdrawer_sel filedata.c /^struct flicmenu fdrawer_sel 
fdrawerp_sel filedata.c /^struct flicmenu fdrawerp_sel
und_file filedata.c /^char und_file[81] = "zippy";
file_stringq filedata.c /^struct stringq file_stringq 
ffile_sel filedata.c /^struct flicmenu ffile_sel =
ffilep_sel filedata.c /^struct flicmenu ffilep_sel =
fscroller filedata.c /^struct name_scroller fscroll
flist_sel filedata.c /^struct flicmenu flist_sel =
fdown_sel filedata.c /^struct flicmenu fdown_sel =
fscroll_sel filedata.c /^struct flicmenu fscroll_sel 
fup_sel filedata.c /^struct flicmenu fup_sel =
ftitle_sel filedata.c /^struct flicmenu ftitle_sel =
fileq_menu filedata.c /^struct flicmenu fileq_menu =
fscroller_top filemenu.c /^WORD fscroller_top;
redisplay_drawer filemenu.c /^Vector redisplay_drawer;	/* 
path_buf filemenu.c /^char 	path_buf[81];
fileq_result filemenu.c /^char fileq_result;
wild_lst filemenu.c /^struct name_list *wild_lst;
search_all filemenu.c /^char search_all[] = "*.*";
new_drawer filemenu.c /^new_drawer()
new_dev filemenu.c /^new_dev(m)
go_rootdir filemenu.c /^go_rootdir(m)
go_updir filemenu.c /^go_updir(m)
type_file_name filemenu.c /^type_file_name(m)
init_fscroller filemenu.c /^init_fscroller()
redraw_fscroller filemenu.c /^redraw_fscroller()
undo_file filemenu.c /^undo_file(m)
undo_drawer filemenu.c /^undo_drawer(m)
fsel_name filemenu.c /^fsel_name(m)
fq_drawer_stringq filemenu.c /^fq_drawer_stringq(m)
fq_toggle_wild filemenu.c /^fq_toggle_wild(m)
fq_wild_stringq filemenu.c /^fq_wild_stringq(m)
fq_ok filemenu.c /^fq_ok()
fndata filemenu.c /^struct fndata 
add_wild filemenu.c /^add_wild(fn, prefix)
build_wild_list filemenu.c /^build_wild_list()
attr_wild_list filemenu.c /^attr_wild_list(attr, pat, pr
make_path_name filemenu.c /^make_path_name(drawer, file,
fix_suffix filemenu.c /^fix_suffix(f,remove)
remove_suffix filemenu.c /^remove_suffix(s)
fq_ok_plus filemenu.c /^fq_ok_plus()
inc_file filemenu.c /^inc_file()
hook_devices filemenu.c /^hook_devices(m, buttons)
mcurrent_drawer filemenu.c /^mcurrent_drawer()
get_filename filemenu.c /^get_filename(prompt, suffix,
fli_has_colors fli.c /^char fli_has_colors;
open_fli fli.c /^open_fli(name)
close_fli fli.c /^close_fli()
start_fli fli.c /^start_fli()
next_fli fli.c /^next_fli()
count_fli fli.c /^count_fli()
speed_fli fli.c /^speed_fli()
MAXFRAMES fli.h /^#define MAXFRAMES (4*1000)	/
FLIH_MAGIC fli.h /^#define FLIH_MAGIC 0xaf11	
FLIX_MAGIC fli.h /^#define FLIX_MAGIC (0x971b+4
SETTINGS_MAGIC fli.h /^#define SETTINGS_MAGIC (FLIX
FLIF_MAGIC fli.h /^#define FLIF_MAGIC 0xf1fa
fli_head fli.h /^struct fli_head
FLI_FINISHED fli.h /^#define FLI_FINISHED 1
FLI_LOOPED fli.h /^#define FLI_LOOPED	2
fli_frame fli.h /^struct fli_frame
FLI_COL fli.h /^#define FLI_COL 0
FLI_WRUN fli.h /^#define FLI_WRUN 1
FLI_WSKIP fli.h /^#define FLI_WSKIP 2
FLI_WSKIP2 fli.h /^#define FLI_WSKIP2 3
FLI_COL2 fli.h /^#define FLI_COL2 4
FLI_WSKIPRUN fli.h /^#define FLI_WSKIPRUN 5
FLI_BSKIP fli.h /^#define FLI_BSKIP 6
FLI_BSKIPRUN fli.h /^#define FLI_BSKIPRUN 7
FLI_BSC fli.h /^#define FLI_BSC 8
FLI_SBSC fli.h /^#define FLI_SBSC 9
FLI_SBSRSC fli.h /^#define FLI_SBSRSC 10
FLI_COLOR fli.h /^#define FLI_COLOR 11
FLI_LC fli.h /^#define FLI_LC	12
FLI_BLACK fli.h /^#define FLI_BLACK 13
FLI_ICOLORS fli.h /^#define FLI_ICOLORS 14
FLI_BRUN fli.h /^#define FLI_BRUN 15
FLI_COPY fli.h /^#define FLI_COPY 16
fli_chunk fli.h /^struct fli_chunk
EMPTY_DCOMP fli.h /^#define EMPTY_DCOMP 8  /* si
flx fli.h /^struct flx
Flx fli.h /^typedef struct flx Flx;
FLX_OFFSETS fli.h /^#define FLX_OFFSETS ((long)s
vedit fli.h /^struct vedit
Vedit fli.h /^typedef struct vedit Vedit;
vtrack fli.h /^struct vtrack
Vtrack fli.h /^typedef struct vtrack Vtrack
VGA_MAGIC fli.h /^#define VGA_MAGIC 0x0100
vga_header fli.h /^struct vga_header
PIC_MAGIC fli.h /^#define PIC_MAGIC 0x9119
pic_header fli.h /^struct pic_header
PIC_UNC fli.h /^#define PIC_UNC  0
PIC_BRUN fli.h /^#define PIC_BRUN 1
rectangle flicmenu.h /^struct rectangle
slidepot flicmenu.h /^struct slidepot
qslider flicmenu.h /^struct qslider
range flicmenu.h /^struct range
grid flicmenu.h /^struct grid
flicmenu flicmenu.h /^struct flicmenu
Flicmenu flicmenu.h /^typedef struct flicmenu Flic
NOTEXT flicmenu.h /^#define NOTEXT NULL
NOSEE flicmenu.h /^#define NOSEE  0L
NOFEEL flicmenu.h /^#define NOFEEL 0L
NOGROUP flicmenu.h /^#define NOGROUP NULL
NOKEY flicmenu.h /^#define NOKEY	0
NOOPT flicmenu.h /^#define NOOPT 0L
option_list flicmenu.h /^struct option_list
Option_list flicmenu.h /^typedef struct option_list O
NOOOM flicmenu.h /^#define NOOOM NULL
pull flicmenu.h /^struct pull
Pull flicmenu.h /^typedef struct pull Pull;
NONEXT flicmenu.h /^#define NONEXT NULL
NOCHILD flicmenu.h /^#define NOCHILD NULL
NODATA flicmenu.h /^#define NODATA NULL
cursor flicmenu.h /^struct cursor 
stringq flicmenu.h /^struct stringq
Stringq flicmenu.h /^typedef struct stringq Strin
STRINGQSZ flicmenu.h /^#define STRINGQSZ 128
name_scroller flicmenu.h /^struct name_scroller
Name_scroller flicmenu.h /^typedef struct name_scroller
font_hdr gemfont.h /^struct	font_hdr {
CYP_CUSTOM_FONT gemfont.h /^#define CYP_CUSTOM_FONT	0xab
STPROP gemfont.h /^#define STPROP 0
MFIXED gemfont.h /^#define MFIXED 1
MPROP gemfont.h /^#define MPROP 2
poke_bg gfx.c /^poke_bg(p)
restore_bg gfx.c /^restore_bg()
see_cmap gfx.c /^see_cmap()
flash_bg gfx.c /^flash_bg(p)
flash_green gfx.c /^flash_green()
flash_red gfx.c /^flash_red()
flash_blue gfx.c /^flash_blue()
copy_form gfx.c /^copy_form(s, d)
exchange_form gfx.c /^exchange_form(s, d)
color_form gfx.c /^color_form(f,color)
zero_bytes gfx.c /^zero_bytes(pt, count)
copy_lots gfx.c /^copy_lots(s, d, count)
zero_lots gfx.c /^zero_lots(pt, size)
clear_form gfx.c /^clear_form(f)
draw_frame gfx.c /^draw_frame(color, x0, y0, x1
sscale_by gfx.c /^sscale_by(x,p,q)
uscale_by gfx.c /^uscale_by(x, p, q)
rscale_by gfx.c /^rscale_by(x,p,q)
itmult gfx.c /^itmult(trig, x)
exchange_bytes gfx.c /^exchange_bytes(a, b, count)
gif_get_byte gif.c /^gif_get_byte()
gif_out_line gif.c /^gif_out_line(pixels, linelen
open_gif gif.c /^open_gif(name)
close_gif gif.c /^close_gif()
start_gif gif.c /^start_gif()
next_gif gif.c /^next_gif()
count_gif gif.c /^count_gif()
speed_gif gif.c /^speed_gif()
gif_header gif.h /^struct gif_header
COLTAB gif.h /^#define COLTAB	0x80
COLMASK gif.h /^#define COLMASK 0x70
COLSHIFT gif.h /^#define COLSHIFT 4
PIXMASK gif.h /^#define PIXMASK 7
COLPIXVGA13 gif.h /^#define COLPIXVGA13 (COLTAB 
gif_image gif.h /^struct gif_image
ITLV_BIT gif.h /^#define ITLV_BIT 0x40
OUT_OF_MEMORY gif.h /^#define OUT_OF_MEMORY -10
BAD_CODE_SIZE gif.h /^#define BAD_CODE_SIZE -20
READ_ERROR gif.h /^#define READ_ERROR -1
WRITE_ERROR gif.h /^#define WRITE_ERROR -2
OPEN_ERROR gif.h /^#define OPEN_ERROR -3
CREATE_ERROR gif.h /^#define CREATE_ERROR -4
TOO_HIGH gif.h /^#define TOO_HIGH	-5
vs globals.c /^Vsettings vs = 
ivmode globals.c /^int ivmode;
init_drawer globals.c /^char init_drawer[71];
sys_cmap globals.c /^UBYTE sys_cmap[COLORS*3];
vf globals.c /^Video_form vf = { 0,0,XMAX,Y
colormap img.h /^struct colormap
imgspec img.h /^struct imgspec
imgfile img.h /^struct imgfile
packet img.h /^struct packet
ATTRIB img.h /^#define ATTRIB  0x0f        
SCRORG img.h /^#define SCRORG  0x20        
INLEAVE img.h /^#define INLEAVE  0xc0       
new_video init.c /^new_video()
vconfg init.c /^struct config vconfg;
read_config init.c /^read_config()
init_sys init.c /^init_sys()
old_video init.c /^old_video()
cleanup init.c /^cleanup()
sys5 initcmap.c /^UBYTE sys5;
init_cmap initcmap.c /^UBYTE init_cmap[COLORS*3] = 
pure_red initcmap.c /^UBYTE pure_red[] = {63, 0, 0
pure_black initcmap.c /^UBYTE pure_black[3] = {0,0,0
pure_white initcmap.c /^UBYTE pure_white[3] = {63,63
pure_green initcmap.c /^UBYTE pure_green[] = {0, 63,
pure_blue initcmap.c /^UBYTE pure_blue[] = {0, 0, 6
mc_colors initcmap.c /^WORD mc_colors[5];
f_colors initcmap.c /^f_colors()
find_colors initcmap.c /^find_colors()
check_cmap initcmap.c /^check_cmap()
uncheck_cmap initcmap.c /^uncheck_cmap()
I_OPAQUE inks.h /^#define I_OPAQUE 0
I_VGRAD inks.h /^#define I_VGRAD 1
I_HGRAD inks.h /^#define I_HGRAD 2
I_LGRAD inks.h /^#define I_LGRAD 3
I_GLAZE inks.h /^#define I_GLAZE 4
I_GLASS inks.h /^#define I_GLASS	6
I_SCRAPE inks.h /^#define I_SCRAPE 7
I_XOR inks.h /^#define I_XOR 8
I_JUMBLE inks.h /^#define I_JUMBLE 9
I_ADD inks.h /^#define I_ADD 10
I_GLOW inks.h /^#define I_GLOW 11
I_TILE inks.h /^#define I_TILE	12
I_SPARK inks.h /^#define I_SPARK 13
I_SPLIT inks.h /^#define I_SPLIT 14
I_UNZAG inks.h /^#define I_UNZAG 15
I_HOLLOW inks.h /^#define I_HOLLOW 16
I_BRIGHT inks.h /^#define I_BRIGHT 17
I_GREY inks.h /^#define I_GREY 18
I_SWEEP inks.h /^#define I_SWEEP 19
I_CLOSE inks.h /^#define I_CLOSE 20
I_DARK inks.h /^#define I_DARK 21
I_EMBOSS inks.h /^#define I_EMBOSS 22
I_PULL inks.h /^#define I_PULL 23
I_SMEAR inks.h /^#define I_SMEAR 24
I_RGRAD inks.h /^#define I_RGRAD 25
uzx input.c /^WORD uzx,uzy;	/* unzoomed xy
uzy input.c /^WORD uzx,uzy;	/* unzoomed xy
lastx input.c /^WORD lastx, lasty;
lasty input.c /^WORD lastx, lasty;
mouse_moved input.c /^WORD mouse_moved;	/* mouse n
mouse_button input.c /^WORD mouse_button, omouse_bu
omouse_button input.c /^WORD mouse_button, omouse_bu
key_hit input.c /^WORD key_hit;
key_in input.c /^WORD key_in;
firstx input.c /^WORD firstx, firsty;
firsty input.c /^WORD firstx, firsty;
mouse_on input.c /^WORD mouse_on = 1;
regval input.c /^static struct regval {int ax
umouse_x input.c /^WORD umouse_x, umouse_y;	/* 
umouse_y input.c /^WORD umouse_x, umouse_y;	/* 
wait_sync input.c /^wait_sync()
get80hz input.c /^get80hz()
wait_a_jiffy input.c /^wait_a_jiffy(j)
init_mouse input.c /^init_mouse()
init_input input.c /^init_input()
umouse input.c /^char umouse[256];	/* buffer 
scursor input.c /^scursor()
ucursor input.c /^ucursor()
ccursor input.c /^ccursor()
reuse_input input.c /^reuse_input()
c_mouse input.c /^c_mouse()
c_input input.c /^c_input()
check_input input.c /^check_input()
vsync_input input.c /^vsync_input(count)
wait_input input.c /^wait_input()
wait_penup input.c /^wait_penup()
wait_rup input.c /^wait_rup()
wait_click input.c /^wait_click()
hide_mouse input.c /^hide_mouse()
show_mouse input.c /^show_mouse()
jexists jfile.c /^jexists(title)
jdelete jfile.c /^jdelete(title)
jrename jfile.c /^jrename(oldname, newname)
jcreate jfile.c /^jcreate(title)
jopen jfile.c /^jopen(title, mode)
jclose jfile.c /^jclose(f)
gentle_close jfile.c /^gentle_close(f)
jreadwrite jfile.c /^jreadwrite(f,buf,size,ah)
copy_in_file jfile.c /^copy_in_file(file, bytes, so
jcopyfile jfile.c /^jcopyfile(source,dest)
jseek jfile.c /^jseek(f, offset, mode)
read_gulp jfile.c /^read_gulp(name, buf, size)
write_gulp jfile.c /^write_gulp(name, buf, size)
cant_create jfile.c /^cant_create(name)
cant_find jfile.c /^cant_find(name)
truncated jfile.c /^truncated(filename)
overwrite_old jfile.c /^overwrite_old(name)
mangled jfile.c /^mangled(name)
check_abort jfile.c /^check_abort(frame, of)
MAKE_ID jiff.h /^#define MAKE_ID(a, b, c, d)\
FORM jiff.h /^#define FORM MAKE_ID('F', 'O
ILBM jiff.h /^#define ILBM MAKE_ID('I', 'L
BMHD jiff.h /^#define BMHD MAKE_ID('B', 'M
CMAP jiff.h /^#define CMAP MAKE_ID('C', 'M
BODY jiff.h /^#define BODY MAKE_ID('B', 'O
RIFF jiff.h /^#define RIFF MAKE_ID('R', 'I
VRUN jiff.h /^#define VRUN MAKE_ID('V', 'R
bytes4 jiff.h /^union bytes4
iff_chunk jiff.h /^struct iff_chunk
form_chunk jiff.h /^struct form_chunk
BitMapHeader jiff.h /^struct BitMapHeader
NULL jimk.h /^#define NULL ((void *)0)
WORD jimk.h /^#define WORD int
UWORD jimk.h /^#define UWORD unsigned int
BYTE jimk.h /^#define BYTE char
UBYTE jimk.h /^#define UBYTE unsigned char
jread jimk.h /^#define jread(f,b,size) jrea
jwrite jimk.h /^#define jwrite(f,b,size) jre
free_string jimk.h /^#define free_string(pt) free
string_width jimk.h /^#define string_width(s) (str
zero_structure jimk.h /^#define zero_structure(s, si
zero_words jimk.h /^#define zero_words(s,size) s
Vector jimk.h /^typedef int (*Vector)();	/* 
PLANEPTR jimk.h /^typedef unsigned char *PLANE
Array_els jimk.h /^#define Array_els(arr) (size
Raster_block jimk.h /^#define Raster_block(w, h) (
Raster_line jimk.h /^#define Raster_line(w) (w)
Mask_line jimk.h /^#define Mask_line(w) (((w)+7
Mask_block jimk.h /^#define Mask_block(w, h)	(Ma
XMAX jimk.h /^#define XMAX 320
BPR jimk.h /^#define BPR 320
YMAX jimk.h /^#define YMAX 200
WIDTH jimk.h /^#define WIDTH 320
HEIGHT jimk.h /^#define HEIGHT 200
DEPTH jimk.h /^#define DEPTH 8
COLORS jimk.h /^#define COLORS 256
SCREEN_SIZE jimk.h /^#define SCREEN_SIZE (BPR*HEI
VGA_SCREEN jimk.h /^#define VGA_SCREEN ((void *)
CH_WIDTH jimk.h /^#define CH_WIDTH 6
CH_HEIGHT jimk.h /^#define CH_HEIGHT 8
name_list jimk.h /^struct name_list
Name_list jimk.h /^typedef struct name_list Nam
Names jimk.h /^typedef struct name_list Nam
thread2_list jimk.h /^struct thread2_list
Thread2_list jimk.h /^typedef struct thread2_list 
BitMap jimk.h /^struct BitMap 
VCFGMAGIC jimk.h /^#define VCFGMAGIC 0x2891
HSZ jimk.h /^#define HSZ 4	
PDN jimk.h /^#define PDN (mouse_button & 
RDN jimk.h /^#define RDN (mouse_button & 
EDN jimk.h /^#define EDN (mouse_button & 
PJSTDN jimk.h /^#define PJSTDN ( (mouse_butt
RJSTDN jimk.h /^#define RJSTDN ( (mouse_butt
PAGEUP jimk.h /^#define PAGEUP  0x4900
PAGEDN jimk.h /^#define PAGEDN  0x5100
ENDKEY jimk.h /^#define ENDKEY  0x4f00
HOMEKEY jimk.h /^#define HOMEKEY 0x4700
DELKEY jimk.h /^#define DELKEY  0x5300
LARROW jimk.h /^#define LARROW	0x4b00
RARROW jimk.h /^#define RARROW	0x4d00
UARROW jimk.h /^#define UARROW	0x4800
DARROW jimk.h /^#define DARROW	0x5000
absval jimk.h /^#define absval(x) ((x) >= 0 
byte_regs jimk.h /^struct byte_regs 
word_regs jimk.h /^struct word_regs
regs jimk.h /^union regs
video_form jimk.h /^struct video_form
Video_form jimk.h /^typedef struct video_form Vi
MASK_SIZE jimk.h /^#define MASK_SIZE (Mask_line
vcel jimk.h /^struct vcel
Vcel jimk.h /^typedef struct vcel Vcel;
blitblock jimk.h /^struct blitblock 
colblock jimk.h /^#define colblock(color, x, y
colrop jimk.h /^#define colrop(color, x, y, 
xorrop jimk.h /^#define xorrop(color, x, y, 
cdraw_brush jimk.h /^#define cdraw_brush(brush, x
draw_brush jimk.h /^#define draw_brush(brush, x,
hline jimk.h /^#define hline(y, x0, x1, col
vline jimk.h /^#define vline(x, y0, y1, col
color_hslice jimk.h /^#define color_hslice(y, heig
putdot jimk.h /^#define putdot(x, y, color) 
getdot jimk.h /^#define getdot(x,y)	getd(vf.
gtext jimk.h /^#define gtext(s, x, y, color
stext jimk.h /^#define stext(s, x, y, color
marqi_frame jimk.h /^#define marqi_frame(x0,y0,x1
undo_frame jimk.h /^#define undo_frame(x0,y0,x1,
marqidata jimk.h /^struct marqidata
stood_by jimk.h /^#define stood_by() undraw_tb
cgrid jimk.h /^struct cgrid
point jimk.h /^struct point
Point jimk.h /^typedef struct point Point;
vertex jimk.h /^struct vertex
Vertex jimk.h /^typedef struct vertex Vertex
SIXTY4K jimk.h /^#define SIXTY4K ((1L<<16)-16
GROUND_Z jimk.h /^#define GROUND_Z 512	
SCALE_ONE jimk.h /^#define SCALE_ONE 	(1<<14)
ado_setting jimk.h /^struct ado_setting
MMD_PAINT jimk.h /^#define MMD_PAINT 0
MMD_TITLE jimk.h /^#define MMD_TITLE 1
MMD_EDIT jimk.h /^#define MMD_EDIT 2
CBUF_SIZE jimk.h /^#define CBUF_SIZE (64000L+3*
copy_cmap jimk.h /^#define copy_cmap(s,d) copy_
paskmem jimk.h /^#define paskmem askmem
pfreemem jimk.h /^#define pfreemem freemem
BSIZE jimk.h /^#define BSIZE 2048
bfile jimk.h /^struct bfile
Bfile jimk.h /^typedef struct bfile Bfile;
TWOPI jimk.h /^#define TWOPI 1024
config jimk.h /^struct config
VP_SETTING jimk.h /^#define VP_SETTING 0x9499
bundle jimk.h /^struct bundle
START_SIXCUBE jimk.h /^#define START_SIXCUBE 0
MC_BLACK jimk.h /^#define MC_BLACK 0
MC_GREY jimk.h /^#define MC_GREY 1
MC_WHITE jimk.h /^#define MC_WHITE 2
MC_BRIGHT jimk.h /^#define MC_BRIGHT 3
MC_RED jimk.h /^#define MC_RED 4
sblack jimk.h /^#define sblack (mc_colors[MC
sgrey jimk.h /^#define sgrey (mc_colors[MC_
swhite jimk.h /^#define swhite (mc_colors[MC
sbright jimk.h /^#define sbright (mc_colors[M
sred jimk.h /^#define sred (mc_colors[MC_R
BOX_TOOL jimk.h /^#define BOX_TOOL 0
CIRCLE_TOOL jimk.h /^#define CIRCLE_TOOL 1
CURVE_TOOL jimk.h /^#define CURVE_TOOL 2
DRAW_TOOL jimk.h /^#define DRAW_TOOL 3
DRIZ_TOOL jimk.h /^#define DRIZ_TOOL 4
FILL_TOOL jimk.h /^#define FILL_TOOL 5
FILLTO_TOOL jimk.h /^#define FILLTO_TOOL 6
GEL_TOOL jimk.h /^#define GEL_TOOL 7
LINE_TOOL jimk.h /^#define LINE_TOOL 8
MOVE_TOOL jimk.h /^#define MOVE_TOOL 9
OVAL_TOOL jimk.h /^#define OVAL_TOOL 10
PETAL_TOOL jimk.h /^#define PETAL_TOOL 11
POLY_TOOL jimk.h /^#define POLY_TOOL 12
RPOLY_TOOL jimk.h /^#define RPOLY_TOOL 13
SEP_TOOL jimk.h /^#define SEP_TOOL 14
SHAPE_TOOL jimk.h /^#define SHAPE_TOOL 15
SPIRAL_TOOL jimk.h /^#define SPIRAL_TOOL 16
SPRAY_TOOL jimk.h /^#define SPRAY_TOOL 17
STAR_TOOL jimk.h /^#define STAR_TOOL 18
STREAK_TOOL jimk.h /^#define STREAK_TOOL 19
TEXT_TOOL jimk.h /^#define TEXT_TOOL 20
vsettings jimk.h /^struct vsettings 
Vsettings jimk.h /^typedef struct vsettings Vse
brun_comp_line lccomp.c /^brun_comp_line(s1, cbuf, cou
til_next_skip lccomp.c /^til_next_skip(s1, s2, bcount
til_next_same lccomp.c /^til_next_same(s2x,wcount)
sbrc_line lccomp.c /^sbrc_line(s1, s2, cbuf, coun
lccomp lccomp.c /^lccomp(s1,s2,cbuf,width,heig
brun lccomp.c /^brun(s1,s2,cbuf,width,height
open_mac macpic.c /^open_mac(name)
close_mac macpic.c /^close_mac()
start_mac macpic.c /^start_mac()
speed_mac macpic.c /^speed_mac()
count_mac macpic.c /^count_mac()
next_mac macpic.c /^next_mac()
scale_mac macpic.c /^scale_mac(w,h)
see_mac macpic.c /^see_mac(cel)
main main.c /^main()
cropper_loop main.c /^cropper_loop()
quit main.c /^quit()
qquit main.c /^qquit()
about_lines main.c /^char *about_lines[] =
about main.c /^about()
qstatus main.c /^qstatus()
dokeys main.c /^dokeys()
anim_lines main.c /^char *anim_lines[] = 
qload_amimovie main.c /^qload_amimovie()
selit main.c /^selit(m,s)
blocks_out memory.c /^int blocks_out;
mblock memory.c /^struct mblock
mem_free memory.c /^unsigned mem_free;
ptr_offset memory.c /^ptr_offset(offset, seg)
ptr_seg memory.c /^ptr_seg(offset, seg)
make_long memory.c /^make_long(l)
make_ptr memory.c /^make_ptr(pt)
frags memory.c /^frags()
largest_frag memory.c /^largest_frag()
long_to_pt memory.c /^long_to_pt(l)
pt_to_long memory.c /^pt_to_long(offset, seg)
outta_memory memory.c /^outta_memory()
mfree memory.c /^mfree(nb, amount)
early_magic memory.c /^early_magic(pt)
mem_to_magic memory.c /^mem_to_magic(pt, amount)
check_mem_magic memory.c /^check_mem_magic(p, amount)
freemem memory.c /^freemem(pt)
laskmem memory.c /^laskmem(size)
askmem memory.c /^askmem(size)
lbegmem memory.c /^lbegmem(size)
lbegcmem memory.c /^lbegcmem(size)
begmem memory.c /^begmem(size)
gentle_freemem memory.c /^gentle_freemem(pt)
ck_block memory.c /^ck_block(pt)
ck_heap memory.c /^ck_heap()
check_heap memory.c /^check_heap()
seal_heap memory.c /^seal_heap()
to_upper names.c /^to_upper(s)
ustrcmp names.c /^ustrcmp(as, bs)
tr_string names.c /^tr_string(string, in, out)
suffix_in names.c /^suffix_in(string, suff)
els_in_list names.c /^els_in_list(list)
cmp_name_list names.c /^cmp_name_list(l1,l2)
sort_list names.c /^sort_list(list, cmp)
sort_name_list names.c /^sort_name_list(list)
sort_array names.c /^sort_array(array, count, cmp
clone_string names.c /^clone_string(s)
bitmasks names.c /^unsigned char bitmasks[8] =
getbit names.c /^getbit(table, ix)
setbit names.c /^setbit(table,ix)
free_name_list names.c /^free_name_list(lst)
longest_string names.c /^longest_string(strings, coun
remove_a_suffix names.c /^remove_a_suffix(f)
pcx_header pcx.c /^struct pcx_header
open_pcx pcx.c /^open_pcx(name)
close_pcx pcx.c /^close_pcx()
count_pcx pcx.c /^count_pcx()
speed_pcx pcx.c /^speed_pcx()
start_pcx pcx.c /^start_pcx()
next_pcx pcx.c /^next_pcx()
llpoint poly.h /^struct llpoint
LLpoint poly.h /^typedef struct llpoint LLpoi
POLYMAGIC poly.h /^#define POLYMAGIC 0x99
poly poly.h /^struct poly
Poly poly.h /^typedef struct poly Poly;
WP_RPOLY poly.h /^#define WP_RPOLY 0
WP_STAR poly.h /^#define WP_STAR 1
WP_PETAL poly.h /^#define WP_PETAL 2
WP_SPIRAL poly.h /^#define WP_SPIRAL 3
WP_ELLIPSE poly.h /^#define WP_ELLIPSE 4
menu_ix pull.c /^char menu_ix, sel_ix;
sel_ix pull.c /^char menu_ix, sel_ix;
cur_pull pull.c /^struct pull *cur_pull = &roo
in_pblock pull.c /^in_pblock(x, y, p)
pull_color pull.c /^pull_color(x, y, p)
pull_block pull.c /^pull_block(x, y, p)
pull_oblock pull.c /^pull_oblock(x, y, p)
pull_text pull.c /^pull_text(x, y, p)
pull_brush pull.c /^pull_brush(x, y, p)
menu_down pull.c /^WORD menu_down;
sel_hi pull.c /^WORD sel_hi;
abehind pull.c /^WORD *abehind, *bbehind, *cb
bbehind pull.c /^WORD *abehind, *bbehind, *cb
cbehind pull.c /^WORD *abehind, *bbehind, *cb
mbehind pull.c /^WORD *mbehind;	/* buffer for
interp_pull pull.c /^interp_pull()
undraw_pull pull.c /^undraw_pull(x, y, p, abehind
save_behind pull.c /^save_behind(x, y, p)
see_pull pull.c /^see_pull(x,y,p)
draw_pull pull.c /^draw_pull(x, y, p)
unxmenu pull.c /^unxmenu(p)
xone pull.c /^xone(p, one)
xonflag pull.c /^xonflag(p, flag)
enable_pulls pull.c /^enable_pulls(p)
update_mask_pulls pull.c /^update_mask_pulls()
which_key_pull pull.c /^which_key_pull(p, c)
hidemc pull.c /^hidemc()
pull_keys pull.c /^pull_keys(p)
qstring qnumber.c /^char qstring[11];
qstring_stringq qnumber.c /^struct stringq qstring_strin
qnum qnumber.c /^int qnum;
qnu_slider qnumber.c /^struct qslider qnu_slider = 
qnu_can_sel qnumber.c /^struct flicmenu qnu_can_sel 
qnu_ok_sel qnumber.c /^struct flicmenu qnu_ok_sel =
qnu_sli_sel qnumber.c /^struct flicmenu qnu_sli_sel 
reqstring_sel qnumber.c /^struct flicmenu reqstring_se
reqhail_sel qnumber.c /^struct flicmenu reqhail_sel 
qreq_menu qnumber.c /^struct flicmenu qreq_menu =
menu_text_box qnumber.c /^menu_text_box(m)
string_close qnumber.c /^string_close(m)
qn_feel_qslider qnumber.c /^qn_feel_qslider(m)
init_qnums qnumber.c /^init_qnums()
qreq_number qnumber.c /^qreq_number(hailing, inum, m
ytable readrif.c /^unsigned WORD ytable[YMAX];
close_rif readrif.c /^close_rif()
open_rif readrif.c /^open_rif(name)
next_rif readrif.c /^next_rif()
speed_rif readrif.c /^speed_rif()
count_rif readrif.c /^count_rif()
start_rif readrif.c /^start_rif()
usr_font rfont.c /^struct font_hdr *usr_font = 
systext rfont.c /^systext(s, x, y, color,tblit
myInt rfont.c /^	} myInt;
gftext rfont.c /^gftext(screen, f, s, x, y, c
fchar_width rfont.c /^fchar_width(f,s)
fstring_width rfont.c /^long fstring_width(f, s)
font_cel_height rfont.c /^font_cel_height(f)
spacing_data rfont.h /^struct spacing_data
rast_font rfont.h /^struct rast_font
dither rgbcmap.c /^int dither;
count_hist_18 rgbcmap.c /^count_hist_18(h)
hist_to_cmap rgbcmap.c /^hist_to_cmap(h, cm)
get_hist rgbcmap.c /^get_hist()
pack_from_hist rgbcmap.c /^pack_from_hist(dcmap, histog
find_rgb_cmap rgbcmap.c /^find_rgb_cmap(w, h, dcmap)
cel_with_cmap rgbcmap.c /^cel_with_cmap(w,h)
fit_cel_line rgbcmap.c /^fit_cel_line(d,w,b1,b2,b3)
bhash rgbcmap.c /^struct bhash
bhash rgbcmap.c /^struct bhash *bhash;
make_bhash rgbcmap.c /^make_bhash()
free_bhash rgbcmap.c /^free_bhash()
bclosest_col rgbcmap.c /^bclosest_col(rgb,count)
rerr rgbcmap.c /^int rerr,gerr,berr;
gerr rgbcmap.c /^int rerr,gerr,berr;
berr rgbcmap.c /^int rerr,gerr,berr;
flush_dither_err rgbcmap.c /^flush_dither_err()
bclosest_col rgbcmap.c /^bclosest_col(rgb,count)
rgb_files scale.c /^struct bfile rgb_files[3];
rgb_names scale.c /^char *rgb_names[3] = 
kill_rgb_files scale.c /^kill_rgb_files()
open_rgb_files scale.c /^open_rgb_files()
create_rgb_files scale.c /^create_rgb_files()
close_rgb_files scale.c /^close_rgb_files()
iscale scale.c /^iscale(s, sct, d, dct)
vga_to_red scale.c /^vga_to_red(in, out, w, cmap)
get_column scale.c /^get_column(s, d, w, h)
put_column scale.c /^put_column(s, d, w, h)
scaley scale.c /^scaley(inbytes, outbytes, in
grey_cmap scale.c /^grey_cmap(c)
yscale_file scale.c /^yscale_file(name, w, oh, nh)
scale_xdim_cel scale.c /^scale_xdim_cel(cel, new_w, l
scale_rgb_files scale.c /^scale_rgb_files(h, new_w, ne
scale_pic_cel scale.c /^scale_pic_cel(new_w, new_h)
qscale scale.c /^qscale()
do_scale scale.c /^do_scale()
free_screen screen.c /^free_screen(s)
alloc_big_screen screen.c /^alloc_big_screen(w,h)
alloc_screen screen.c /^alloc_screen()
clone_screen screen.c /^clone_screen(s)
screen_to_cel screen.c /^screen_to_cel(s, c)
scroll scroller.c /^struct name_scroller *scroll
sredraw scroller.c /^Vector sredraw;
calc_scroll_pos scroller.c /^calc_scroll_pos(scroll, scro
iscroller scroller.c /^iscroller(scr, names,scroll_
scroll_ycount scroller.c /^scroll_ycount(list_sel)
redraw_scroller scroller.c /^redraw_scroller(scroll_sel, 
end_clip_scroll scroller.c /^end_clip_scroll()
fpagedown scroller.c /^fpagedown()
fpageup scroller.c /^fpageup()
ffeelscroll scroller.c /^ffeelscroll(m)
fflscr scroller.c /^fflscr(m, realtime)
print_list scroller.c /^print_list(m)
prt_list scroller.c /^prt_list(m)
see_scroll scroller.c /^see_scroll(m)
which_sel scroller.c /^which_sel(m)
sel_name scroller.c /^sel_name(m)
fincu scroller.c /^fincu(m)
fincup scroller.c /^fincup(m)
fincd scroller.c /^fincd()
fincdown scroller.c /^fincdown(m)
blit_menu seeme.c /^blit_menu(m, pt)
sunder_menu seeme.c /^sunder_menu(m)
sdraw_menu seeme.c /^sdraw_menu(m)
unblit_menu seeme.c /^unblit_menu(m, pt)
runder_menu seeme.c /^runder_menu(m,pt)
draw_a_menu seeme.c /^draw_a_menu(m)
qdraw_a_menu seeme.c /^qdraw_a_menu(m)
draw_mp seeme.c /^draw_mp()
hide_mp seeme.c /^hide_mp()
bright seeme.c /^bright(m)
hilit seeme.c /^hilit(m)
a_block seeme.c /^a_block(color, m)
a_frame seeme.c /^a_frame(color, m)
box_cut_corner seeme.c /^box_cut_corner(x0,y0,w,h,col
box_diag_corner seeme.c /^box_diag_corner(x0,y0,w,h,co
diag_inside seeme.c /^diag_inside(x0,y0,w,h,color)
ccorner_inside seeme.c /^ccorner_inside(x0,y0,w,h,col
mb_ccorner seeme.c /^mb_ccorner(m,color)
mb_isquare seeme.c /^mb_isquare(m,color)
mb_dcorner seeme.c /^mb_dcorner(m,color)
mb_inside seeme.c /^mb_inside(m,color)
blacktext seeme.c /^blacktext(m)
greytext seeme.c /^greytext(m)
menu_text seeme.c /^menu_text(m,color)
ccorner_text seeme.c /^ccorner_text(m)
dcorner_text seeme.c /^dcorner_text(m)
move_tab_text seeme.c /^move_tab_text(m)
ncorner_text seeme.c /^ncorner_text(m)
ncorner_int seeme.c /^ncorner_int(m)
ncorner_number seeme.c /^ncorner_number(m)
ncnum seeme.c /^ncnum(m, offset)
ncorner_cursor seeme.c /^ncorner_cursor(m)
ccorner_cursor seeme.c /^ccorner_cursor(m)
gary_see_title seeme.c /^gary_see_title(m)
gary_menu_back seeme.c /^gary_menu_back(m)
gbnumber seeme.c /^gbnumber(m)
gbnumber_plus1 seeme.c /^gbnumber_plus1(m)
left_text seeme.c /^left_text(m)
color_block1 seemenu.c /^color_block1(color,m)
m2color_block seemenu.c /^m2color_block(m, fcolor, bco
white_block seemenu.c /^white_block(m)
black_block seemenu.c /^black_block(m)
grey_block seemenu.c /^grey_block(m)
see_num seemenu.c /^see_num(m, xoff, yoff, fore)
menu_cursor seemenu.c /^menu_cursor(m, color,c)
bcursor seemenu.c /^bcursor(m)
hilight seemenu.c /^hilight(m)
draw_sel seemenu.c /^draw_sel(m)
draw_menus seemenu.c /^draw_menus(m)
uh_group seemenu.c /^uh_group(m)
unhi_group seemenu.c /^unhi_group(m, mgroup)
hi_group seemenu.c /^hi_group(m, mgroup)
seq_h seq.c /^struct seq_header seq_h;
neo_h seq.c /^struct neo_head neo_h;
word_uncompress seq.c /^word_uncompress(s, d, length
open_verify_seq seq.c /^open_verify_seq(name, shead)
open_seq seq.c /^open_seq(name)
close_seq seq.c /^close_seq()
columns_to_bitplanes seq.c /^columns_to_bitplanes(s,d,wpl
de_interleave seq.c /^de_interleave(s,d,wpl,height
make_lines seq.c /^make_lines(plane,bpr,height)
next_seq seq.c /^next_seq()
start_seq seq.c /^start_seq()
count_seq seq.c /^count_seq()
speed_seq seq.c /^speed_seq()
do_test_blit seq.c /^do_test_blit(mask)
WORD seq.h /^#define WORD int
UWORD seq.h /^#define UWORD unsigned int
NULL seq.h /^#define NULL 0L
Alloc_a seq.h /^#define Alloc_a(type) (type 
Array_els seq.h /^#define Array_els(arr) (size
cel seq.h /^struct cel
Cel seq.h /^typedef struct cel Cel;
seq_header seq.h /^struct seq_header
Seq_header seq.h /^typedef struct seq_header Se
SEQ_STEREO seq.h /^#define SEQ_STEREO	1
neo_head seq.h /^struct neo_head
NEO_COPY seq.h /^#define NEO_COPY	0
NEO_XOR seq.h /^#define NEO_XOR		1
NEO_UNCOMPRESSED seq.h /^#define NEO_UNCOMPRESSED	0
NEO_CCOLUMNS seq.h /^#define NEO_CCOLUMNS	1
seq_Mask_line seq.h /^#define seq_Mask_line(width)
seq_Mask_block seq.h /^#define seq_Mask_block(width
seq_Raster_line seq.h /^#define seq_Raster_line(widt
seq_Raster_block seq.h /^#define seq_Raster_block(wid
seq_LRaster_line seq.h /^#define seq_LRaster_line(wid
seq_LRaster_block seq.h /^#define seq_LRaster_block(wi
sixhi_data sixhi.c /^UBYTE sixhi_data[] = {
sixhi_ch_ofst sixhi.c /^sixhi_ch_ofst[257] = {
sixhi_font sixhi.c /^struct font_hdr sixhi_font =
complete slide.c /^int complete;
qslide slide.c /^qslide()
calc_time_scale slide.c /^calc_time_scale(ix, intween)
preview_slide slide.c /^preview_slide()
start_slide slide.c /^start_slide()
next_slide slide.c /^next_slide()
render_slide slide.c /^render_slide()
make_knob slider.c /^make_knob(ssel)
qslide_where slider.c /^qslide_where(m)
see_qsleft slider.c /^see_qsleft(color)
see_qsright slider.c /^see_qsright(color)
see_qslider slider.c /^see_qslider(m)
resee_knob slider.c /^resee_knob()
erase_knob slider.c /^erase_knob()
inc_qsl slider.c /^inc_qsl()
dec_qsl slider.c /^dec_qsl()
feel_qslider slider.c /^feel_qslider(m)
qload_st stpic.c /^qload_st()
open_st stpic.c /^open_st(name)
close_st stpic.c /^close_st()
start_st stpic.c /^start_st()
next_st stpic.c /^next_st()
speed_st stpic.c /^speed_st()
count_st stpic.c /^count_st()
erase_last stringq.c /^erase_last(m, sq)
draw_stringq stringq.c /^draw_stringq(m, sq)
exchange_buf stringq.c /^exchange_buf(s1, s2, count)
back_copy_bytes stringq.c /^back_copy_bytes(s,d,count)
see_stringq stringq.c /^see_stringq(textcol, m)
stringq_xor_cursor stringq.c /^stringq_xor_cursor(m, sq)
feel_stringq stringq.c /^feel_stringq(textcol, blockc
feel_string_req stringq.c /^feel_string_req(m)
see_string_req stringq.c /^see_string_req(m)
init_stq_string stringq.c /^init_stq_string(stq)
undo_stringq stringq.c /^undo_stringq(m, stq_item)
upd_stringq stringq.c /^upd_stringq(name, stringq)
color_dif stubs.c /^color_dif(rgb,c)
unconfig_ints stubs.c /^unconfig_ints()
upc_char stubs.c /^upc_char(c)
list_el stubs.c /^list_el(list, ix)
init_mem stubs.c /^init_mem()
setup_summa summa.c /^setup_summa()
init_summa summa.c /^init_summa()
sscale_by summa.c /^sscale_by(x,p,q)
c_summa summa.c /^c_summa()
cleanup_summa summa.c /^cleanup_summa()
textline text.h /^struct textline 
textlist text.h /^struct textlist
MAXTEXTSIZE text.h /^#define MAXTEXTSIZE 32000   
DTSIZE text.h /^#define DTSIZE 16000        
box textbox.c /^struct rectangle box, yes_bo
yes_box textbox.c /^struct rectangle box, yes_bo
no_box textbox.c /^struct rectangle box, yes_bo
find_text_box textbox.c /^find_text_box(names, button_
undraw_tbox textbox.c /^undraw_tbox()
d_top_lines_of_box textbox.c /^d_top_lines_of_box(names, bu
draw_white_box textbox.c /^draw_white_box(b)
draw_yes_no_box textbox.c /^draw_yes_no_box(names, yes, 
draw_continue_box textbox.c /^draw_continue_box(names, con
continu_line textbox.c /^continu_line(line)
continu_box textbox.c /^continu_box(lines)
inbox textbox.c /^inbox(b)
poll_yes_no textbox.c /^poll_yes_no()
yes_no_box textbox.c /^yes_no_box(lines)
yes_no_line textbox.c /^yes_no_line(line)
conv_screen unrif.c /^conv_screen(bits)
conv8 unrif.c /^conv8(a, b, c, d, e, out)
decode_vcolumn unrif.c /^decode_vcolumn(comp, plane, 
decode_vplane unrif.c /^decode_vplane(comp, plane, B
decode_vkcolumn unrif.c /^decode_vkcolumn(comp, plane,
decode_vkplane unrif.c /^decode_vkplane(comp, plane, 
sriff_head vcomp.h /^struct sriff_head
Sriff_head vcomp.h /^typedef struct sriff_head Sr
riff_head vcomp.h /^struct riff_head
Riff_head vcomp.h /^typedef struct riff_head Rif
comp_size vcomp.h /^struct comp_size
Comp_size vcomp.h /^typedef struct comp_size Com
VCOMP_NONE vcomp.h /^#define VCOMP_NONE	0
VCOMP_VRUN vcomp.h /^#define VCOMP_VRUN	1
VCOMP_SKIP vcomp.h /^#define VCOMP_SKIP	2
vcomp_iff vcomp.h /^struct vcomp_iff
Vcomp_iff vcomp.h /^typedef struct vcomp_iff Vco
vcomp_head vcomp.h /^struct vcomp_head
Vcomp_head vcomp.h /^typedef struct vcomp_head Vc
vcomp_info vcomp.h /^struct vcomp_info
Vcomp_info vcomp.h /^typedef struct vcomp_info Vc
riff_list vcomp.h /^struct riff_list
MAXRUN vcomp.h /^#define MAXRUN 127
not_vision_lines vision.c /^char *not_vision_lines[] = {
open_verify_vision vision.c /^open_verify_vision()
trunc vision.c /^trunc()
vision_nextline vision.c /^vision_nextline()
grey_cur_line vision.c /^grey_cur_line(p)
load_bw_vision vision.c /^load_bw_vision()
hist_cur_line vision.c /^hist_cur_line(histogram)
reset_vbf vision.c /^reset_vbf()
vision_cmap vision.c /^vision_cmap()
cfit_cur_line vision.c /^cfit_cur_line(p,w)
load_color_vision vision.c /^load_color_vision()
close_vision vision.c /^close_vision()
open_vision vision.c /^open_vision(name)
count_vision vision.c /^count_vision()
next_vision vision.c /^next_vision()
start_vision vision.c /^start_vision()
speed_vision vision.c /^speed_vision()
cur_to_3files vision.c /^cur_to_3files(w,b)
scale_vision vision.c /^scale_vision(w,h)
wwnext_word wordwrap.c /^wwnext_word(s,buf,f,w,caller
wwnext_line wordwrap.c /^wwnext_line(f, s, w, buf, su
wwcount_lines wordwrap.c /^wwcount_lines(f, s, w)
wwtext wordwrap.c /^wwtext(screen, f, s, x, y, w
justify_line wordwrap.c /^justify_line(screen, font, l
just_fill wordwrap.c /^just_fill(screen, font, line
empty_list wordwrap.c /^empty_list(list)
insert_after wordwrap.c /^insert_after(last, el)
unlink_node wordwrap.c /^unlink_node(el)
free_node wordwrap.c /^free_node(el)
sub_list_el wordwrap.c /^sub_list_el(list, el)
alloc_textline wordwrap.c /^alloc_textline(words)
add_line wordwrap.c /^add_line(list, words)
print_textback wordwrap.c /^print_textback(list)
free_textlist wordwrap.c /^free_textlist(list)
print_textlist wordwrap.c /^print_textlist(list)
wwlines wordwrap.c /^wwlines(f, s, w, list)
unch wordwrap.c /^unch(buf, size, ch)
load_text wordwrap.c /^load_text(name)
save_text wordwrap.c /^save_text(name)
full_cmap writefli.c /^full_cmap(cbuf, cmap)
fli_comp_frame writefli.c /^fli_comp_frame(comp_buf, las
fli_save_frame writefli.c /^fli_save_frame(name,fd,comp_
fli_first_frame writefli.c /^fli_first_frame(cbuf, name,f
fli_next_frame writefli.c /^fli_next_frame(cbuf,last_scr
fli_finish writefli.c /^fli_finish()
fli_last_frame writefli.c /^fli_last_frame(cbuf,last_scr
gifsig writegif.c /^char gifsig[] = "GIF87a";
gif writegif.c /^struct gif_header gif;
gim writegif.c /^struct gif_image gim;
gif_bf writegif.c /^Bfile gif_bf;
save_gif writegif.c /^save_gif(name, screen)
